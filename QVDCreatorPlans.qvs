///$tab Main
//V1.0
SET ThousandSep=' ';
SET DecimalSep=',';
SET MoneyThousandSep=' ';
SET MoneyDecimalSep=',';
SET MoneyFormat='# ##0,00 ₴;-# ##0,00 ₴';
SET TimeFormat='h:mm:ss';
SET DateFormat='DD.MM.YYYY';
SET TimestampFormat='DD.MM.YYYY h:mm:ss[.fff]';
SET MonthNames='янв;фев;мар;апр;май;июн;июл;авг;сен;окт;ноя;дек';
SET DayNames='Пн;Вт;Ср;Чт;Пт;Сб;Вс';

//LET vStartPeriod = MakeDate(2015, 2, 1);

LET vCurrentDate = Today(1);

SET DIC_QVD_PATH = '..\04_DataBase\02_QVD_DB\01_Dictionary\';
SET TRN_QVD_PATH = '..\04_DataBase\02_QVD_DB\02_Transaction\';
SET FILES_PATH = '..\04_DataBase\01_DataFiles\';

SET vBatchLimitPlan = '?limit=1000';
SET vModePlan = '&mode=_all_';
SET vMethodPlan = 'get';

SET vBasePlanURL = 'https://public.api.openprocurement.org/api/0/plans'; // Live 

// Шаг  изменения пачек планов (чем больше число, тем реже перезаписываются QVD файлы)
SET vStep_Plan = 20;

// Безусловная перезагрузка данных дней назад
SET vBackUpDays = 1;

// Ф-и преобразования даты и времени
SET vDateConvert = "ConvertToLocalTime($1)";
SET vFloorDateConvert = "Date(Floor(ConvertToLocalTime($1)))";

// Множитель для образования ключа в периодах
SET MulKey = 1000000000;

// Файл со справочниками Гугл таблица
//SET vPZOrgURL = 'https://docs.google.com/spreadsheets/d/11K8M9CjC2QcPkRDdzJLeI6C9tC6SSMfV4Z71fhuzSE8/export?format=xlsx';



///$tab 1 Plan ID
// Проверка успешности загрузки данных  с прошлого раза
IF NOT IsNull(FileSize('$(DIC_QVD_PATH)ReloadPlanCreator.txt')) THEN

	ReloadPlanCreator:
	LOAD ReloadPlanFlag
	FROM $(DIC_QVD_PATH)ReloadPlanCreator.txt
	(txt, utf8, embedded labels, delimiter is '|', msq);
	
	LET vReloadPlanFlag = Peek('ReloadPlanFlag', -1, 'ReloadPlanCreator');
	
	DROP Table ReloadPlanCreator;
	
	ELSE
		SET vReloadPlanFlag = 0;
ENDIF

ReloadPlanCreator:
LOAD * Inline [
ReloadPlanFlag
0
];

STORE ReloadPlanCreator into $(DIC_QVD_PATH)ReloadPlanCreator.txt (txt);

DROP Table ReloadPlanCreator;

// Загрузка порции индентификаторов планов с момента последней метки времени

IF NOT IsNull(FileSize('$(DIC_QVD_PATH)OffsetTable_Plan.txt')) THEN
	OffsetTable_Plan:
	LOAD uri
	FROM
	$(DIC_QVD_PATH)OffsetTable_Plan.txt
	(txt, utf8, embedded labels, delimiter is ',', msq);
	
	LET vURL_PlanOrig = Peek('uri', -1, 'OffsetTable_Plan');
	
	DROP Table OffsetTable_Plan;
	
	// Сдвиг на дней назад, если прошлая перезагрузка успешная
		IF $(vReloadPlanFlag) THEN
			LET vURL_Plan = Left(vURL_PlanOrig, Index(vURL_PlanOrig, 'offset=')+6)&Date(Date#(TextBetween(vURL_PlanOrig, 'offset=', 'T'), 'YYYY-MM-DD')-vBackUpDays, 'YYYY-MM-DD')&Mid(vURL_PlanOrig, Index(vURL_PlanOrig, 'T'));
			
			ELSE
				LET vURL_Plan = vURL_PlanOrig;
		ENDIF
	
	ELSE
	
	LET vURL_Plan = vBasePlanURL&vBatchLimitPlan&vModePlan;
ENDIF

SET RowsQtyPlanHeaders = 0;


PlanHeadersAll:
LOAD * Inline [
PlanId, PlanModificateDateTime, PHUri
];

CUSTOM CONNECT TO "Provider=QvRestConnector.exe;url=$(vBasePlanURL);sendExpect100Continue=True;checkResponseTypeOnTestConnection=true;authSchema=anonymous;skipServerCertificateValidation=1;timeout=30;method=$(vMethodPlan);autoDetectResponseType=true;keyGenerationStrategy=3;useWindowsAuthentication=false;useCertificate=No;certificateStoreLocation=CurrentUser;certificateStoreName=My;PaginationType=Custom;XUserId=HWZYccD;XPassword=KKVKOCC;";

DO

	TRACE;
	TRACE $(vURL_Plan);
	
	RestConnectorMasterTable:
	SQL SELECT 
		"__KEY_root",
		(SELECT 
			"path",
			"uri",
			"offset",
			"__FK_next_page"
		FROM "next_page" FK "__FK_next_page"),
		(SELECT 
			"id",
			"dateModified",
			"__FK_data"
		FROM "data" FK "__FK_data")
	FROM JSON (wrap on) "root" PK "__KEY_root"
	WITH CONNECTION(URL "$(vURL_Plan)");
	
	
	OffsetTable_Plan:
	LOAD [path],
		 [uri],
		 [offset]
	RESIDENT RestConnectorMasterTable
	WHERE NOT IsNull([__FK_next_page]);
	
	
	PlanHeadersTmp:
	LOAD [id],
		 [dateModified]
	RESIDENT RestConnectorMasterTable
	WHERE NOT IsNull([__FK_data]);
	
	DROP TABLE RestConnectorMasterTable;
	
	LET vURL_Plan = Peek('uri', -1, 'OffsetTable_Plan');
	LET RowsQtyPlanHeaders = NoOfRows('PlanHeadersTmp');
	
	IF $(RowsQtyPlanHeaders) > 0 THEN
		Concatenate (PlanHeadersAll)
		LOAD
			[id] as PlanId,
			Timestamp($(vDateConvert(dateModified))) as PlanModificateDateTime,
			'$(vURL_Plan)' as PHUri
		Resident PlanHeadersTmp;	
	ENDIF
	
	IF $(RowsQtyPlanHeaders) <> 0 THEN
		DROP Table OffsetTable_Plan;
	ENDIF
	
	DROP Table PlanHeadersTmp;

LOOP WHILE $(RowsQtyPlanHeaders) > 0;


//Исключение записей с одинковыми идентификаторами планов
PlanHeaders:
NoConcatenate
LOAD
	PlanId,
	LastValue(PlanModificateDateTime) as PlanModificateDateTime,
	LastValue(PHUri) as PHUri
Resident PlanHeadersAll	
Group by PlanId
Order By PlanModificateDateTime;

DROP Table PlanHeadersAll;

STORE PlanHeaders into $(FILES_PATH)PlanHeaders.qvd (qvd); // For Debug

LET AllRowsQty_Plan = NoOfRows('PlanHeaders');

STORE OffsetTable_Plan INTO  $(FILES_PATH)OffsetTable_Plan.txt (txt); // For Debug
DROP Table OffsetTable_Plan;

//Если не было новых идентификаторов - выход
IF $(AllRowsQty_Plan) = 0 THEN

TRACE WARNING! No plans changed;

//// Флаг не перегружать модель
//ReloadModel:
//LOAD * Inline [
//ReloadMolelFlag
//0
//];
//
//STORE ReloadModel INTO  $(DIC_QVD_PATH)ReloadModel.txt (txt);	 
//
//CALL ADD_TENDER_RELOAD;

EXIT SCRIPT;
ENDIF;

//EXIT SCRIPT;

// Разбивка на порции для сохранения в QVD
PlanHeadersBase:
LOAD PlanId as PlanIdBase, 
     PlanModificateDateTime as PlanModificateDateTimeBase,
     PHUri as PHUriBase,
     if(IsNull(Previous(PHUri)), 1, if(Previous(PHUri)=PHUri, Peek('BatchNo_Plan', -1, 'PlanHeadersBase'),  RangeSum(Peek('BatchNo_Plan', -1, 'PlanHeadersBase'), 1) )) as BatchNo_Plan
Resident  PlanHeaders
Order by PlanModificateDateTime;    

DROP Table PlanHeaders;

BatchTable_Plan:
LOAD 	 
	 Only(BatchNo_Plan) as Batch_Plan
Resident PlanHeadersBase
Group By BatchNo_Plan
Order By BatchNo_Plan;

LET vLastBatch_Plan = Peek('Batch_Plan', -1, 'BatchTable_Plan');
LET vFirstBatch_Plan = Peek('Batch_Plan', 0, 'BatchTable_Plan');


//
FOR vBatchNo_Plan = $(vFirstBatch_Plan) to  $(vLastBatch_Plan) step vStep_Plan 
//

LET vBatchNoStep_Plan = $(vBatchNo_Plan) + vStep_Plan - 1;

TRACE BatchNo_Plan $(vBatchNo_Plan) - $(vBatchNoStep_Plan);

PlanHeaders:
NoConcatenate
LOAD PlanIdBase as PlanId, 
     PHUriBase as PHUri
Resident  PlanHeadersBase
Where BatchNo_Plan >= $(vBatchNo_Plan) AND BatchNo_Plan <= $(vBatchNoStep_Plan)
Order By BatchNo_Plan;

LET RowsQty_Plan = NoOfRows('PlanHeaders'); 
///$tab 2 PlanMasterTable

// Загрузка в общую таблицу данных по тендерам (на основании полученных идентификаторов тендеров)

CUSTOM CONNECT TO "Provider=QvRestConnector.exe;url=$(vBasePlanURL);sendExpect100Continue=True;checkResponseTypeOnTestConnection=true;authSchema=anonymous;skipServerCertificateValidation=1;timeout=300;method=$(vMethodPlan);autoDetectResponseType=true;keyGenerationStrategy=3;useWindowsAuthentication=false;useCertificate=No;certificateStoreLocation=CurrentUser;certificateStoreName=My;PaginationType=None;XUserId=YPIKAPA;XPassword=caLdScA;";

FOR Each vPlanId in FieldValueList('PlanId') 

LET vURL_Plan = vBasePlanURL&'/'&vPlanId; 
//LET vURL_Plan = 'https://public.api.openprocurement.org/api/0/plans/5c7116211de5483187b8b12e4a43be97';

RestConnectorMasterTable_Plan:
LOAD
	 *,
	 text([id]) as [idTxt],
	 text([id_u0]) as [id_u0Txt],
	 text([id_u1]) as [id_u1Txt],
	 text([id_u4]) as [id_u4Txt],
	 text([id_u5]) as [id_u5Txt]
	 ;
SQL SELECT 
	"id" AS "id_u6",
	"planID",
	"datePublished",
	"owner",
	"dateModified",
	"mode",
	"__KEY_data",
	(SELECT 
		"scheme",
		"description",
		"id",
		"__FK_classification"
	FROM "classification" FK "__FK_classification"),
	(SELECT 
		"description" AS "description_u2",
		"id" AS "id_u2",
		"quantity",
		"__KEY_items",
		"__FK_items",
		(SELECT 
			"scheme" AS "scheme_u0",
			"description" AS "description_u0",
			"id" AS "id_u0",
			"__FK_classification_u0"
		FROM "classification" FK "__FK_classification_u0"),
		(SELECT 
			"scheme" AS "scheme_u1",
			"id" AS "id_u1",
			"description" AS "description_u1",
			"__FK_additionalClassifications"
		FROM "additionalClassifications" FK "__FK_additionalClassifications"),
		(SELECT 
			"endDate",
			"__FK_deliveryDate"
		FROM "deliveryDate" FK "__FK_deliveryDate"),
		(SELECT 
			"code",
			"name",
			"__FK_unit"
		FROM "unit" FK "__FK_unit")
	FROM "items" PK "__KEY_items" FK "__FK_items"),
	(SELECT 
		"currency",
		"amount",
		"amountNet",
		"year",
		"id" AS "id_u3",
		"description" AS "description_u3",
		"notes",
		"__KEY_budget",
		"__FK_budget",
		(SELECT 
			"id" AS "id_u7",
			"name" AS "name_u1",
			"__FK_project"
		FROM "project" FK "__FK_project")
	FROM "budget" PK "__KEY_budget" FK "__FK_budget"),
	(SELECT 
		"scheme" AS "scheme_u2",
		"id" AS "id_u4",
		"description" AS "description_u4",
		"__FK_additionalClassifications_u0"
	FROM "additionalClassifications" FK "__FK_additionalClassifications_u0"),
	(SELECT 
		"name" AS "name_u0",
		"__KEY_procuringEntity",
		"__FK_procuringEntity",
		(SELECT 
			"scheme" AS "scheme_u3",
			"id" AS "id_u5",
			"legalName",
			"__FK_identifier"
		FROM "identifier" FK "__FK_identifier")
	FROM "procuringEntity" PK "__KEY_procuringEntity" FK "__FK_procuringEntity"),
	(SELECT 
		"procurementMethod",
		"procurementMethodType",
		"__KEY_tender",
		"__FK_tender",
		(SELECT 
			"startDate",
			"__FK_tenderPeriod"
		FROM "tenderPeriod" FK "__FK_tenderPeriod")
	FROM "tender" PK "__KEY_tender" FK "__FK_tender")
FROM JSON (wrap off) "data" PK "__KEY_data"
WITH CONNECTION(URL "$(vURL_Plan)");

NEXT


// Store for DeBug
//STORE RestConnectorMasterTable_Plan into $(FILES_PATH)RestConnectorMasterTable_Plan.qvd (qvd); 

///$tab 3 Plan StoreToQVD

// == Планы ==
Plan_Tmp:
LOAD	[id_u6] as [ID пункту плану],
	[planID] as [Ідентифікатор пункту плану],
	$(vFloorDateConvert([datePublished])) as [Дата публікації пункту плану],
	[owner] as [Майданчик плану],
	$(vFloorDateConvert([dateModified])) as [Дата останньої зміни пункту плану],
	if(Lower([mode])='test', 1, 0) as TestFlag,
	[__KEY_data]
RESIDENT RestConnectorMasterTable_Plan
WHERE NOT IsNull([__KEY_data]);

// Бюджет
Budget:
LOAD	[currency] as Валюта,
	[amount] as [Сума пункту плану],
	[amountNet] as [Сума пункту плану без ПДВ],
	[year] as Рік,
	[id_u3] as [Номер плану закупівлі],
	[description_u3] as [Пункт плану],
	[notes] as Примітки,
	[__KEY_budget],
	[__FK_budget] AS [__KEY_data]
RESIDENT RestConnectorMasterTable_Plan
WHERE NOT IsNull([__FK_budget]);

Left Join (Budget)
LOAD	[id_u7] as [Код проекту],
	[name_u1] as [Назва проекту],
	[__FK_project] AS [__KEY_budget]
RESIDENT RestConnectorMasterTable_Plan
WHERE NOT IsNull([__FK_project]);

Left Join (Plan_Tmp)
LOAD	Валюта,
	[Сума пункту плану],
	[Сума пункту плану без ПДВ],
	Рік,
	[Номер плану закупівлі],
	[Пункт плану],
	Примітки,
	[Код проекту],
	[Назва проекту],
	[__KEY_data]
Resident Budget;

DROP Table Budget;	

// Организатор
procuringEntity:
LOAD	[name_u0] as [Найменування організатора],
	[__KEY_procuringEntity],
	[__FK_procuringEntity] AS [__KEY_data]
RESIDENT RestConnectorMasterTable_Plan
WHERE NOT IsNull([__FK_procuringEntity]);

Left Join (procuringEntity)
LOAD	[scheme_u3] as [Код реєстру організатора],
	[id_u5Txt] as [Код організатора],
	[legalName] as [Юридична назва організатора],
	[__FK_identifier] AS [__KEY_procuringEntity]
RESIDENT RestConnectorMasterTable_Plan
WHERE NOT IsNull([__FK_identifier]);

Left Join (Plan_Tmp)
LOAD	[Найменування організатора],
	[Код реєстру організатора],
	[Код організатора],
	[Юридична назва організатора],
	[__KEY_data]
Resident procuringEntity;

DROP Table procuringEntity;

// Тип закупки
tender:
LOAD	[procurementMethod], // as [Методи процедур],
	[procurementMethodType],  // as [Процедура закупівлі],
	[__KEY_tender],
	[__FK_tender] AS [__KEY_data]
RESIDENT RestConnectorMasterTable_Plan
WHERE NOT IsNull([__FK_tender]);

Left Join (tender)
LOAD	$(vFloorDateConvert([startDate])) as [Дата планованого оголошення],
	[__FK_tenderPeriod] AS [__KEY_tender]
RESIDENT RestConnectorMasterTable_Plan
WHERE NOT IsNull([__FK_tenderPeriod]);

Left Join (Plan_Tmp)
LOAD	procurementMethod,
	procurementMethodType,
	[Дата планованого оголошення],
	[__KEY_data]
Resident tender;

DROP Table tender;	

DROP Field [__KEY_data] From Plan_Tmp;

// Проверка на полноту загруженных данных по тендерам 
IF NoOfRows('Plan_Tmp')<>$(RowsQty_Plan) THEN 
	TRACE ERROR of Load full data from web for Plans;
	EXIT Script;
ENDIF

YearList_P:
LOAD Distinct
	 Mid([Ідентифікатор пункту плану], 6, 4) as YearPeriod
Resident Plan_Tmp;	

FOR Each vPeriod in FieldValueList('YearPeriod')

	Plan_:
	NoConcatenate
	LOAD
		 *
	Resident Plan_Tmp
	Where Mid([Ідентифікатор пункту плану], 6, 4) = $(vPeriod);	 

	IF NOT IsNull(FileSize('$(TRN_QVD_PATH)Plan_$(vPeriod).qvd')) THEN
		Concatenate (Plan_)
		LOAD 
			[ID пункту плану],
			procurementMethod,
			procurementMethodType,
			Валюта,
			[Дата останньої зміни пункту плану],
			[Дата планованого оголошення],
			[Дата публікації пункту плану],
			[Ідентифікатор пункту плану],
			[Код організатора],
			[Код проекту],
			[Код реєстру організатора],
			[Майданчик плану],
			[Назва проекту],
			[Найменування організатора],
			[Номер плану закупівлі],
			Примітки,
			[Пункт плану],
			Рік,
			[Сума пункту плану],
			[Сума пункту плану без ПДВ],
			[Юридична назва організатора]
		FROM $(TRN_QVD_PATH)Plan_$(vPeriod).qvd (qvd)
		WHERE NOT EXISTS([ID пункту плану]);
	ENDIF
	
	Plan:
	LOAD 
		[ID пункту плану],
		AutoNumber([ID пункту плану], 'PlanId')+$(vPeriod)*$(MulKey) as PlanIdKey,
		procurementMethod,
		procurementMethodType,
		Валюта,
		[Дата останньої зміни пункту плану],
		[Дата планованого оголошення],
		[Дата публікації пункту плану],
		[Ідентифікатор пункту плану],
		[Код організатора],
		[Код проекту],
		[Код реєстру організатора],
		[Майданчик плану],
		[Назва проекту],
		[Найменування організатора],
		[Номер плану закупівлі],
		Примітки,
		[Пункт плану],
		Рік,
		[Сума пункту плану],
		[Сума пункту плану без ПДВ],
		[Юридична назва організатора]
	Resident Plan_
	WHERE TestFlag <> 1;
	
	DROP Table Plan_;
	
	STORE Plan into $(TRN_QVD_PATH)Plan_$(vPeriod).qvd (qvd);
	
	DROP Table Plan;
	
NEXT	

DROP Table Plan_Tmp;
	
// == CPV ==
PlanClassification_Tmp:
LOAD	[scheme] as [Тип класифікатора плану],
	[description] as [Назва коду класифікатора плану],
	[idTxt] as [Код класифікатора плану],
	[__FK_classification] AS [__KEY_data]
RESIDENT RestConnectorMasterTable_Plan
WHERE NOT IsNull([__FK_classification]);

Left Join (PlanClassification_Tmp)
LOAD
	 [__KEY_data],
	 [id_u6] as [ID пункту плану],
	 [planID] as [Ідентифікатор пункту плану],
	 if(Lower([mode])='test', 1, 0) as TestFlag
RESIDENT RestConnectorMasterTable_Plan
WHERE NOT IsNull([__KEY_data]);

DROP Field [__KEY_data] From PlanClassification_Tmp;

FOR Each vPeriod in FieldValueList('YearPeriod')

	PlanClassification_:
	NoConcatenate
	LOAD
		*,
		[ID пункту плану] as [ID пункту плану Orig]
	Resident PlanClassification_Tmp
	Where Mid([Ідентифікатор пункту плану], 6, 4) = $(vPeriod);	 
	
	DROP Field [Ідентифікатор пункту плану] From PlanClassification_;

	IF NOT IsNull(FileSize('$(TRN_QVD_PATH)PlanClassification_$(vPeriod).qvd')) THEN
		Concatenate (PlanClassification_)
		LOAD 
			[ID пункту плану Orig],
			[Код класифікатора плану],
			[Назва коду класифікатора плану],
			[Тип класифікатора плану]
		FROM $(TRN_QVD_PATH)PlanClassification_$(vPeriod).qvd (qvd)
		WHERE NOT EXISTS([ID пункту плану], [ID пункту плану Orig]);
	ENDIF
	
	PlanClassification:
	LOAD 
		[ID пункту плану Orig],
		AutoNumber([ID пункту плану Orig], 'PlanId')+$(vPeriod)*$(MulKey) as PlanIdKey,
		[Код класифікатора плану],
		[Назва коду класифікатора плану],
		[Тип класифікатора плану]
	Resident 	PlanClassification_
	WHERE TestFlag <> 1;
	
	DROP Table PlanClassification_;
	
	STORE PlanClassification into $(TRN_QVD_PATH)PlanClassification_$(vPeriod).qvd (qvd);
	
	DROP Table PlanClassification;
	
NEXT	

DROP Table PlanClassification_Tmp;

// == Доп. классификатор ==
PlanAdditionalClassifications_Tmp:
LOAD	[scheme_u2] as [Тип додаткового класифікатора плану],
	[id_u4Txt] as [Код додаткового класифікатора плану],
	[description_u4] as [Назва коду додаткового класифікатора плану],
	[__FK_additionalClassifications_u0] AS [__KEY_data]
RESIDENT RestConnectorMasterTable_Plan
WHERE NOT IsNull([__FK_additionalClassifications_u0]);

Left Join (PlanAdditionalClassifications_Tmp)
LOAD
	 [__KEY_data],
	 [id_u6] as [ID пункту плану],
	 [planID] as [Ідентифікатор пункту плану],
	 if(Lower([mode])='test', 1, 0) as TestFlag
RESIDENT RestConnectorMasterTable_Plan
WHERE NOT IsNull([__KEY_data]);

DROP Field [__KEY_data] From PlanAdditionalClassifications_Tmp;

FOR Each vPeriod in FieldValueList('YearPeriod')

	PlanAdditionalClassifications_:
	NoConcatenate
	LOAD Distinct
		*,
		[ID пункту плану] as [ID пункту плану Orig]
	Resident PlanAdditionalClassifications_Tmp
	Where Mid([Ідентифікатор пункту плану], 6, 4) = $(vPeriod);	 
	
	DROP Field [Ідентифікатор пункту плану] From PlanAdditionalClassifications_;

	IF NOT IsNull(FileSize('$(TRN_QVD_PATH)PlanAdditionalClassifications_$(vPeriod).qvd')) THEN
		Concatenate (PlanAdditionalClassifications_)
		LOAD 
			[ID пункту плану Orig],
			[Код додаткового класифікатора плану],
			[Назва коду додаткового класифікатора плану],
			[Тип додаткового класифікатора плану]
		FROM $(TRN_QVD_PATH)PlanAdditionalClassifications_$(vPeriod).qvd (qvd)
		WHERE NOT EXISTS([ID пункту плану], [ID пункту плану Orig]);
	ENDIF
	
	PlanAdditionalClassifications:
	LOAD Distinct
		[ID пункту плану Orig],
		AutoNumber([ID пункту плану Orig], 'PlanId')+$(vPeriod)*$(MulKey) as PlanIdKey,
		[Код додаткового класифікатора плану],
		[Назва коду додаткового класифікатора плану],
		[Тип додаткового класифікатора плану]
	Resident 	PlanAdditionalClassifications_
	WHERE TestFlag <> 1;
	
	DROP Table PlanAdditionalClassifications_;
	
	STORE PlanAdditionalClassifications into $(TRN_QVD_PATH)PlanAdditionalClassifications_$(vPeriod).qvd (qvd);
	
	DROP Table PlanAdditionalClassifications;

NEXT	
	
DROP Table PlanAdditionalClassifications_Tmp;	

// == Товары ==
PlanItems_Tmp:
LOAD	[description_u2] as [Назва предмета закупівлі],
	[id_u2] as [ID товару],
	[quantity] as [Кількість товарів],
	[__KEY_items],
	[__FK_items] AS [__KEY_data]
RESIDENT RestConnectorMasterTable_Plan
WHERE NOT IsNull([__FK_items]);

Left Join (PlanItems_Tmp)
LOAD	$(vFloorDateConvert([endDate])) as [Строк поставки],
	[__FK_deliveryDate] AS [__KEY_items]
RESIDENT RestConnectorMasterTable_Plan
WHERE NOT IsNull([__FK_deliveryDate]);

Left Join (PlanItems_Tmp)
LOAD	[code] as [Код одиниці виміру],
	[name] as [Назва одиниці виміру],
	[__FK_unit] AS [__KEY_items]
RESIDENT RestConnectorMasterTable_Plan
WHERE NOT IsNull([__FK_unit]);

Left Join (PlanItems_Tmp)
LOAD
	 [__KEY_data],
	 [id_u6] as [ID пункту плану],
	 [planID] as [Ідентифікатор пункту плану],
	 if(Lower([mode])='test', 1, 0) as TestFlag
RESIDENT RestConnectorMasterTable_Plan
WHERE NOT IsNull([__KEY_data]);

DROP Fields [__KEY_items], [__KEY_data] From PlanItems_Tmp;

FOR Each vPeriod in FieldValueList('YearPeriod')

	PlanItems_:
	NoConcatenate
	LOAD
		*,
		[ID пункту плану] as [ID пункту плану Orig] 
	Resident PlanItems_Tmp
	Where Mid([Ідентифікатор пункту плану], 6, 4) = $(vPeriod);	 
	
	DROP Field [Ідентифікатор пункту плану] From PlanItems_;

	IF NOT IsNull(FileSize('$(TRN_QVD_PATH)PlanItems_$(vPeriod).qvd')) THEN
		Concatenate (PlanItems_)
		LOAD 
			[ID пункту плану Orig],
			[ID товару],
			[Кількість товарів],
			[Код одиниці виміру],
			[Назва одиниці виміру],
			[Назва предмета закупівлі],
			[Строк поставки]
		FROM $(TRN_QVD_PATH)PlanItems_$(vPeriod).qvd (qvd)
		WHERE NOT EXISTS([ID пункту плану], [ID пункту плану Orig]);
	ENDIF
	
	PlanItems:
	LOAD 
		[ID пункту плану Orig],
		AutoNumber([ID пункту плану Orig], 'PlanId')+$(vPeriod)*$(MulKey) as PlanIdKey,
		[ID товару],
		AutoNumber([ID пункту плану Orig]&[ID товару], 'PlanItemId')+$(vPeriod)*$(MulKey) as PlanItemId,
		[Кількість товарів],
		[Код одиниці виміру],
		[Назва одиниці виміру],
		[Назва предмета закупівлі],
		[Строк поставки]
	Resident 	PlanItems_
	WHERE TestFlag <> 1;
	
	DROP Table PlanItems_;
	
	STORE PlanItems into $(TRN_QVD_PATH)PlanItems_$(vPeriod).qvd (qvd);
	
	DROP Table PlanItems;
	
NEXT	

DROP Table PlanItems_Tmp;

// == Классификаторы товаров ==
PlanItemClassification_Tmp:
LOAD	[scheme_u0] as [Тип класифікатора товару плану],
	[description_u0] as [Назва коду класифікатора товару плану],
	[id_u0Txt] as [Код класифікатора товару плану],
	[__FK_classification_u0] AS [__KEY_items]
RESIDENT RestConnectorMasterTable_Plan
WHERE NOT IsNull([__FK_classification_u0]);

Left Join (PlanItemClassification_Tmp)
LOAD	[id_u2] as [ID товару], 
	[__KEY_items],
	[__FK_items] AS [__KEY_data]
RESIDENT RestConnectorMasterTable_Plan
WHERE NOT IsNull([__FK_items]);

Left Join (PlanItemClassification_Tmp)
LOAD
	 [__KEY_data],
	 [id_u6] as [ID пункту плану],
	 [planID] as [Ідентифікатор пункту плану],
	 if(Lower([mode])='test', 1, 0) as TestFlag
RESIDENT RestConnectorMasterTable_Plan
WHERE NOT IsNull([__KEY_data]);

DROP Fields [__KEY_items], [__KEY_data] From PlanItemClassification_Tmp;

FOR Each vPeriod in FieldValueList('YearPeriod')

	PlanItemClassification_:
	NoConcatenate
	LOAD
		*,
		[ID пункту плану] as [ID пункту плану Orig] 
	Resident PlanItemClassification_Tmp
	Where Mid([Ідентифікатор пункту плану], 6, 4) = $(vPeriod);	 
	
	DROP Field [Ідентифікатор пункту плану] From PlanItemClassification_;

	IF NOT IsNull(FileSize('$(TRN_QVD_PATH)PlanItemClassification_$(vPeriod).qvd')) THEN
		Concatenate (PlanItemClassification_)
		LOAD 
			[ID пункту плану Orig],
			[ID товару],
			[Код класифікатора товару плану],
			[Назва коду класифікатора товару плану],
			[Тип класифікатора товару плану]
		FROM $(TRN_QVD_PATH)PlanItemClassification_$(vPeriod).qvd (qvd)
		WHERE NOT EXISTS([ID пункту плану], [ID пункту плану Orig]);
	ENDIF
	
	PlanItemClassification:
	LOAD 
		[ID пункту плану Orig],
		AutoNumber([ID пункту плану Orig], 'PlanId')+$(vPeriod)*$(MulKey) as PlanIdKey,
		[ID товару],
		AutoNumber([ID пункту плану Orig]&[ID товару], 'PlanItemId')+$(vPeriod)*$(MulKey) as PlanItemId,
		[Код класифікатора товару плану],
		[Назва коду класифікатора товару плану],
		[Тип класифікатора товару плану]
	Resident 	PlanItemClassification_
	WHERE TestFlag <> 1;
	
	DROP Table PlanItemClassification_;
	
	STORE PlanItemClassification into $(TRN_QVD_PATH)PlanItemClassification_$(vPeriod).qvd (qvd);
	
	DROP Table PlanItemClassification;

NEXT

DROP Table PlanItemClassification_Tmp;


PlanItemAdditionalClassifications_Tmp:
LOAD	[scheme_u1] as [Тип додаткового класифікатора товару плану],
	[id_u1Txt] as [Код додаткового класифікатора товару плану],
	[description_u1] as [Назва коду додаткового класифікатора товару плану],
	[__FK_additionalClassifications] AS [__KEY_items]
RESIDENT RestConnectorMasterTable_Plan
WHERE NOT IsNull([__FK_additionalClassifications]);

Left Join (PlanItemAdditionalClassifications_Tmp)
LOAD	[id_u2] as [ID товару], 
	[__KEY_items],
	[__FK_items] AS [__KEY_data]
RESIDENT RestConnectorMasterTable_Plan
WHERE NOT IsNull([__FK_items]);

Left Join (PlanItemAdditionalClassifications_Tmp)
LOAD
	 [__KEY_data],
	 [id_u6] as [ID пункту плану],
	 [planID] as [Ідентифікатор пункту плану],
	 if(Lower([mode])='test', 1, 0) as TestFlag
RESIDENT RestConnectorMasterTable_Plan
WHERE NOT IsNull([__KEY_data]);

DROP Fields [__KEY_items], [__KEY_data] From PlanItemAdditionalClassifications_Tmp;

FOR Each vPeriod in FieldValueList('YearPeriod')

	PlanItemAdditionalClassifications_:
	NoConcatenate
	LOAD Distinct
		*,
		[ID пункту плану] as [ID пункту плану Orig] 
	Resident PlanItemAdditionalClassifications_Tmp
	Where Mid([Ідентифікатор пункту плану], 6, 4) = $(vPeriod);	 
	
	DROP Field [Ідентифікатор пункту плану] From PlanItemAdditionalClassifications_;

	IF NOT IsNull(FileSize('$(TRN_QVD_PATH)PlanItemAdditionalClassifications_$(vPeriod).qvd')) THEN
		Concatenate (PlanItemAdditionalClassifications_)
		LOAD 
			[ID пункту плану Orig],
			[ID товару],
			[Код додаткового класифікатора товару плану],
			[Назва коду додаткового класифікатора товару плану],
			[Тип додаткового класифікатора товару плану]
		FROM $(TRN_QVD_PATH)PlanItemAdditionalClassifications_$(vPeriod).qvd (qvd)
		WHERE NOT EXISTS([ID пункту плану], [ID пункту плану Orig]);
	ENDIF
	
	PlanItemAdditionalClassifications:
	LOAD Distinct
		[ID пункту плану Orig],
		AutoNumber([ID пункту плану Orig], 'PlanId')+$(vPeriod)*$(MulKey) as PlanIdKey,
		[ID товару],
		AutoNumber([ID пункту плану Orig]&[ID товару], 'PlanItemId')+$(vPeriod)*$(MulKey) as PlanItemId,
		[Код додаткового класифікатора товару плану],
		[Назва коду додаткового класифікатора товару плану],
		[Тип додаткового класифікатора товару плану]
	Resident 	PlanItemAdditionalClassifications_
	WHERE TestFlag <> 1;
	
	DROP Table PlanItemAdditionalClassifications_;
	
	STORE PlanItemAdditionalClassifications into $(TRN_QVD_PATH)PlanItemAdditionalClassifications_$(vPeriod).qvd (qvd);
	
	DROP Table PlanItemAdditionalClassifications;
	
NEXT	

DROP Table PlanItemAdditionalClassifications_Tmp;
///$tab 4 Offset Clean

DROP TABLE RestConnectorMasterTable_Plan;
	
// Если обновление данных без ошибок - сохранить новый Offset,
// иначе при следующей перезагрузке обновлять данные со старого Offseta

OffsetTable_Plan:
LOAD Distinct
	 LastValue(PHUri) as uri
Resident PlanHeaders;	 

STORE OffsetTable_Plan INTO  $(DIC_QVD_PATH)OffsetTable_Plan.txt (txt); 
DROP Table OffsetTable_Plan;

DROP Table PlanHeaders;

DROP Table YearList_P;

//
NEXT vBatchNo_Plan;
//

DROP Table BatchTable_Plan;

// Сохранение флага успешности текущей перезагрузки
ReloadPlanCreator:
LOAD * Inline [
ReloadPlanFlag
1
];

STORE ReloadPlanCreator into $(DIC_QVD_PATH)ReloadPlanCreator.txt (txt);

DROP Table ReloadPlanCreator;
///$tab Exit Script

//DROP TABLE RestConnectorMasterTable; 
Exit Script;
