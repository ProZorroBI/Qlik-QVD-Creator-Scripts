///$tab Main
//V1.0
SET ThousandSep=' ';
SET DecimalSep=',';
SET MoneyThousandSep=' ';
SET MoneyDecimalSep=',';
SET MoneyFormat='# ##0,00 ₴;-# ##0,00 ₴';
SET TimeFormat='h:mm:ss';
SET DateFormat='DD.MM.YYYY';
SET TimestampFormat='DD.MM.YYYY h:mm:ss[.fff]';
SET MonthNames='янв;фев;мар;апр;май;июн;июл;авг;сен;окт;ноя;дек';
SET DayNames='Пн;Вт;Ср;Чт;Пт;Сб;Вс';

LET vStartPeriod = MakeDate(2015, 2, 1);
LET vEndPeriod = Today(1) + 6; // Курсы валют выставляются на будущую дату следующего или послепраздничного дня

LET vCurrentDate = Today(1);

SET DIC_QVD_PATH = '..\04_DataBase\02_QVD_DB\01_Dictionary\';
SET TRN_QVD_PATH = '..\04_DataBase\02_QVD_DB\02_Transaction\';
SET FILES_PATH = '..\04_DataBase\01_DataFiles\';

SET R_FILES_PATH = 'C:/QlikView/04_DataBase/01_DataFiles';

SET vBatchLimit = '?limit=1000';
SET vBatchLimit_C = '?limit=1000';
SET vMode = '&mode=_all_';
SET vMethod = 'get';

SET vBaseURL = 'https://public.api.openprocurement.org/api/0/tenders'; // Live 
SET vBaseURL_C = 'https://public.api.openprocurement.org/api/0/contracts'; 


SET vDateConvert = "ConvertToLocalTime($1)";

SET vELetters = '!"#$%&''()*+,-./:;<=>?@[\]^_`{|}~–';
SET vPLetters = '0123456789qwertyuiopasdfghjklzxcvbnmйцукенгшщзхїфівапролджєячсмитьбюъыэ ';

// Вынесено отдельно через проблему загрузки на сервере функции из макроса. Отключение бнф функции помогает, но такая возможность отключена в новых релизах, а проблемы не пофиксина!!!
///$tab 1 Procedures
// =========================================================




// Процедура перевода (переводимое поле, таблица, переведенное поле)
SUB TRANSLATE(FieldName_, TableName_, outputFieldName_)

IF FileSize('$(FILES_PATH)SymbolCount.txt') > 0 THEN 

SymbolCount:
LOAD SymbolCount
FROM $(FILES_PATH)SymbolCount.txt
(txt, utf8, embedded labels, delimiter is '\t', msq);

LET vSymbolCount = Peek('SymbolCount', -1, 'SymbolCount');	 

DROP Table SymbolCount; 

ENDIF;

LET vTableRows = NoOfRows('$(TableName_)');

CUSTOM CONNECT TO "Provider=QvRestConnector.exe;url=https://api.microsofttranslator.com/V2/Http.svc/Translate;sendExpect100Continue=True;checkResponseTypeOnTestConnection=true;authSchema=anonymous;skipServerCertificateValidation=1;timeout=300;method=GET;autoDetectResponseType=true;keyGenerationStrategy=3;useWindowsAuthentication=false;useCertificate=No;certificateStoreLocation=CurrentUser;certificateStoreName=My;PaginationType=None;XUserId=***;XPassword=***;";

FOR i=0 to $(vTableRows)-1

IF Now(1) - ALT(NUM('$(vTokenTime)'), 0) > vTokenTTL THEN
CALL GETToken;
CUSTOM CONNECT TO "Provider=QvRestConnector.exe;url=https://api.microsofttranslator.com/V2/Http.svc/Translate;sendExpect100Continue=True;checkResponseTypeOnTestConnection=true;authSchema=anonymous;skipServerCertificateValidation=1;timeout=300;method=GET;autoDetectResponseType=true;keyGenerationStrategy=3;useWindowsAuthentication=false;useCertificate=No;certificateStoreLocation=CurrentUser;certificateStoreName=My;PaginationType=None;XUserId=***;XPassword=***;";
ENDIF;

LET vStr2Transl= Replace(Peek('$(FieldName_)',$(i), '$(TableName_)'), '"', '""');	//значения строки для перевода
LET vStr = Peek('$(FieldName_)',$(i), '$(TableName_)');	                //оригинальные значения поля (до replace)
LET vStringLenth = Len('$(vStr2Transl)');				//коичество символов в строке

LET vSymbolCount = $(vSymbolCount) + $(vStringLenth);

SymbolCount:
LOAD
	$(vSymbolCount) as SymbolCount
AutoGenerate 1;

STORE SymbolCount into $(FILES_PATH)SymbolCount.txt (txt); 
DROP Table SymbolCount; 

RestConnectorMasterTable:
SQL SELECT 
	"attr:xmlns" AS "xmlns",
	"@Content"
FROM XML "string" ContentFieldAlias "@Content"
WITH CONNECTION (
QUERY "text" "$(vStr2Transl)",
QUERY "from" "uk",
QUERY "to" "en",
QUERY "appid" "$(vToken)"
);

Text:
LOAD
	  [@Content] as Translation,
	  '$(vStr)' as FieldName
RESIDENT RestConnectorMasterTable;

DROP Table RestConnectorMasterTable;

NEXT i;

Left Join ($(TableName_))
LOAD 
	 FieldName as $(FieldName_),
	 Translation as $(outputFieldName_)
Resident Text;

DROP Table Text;

ENDSUB;


///$tab 2 Start Control

IF FileSize('$(DIC_QVD_PATH)StartControl.txt') > 0 THEN

	StartControl:
	LOAD StartControl
	FROM
	$(DIC_QVD_PATH)StartControl.txt
	(txt, utf8, embedded labels, delimiter is ',', msq);
	
	LET vStartControl = Peek('StartControl', -1, 'StartControl');
	
	IF $(vStartControl) = 1 THEN
	
		TRACE WARNING!!! Data Model is reloading now!;
		
		EXIT SCRIPT;
	
	ENDIF

ENDIF

///$tab 3 Tender Data Translate

// Причини дискваліфікації
// ТЗ https://docs.google.com/document/d/1JiE5z6fCex0x34EdB35n4UGsugHvCJ7svJBys6IGMVk
RegExpDisqualTemplate:
LOAD RegExp, 
     DisqualGrpResID, 
     DisqualResID
FROM $(DIC_QVD_PATH)RegExpDisqualTemplate.qvd (qvd);

MaxDisqualGrpRes:
LOAD
	 Max(DisqualGrpResID) as MaxDisqualGrpResID
Resident RegExpDisqualTemplate;	 

LET vMaxDisqualGrpResID = Peek('MaxDisqualGrpResID', -1, 'MaxDisqualGrpRes');

DROP Table MaxDisqualGrpRes;

// Для подмены на одинаковые ид причины
DisqualMap:
Mapping
LOAD
	 DisqualResID, 
	 DisqualGrpResID
Resident RegExpDisqualTemplate;	 

// Рег. выражения
RegExp:
LOAD 
	 PurgeChar(RegExp, '"') as RegExp
Resident RegExpDisqualTemplate
Where NOT IsNull(RegExp); 

DROP Table RegExpDisqualTemplate;
		
LET vRENumberOfRows = NoOfRows('RegExp');

SET vDisqualAwardFieldName = 'AwardDescr_';
SET vDisqualQualifFieldName = 'QualificationDescr_';

SET vResAwardFields = '';
SET vResQualifFields = '';

SET vGRPDisqlFieldList = '';

FOR i = 0 to vRENumberOfRows - 1

	LET vDisqlRegExpCheck$(i) = Peek('RegExp', i, 'RegExp');
		
//	LET vResAwardFields = vResAwardFields&if(i<>0,', ') & 'ApplyMap(''DisqualMap'', if(R.ScriptEvalStr(''as.character(grepl('&vDisqlRegExpCheck$(i)&', q$$(vDisqualAwardFieldName)));'', $(vDisqualAwardFieldName) )=''TRUE'', $(i)) ) as Grp$(i)';
	LET vResAwardFields = vResAwardFields&if(i<>0,', ') & 'ApplyMap(''DisqualMap'', if( RegExTest($(vDisqualAwardFieldName), '''&vDisqlRegExpCheck$(i)&''', ''FALSE'')=-1, $(i) ) ) as Grp$(i)';
	LET vResQualifFields = vResQualifFields&if(i<>0,', ') & 'ApplyMap(''DisqualMap'', if( RegExTest($(vDisqualQualifFieldName), '''&vDisqlRegExpCheck$(i)&''', ''FALSE'')=-1, $(i) ) ) as Grp$(i)';
	LET vGRPDisqlFieldList = vGRPDisqlFieldList&if(i<>0,', ')&'Grp'&$(i);

NEXT

DROP Table RegExp;	

// Список периодов измененных тендеров
YearList:
LOAD YearPeriod
FROM $(FILES_PATH)YearList.txt
(txt, utf8, embedded labels, delimiter is '\t', msq);

// Безусловный период лет от начала до текущего года
//YearList:
//LOAD
//	 Year($(#vStartPeriod)) + RowNo() - 1 as YearPeriod
//AutoGenerate Year($(#vCurrentDate)) - Year($(#vStartPeriod)) + 1;

FOR Each vPeriod in FieldValueList('YearPeriod')

	IF NOT IsNull(FileSize('$(TRN_QVD_PATH)Award_$(vPeriod).qvd')) THEN
		Award:
		LOAD 
			 *
		FROM $(TRN_QVD_PATH)Award_$(vPeriod).qvd (qvd);
		
		RENAME Field DisqualGrpResID to  _DisqualGrpResID;
		
		AwardNullDescr:
		LOAD
			 IDAward
		Resident Award	 
		Where СтатусПротоколаОценки = 'unsuccessful' AND IsNull(_DisqualGrpResID) AND
		( (Len(ОписаниеПротоколаОценки) < 2 OR IsNull(ОписаниеПротоколаОценки)) AND (Len(ПротоколОценки) < 2 AND IsNull(ПротоколОценки)) );
		
		LET vAwardNullRows = NoOfRows('AwardNullDescr');
		
		DROP Table  AwardNullDescr;
		
		AwardDescr:
		LOAD
			 IDAward,
			 Replace(Replace(Replace(Replace(Replace(KeepChar(Trim(Lower(ОписаниеПротоколаОценки&' '&ПротоколОценки)), '$(vPLetters)'), chr(10), ' '), chr(13), ' '), ' ', '<>'), '><', ''), '<>', ' ') as AwardDescr_
		Resident Award
		Where СтатусПротоколаОценки = 'unsuccessful' AND IsNull(_DisqualGrpResID) AND
		( (Len(ОписаниеПротоколаОценки) > 1 AND NOT IsNull(ОписаниеПротоколаОценки)) OR (Len(ПротоколОценки) > 1 AND NOT IsNull(ПротоколОценки)) );	 
		
		LET vAwardRows = NoOfRows('AwardDescr');
		
		IF $(vAwardRows) > 0 THEN
		
			// Обработка регулярных выражений
			AwardRegExp:
			LOAD 
				 IDAward,
				 $(vResAwardFields)
			Resident AwardDescr;
			
			DROP Field $(vDisqualAwardFieldName);
			
			AwardUnCross:
			CrossTable(Grp, DisqualRes)
			LOAD
				 IDAward,
				 $(vGRPDisqlFieldList)
			Resident AwardRegExp;	 
			
			DROP Table AwardRegExp;
			
			Left Join (AwardDescr)
			LOAD
				 IDAward,
				 Concat(DISTINCT DisqualRes, ',') as DisqualResGrp
			Resident AwardUnCross
			Group By IDAward;	
			
			DROP Table  AwardUnCross;
			
			Left Join (Award)
			LOAD
				 IDAward,
				 if(IsNull(DisqualResGrp), $(vMaxDisqualGrpResID)-1, DisqualResGrp) as DisqualGrpResID_
			Resident AwardDescr;
			
			ELSEIF $(vAwardNullRows) > 0 THEN // Для возможности отработки следующего условия
			
				Left Join (Award)
				LOAD
					 IDAward,
					 Null() as DisqualGrpResID_
				Resident Award;	 
		
		ENDIF
			
		IF $(vAwardNullRows) > 0 OR $(vAwardRows) > 0 THEN
		
			Left Join (Award)
			LOAD
				 IDAward,
				 if(NOT IsNull(DisqualGrpResID_), DisqualGrpResID_, 
				 	if(СтатусПротоколаОценки = 'unsuccessful' AND (IsNull(ОписаниеПротоколаОценки) OR Len(ОписаниеПротоколаОценки) < 2) AND (IsNull(ПротоколОценки) OR Len(ПротоколОценки) < 2), $(vMaxDisqualGrpResID), _DisqualGrpResID)       
				 	) as DisqualGrpResID
			Resident Award;	 
			
			DROP Fields _DisqualGrpResID, DisqualGrpResID_;
			
			STORE Award into [$(TRN_QVD_PATH)Award_$(vPeriod).qvd] (qvd);
			
		ENDIF	
				
		DROP Tables Award, AwardDescr;
		
	ENDIF
	
	IF NOT IsNull(FileSize('$(TRN_QVD_PATH)Qualification_$(vPeriod).qvd')) THEN
		Qualification:
		LOAD 
			 *
		FROM [$(TRN_QVD_PATH)Qualification_$(vPeriod).qvd] (qvd);
		
		RENAME Field DisqualGrpResID to  _DisqualGrpResID;
		
		QualNullDescr:
		LOAD
			 IDQualification
		Resident Qualification	 
		Where СтатусКвалификации = 'unsuccessful' AND IsNull(_DisqualGrpResID) AND
		( (Len(ОписаниеКвалификации) < 2 OR IsNull(ОписаниеКвалификации)) AND (Len(Квалификация) < 2 AND IsNull(Квалификация)) );
		
		LET vQualNullRows = NoOfRows('QualNullDescr');
		
		DROP Table  QualNullDescr;
		
		QualDescr:
		LOAD
			 IDQualification,
			 Replace(Replace(Replace(Replace(Replace(KeepChar(Trim(Lower(ОписаниеКвалификации&' '&Квалификация)), '$(vPLetters)'), chr(10), ' '), chr(13), ' '), ' ', '<>'), '><', ''), '<>', ' ') as QualificationDescr_
		Resident Qualification
		Where СтатусКвалификации = 'unsuccessful' AND IsNull(_DisqualGrpResID) AND
		( (Len(ОписаниеКвалификации) > 1 AND NOT IsNull(ОписаниеКвалификации)) OR (Len(Квалификация) > 1 AND NOT IsNull(Квалификация)) );	 
		
		LET vQualificationRows = NoOfRows('QualDescr');
		
		IF $(vQualificationRows) > 0 THEN
			
			// Обработка регулярных выражений
			QualRegExp:
			LOAD 
				 IDQualification,
				 $(vResQualifFields)
			Resident QualDescr;
			
			DROP Field $(vDisqualQualifFieldName);
			
			QualUnCross:
			CrossTable(Grp, DisqualRes)
			LOAD
				 IDQualification,
				 $(vGRPDisqlFieldList)
			Resident QualRegExp;	 
			
			DROP Table QualRegExp;
			
			Left Join (QualDescr)
			LOAD
				 IDQualification,
				 Concat(DISTINCT DisqualRes, ',') as DisqualResGrp
			Resident QualUnCross
			Group By IDQualification;	
			
			DROP Table  QualUnCross;
			
			Left Join (Qualification)
			LOAD
				 IDQualification,
				 if(IsNull(DisqualResGrp), $(vMaxDisqualGrpResID)-1, DisqualResGrp) as DisqualGrpResID_
			Resident QualDescr;
			
			ELSEIF $(vQualNullRows) > 0 THEN // Для возможности отработки следующего условия
			
				Left Join (Qualification)
				LOAD
					 IDQualification,
					 Null() as DisqualGrpResID_
				Resident Qualification;
		ENDIF		
		
		IF $(vQualNullRows) > 0 OR $(vQualificationRows) > 0 THEN
			
			Left Join (Qualification)
			LOAD
				 IDQualification,
				 if(NOT IsNull(DisqualGrpResID_), DisqualGrpResID_, 
				 	if(СтатусКвалификации = 'unsuccessful' AND (IsNull(ОписаниеКвалификации) OR Len(ОписаниеКвалификации) < 2) AND (IsNull(Квалификация) OR Len(Квалификация) < 2), $(vMaxDisqualGrpResID), _DisqualGrpResID)       
				 	) as DisqualGrpResID
			Resident Qualification;	 
			
			DROP Fields _DisqualGrpResID, DisqualGrpResID_;
			
			STORE Qualification into [$(TRN_QVD_PATH)Qualification_$(vPeriod).qvd] (qvd); 
				
		ENDIF
		
		DROP Tables Qualification, QualDescr;
		
	ENDIF

NEXT

DROP Table YearList;

// Обработка ргулярных выражений причин разрыва договора
// ТЗ https://docs.google.com/document/d/12rJ_7375LEI1xKVzC5uWGwUEpz88H_7wo5WEKfr1VPM

YearList_C: 
LOAD YearPeriod 
FROM $(FILES_PATH)YearList_C.txt
(txt, utf8, embedded labels, delimiter is '\t', msq);

//LOAD * Inline [
//YearPeriod
//2015
//2016
//2017
//2018
//2019
//];

RegExpTemplate:
LOAD RegExp, 
     [Negative keywords], 
     [Причина розірвання договору] as [Причина розірвання договору_], 
     [Причина разрыва договора] as [Причина разрыва договора_], 
     [Cause of contract termination] as [Cause of contract termination_], 
     [Ініціатор розірвання договору], 
 	 Initiator,
     TermDetGroupID
FROM $(DIC_QVD_PATH)RegExpBreakContractTemplate.qvd (qvd);

RegExp:
LOAD 
	 PurgeChar(RegExp, '"') as RegExp, 
     PurgeChar([Negative keywords], '"') as [Negative keywords]
Resident RegExpTemplate
Where NOT IsNull(RegExp);    

SET vTermFieldName = 'terminationDetails_';

LET vRENumberOfRows = NoOfRows('RegExp');

SET vResFields = '';

SET vEndFields = '';

SET vGRPFieldList = '';

FOR i = 0 to vRENumberOfRows - 1

	LET vRegExpIncl$(i) = Peek('RegExp', i, 'RegExp');
	LET vRegExpExcl$(i) = Peek('Negative keywords', i, 'RegExp');
	
	LET vResFields = vResFields&if(i<>0,', ') & 'if( RegExTest($(vTermFieldName), '''&vRegExpIncl$(i)&''', ''FALSE'')=-1 AND NOT RegExTest($(vTermFieldName), '''&vRegExpExcl$(i)&''', ''FALSE'')=-1, ''TRUE'' ) as Grp$(i)';
	
	LET vEndFields = vEndFields&if(i<>0,', ')&'if(Grp'&$(i)&'=''TRUE'','&$(i);
	
	LET vGRPFieldList = vGRPFieldList&if(i<>0,', ')&'Grp'&$(i);

NEXT

LET vEndFieldsPart2 = ', '&$(vRENumberOfRows)&Repeat(')', vRENumberOfRows);
SET vEndFields = $(vEndFields)$(vEndFieldsPart2);

DROP Tables RegExp;	

FOR Each vPeriod in FieldValueList('YearPeriod')

	IF NOT IsNull(FileSize('$(TRN_QVD_PATH)Contract_C_$(vPeriod).qvd')) THEN
		Contract_C_:
		LOAD 
			 *
		FROM $(TRN_QVD_PATH)Contract_C_$(vPeriod).qvd (qvd);
		
		RENAME Fields [Причина розірвання договору] to [_Причина розірвання договору], [Причина разрыва договора] to [_Причина разрыва договора], [Cause of contract termination] to [_Cause of contract termination];
		
		ContractTmp:
		LOAD 
			 IDContract,
			 PurgeChar(Trim(Lower(terminationDetails)), '$(vELetters)') as terminationDetails_
		Resident Contract_C_
		Where Len(terminationDetails) > 1
		AND IsNull([_Причина розірвання договору]);
		
		LET vContractRows = NoOfRows('ContractTmp');
		
		IF $(vContractRows) > 0 THEN
		
			ContractRegExp:
			LOAD 
				 IDContract
				 ,$(vResFields)
			Resident ContractTmp;
			// Проверка по условию принадлежности к группе
			ContractRes:
			LOAD
				 IDContract,
				 $(vEndFields) as TermDetGroupID
			Resident ContractRegExp;
			
			DROP Table ContractRegExp;
			
			Left Join (ContractRes)
			Load
				 [Причина розірвання договору_], 
			     [Причина разрыва договора_], 
			     [Cause of contract termination_],
			     TermDetGroupID
			Resident RegExpTemplate;   
			
			Left Join (Contract_C_)
			LOAD
				 IDContract,
				 [Причина розірвання договору_], 
			     [Причина разрыва договора_], 
			     [Cause of contract termination_]
			Resident ContractRes;
			
			DROP Table ContractRes;	 
			
			Contract_C:
			LOAD 
				 *, 
			     if(NOT IsNull([_Причина розірвання договору]), [_Причина розірвання договору], [Причина розірвання договору_]) as [Причина розірвання договору], 
			     if(NOT IsNull([_Причина разрыва договора]), [_Причина разрыва договора], [Причина разрыва договора_]) as [Причина разрыва договора], 
			     if(NOT IsNull([_Cause of contract termination]), [_Cause of contract termination], [Cause of contract termination_]) as [Cause of contract termination]
		     Resident Contract_C_;
		     
		     DROP Fields [_Причина розірвання договору], [Причина розірвання договору_], [_Причина разрыва договора], [Причина разрыва договора_], 
		     [_Cause of contract termination], [Cause of contract termination_], [Ініціатор розірвання договору], Initiator From Contract_C;
		     
		     Left Join (Contract_C)
		     Load 
		     	 [Причина розірвання договору_] as [Причина розірвання договору],
		     	 LastValue([Ініціатор розірвання договору]) as [Ініціатор розірвання договору], 
	     	 	 LastValue(Initiator) as Initiator
	     	 Resident RegExpTemplate
	     	 Group By [Причина розірвання договору_]
	     	 Order By TermDetGroupID;	 
		     
 		     STORE Contract_C into $(TRN_QVD_PATH)Contract_C_$(vPeriod).qvd (qvd);
		     DROP Table Contract_C;
		
		ENDIF
		
		DROP Tables Contract_C_, ContractTmp;
	
	ENDIF

NEXT

DROP Tables YearList_C, RegExpTemplate;

///$tab 4 Reload Model Flag
// Флаг перегружать модель
ReloadModel:
LOAD * Inline [
ReloadModelFlag
1
];

STORE ReloadModel INTO  $(DIC_QVD_PATH)ReloadModel.txt (txt);

///$tab Exit Script

//DROP TABLE RestConnectorMasterTable; 
Exit Script;


/*
VBA Script
Function RegExTest(iString, Pattern, IgnoreCase)

set RE = New RegExp
RE.Pattern = Pattern
RE.IgnoreCase = IgnoreCase
RegExTest = RE.Test(iString)

End Function
*/