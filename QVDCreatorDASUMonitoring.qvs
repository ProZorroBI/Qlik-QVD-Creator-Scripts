///$tab Main
//V0.1
//ТЗ https://docs.google.com/document/d/1dEu0ZFshCNRw-L7g5kx_EhtMXV_TtqIaDTKQG5uR0es
SET ThousandSep=' ';
SET DecimalSep=',';
SET MoneyThousandSep=' ';
SET MoneyDecimalSep=',';
SET MoneyFormat='# ##0,00 ₴;-# ##0,00 ₴';
SET TimeFormat='h:mm:ss';
SET DateFormat='DD.MM.YYYY';
SET TimestampFormat='DD.MM.YYYY h:mm:ss[.fff]';
SET MonthNames='янв;фев;мар;апр;май;июн;июл;авг;сен;окт;ноя;дек';
SET DayNames='Пн;Вт;Ср;Чт;Пт;Сб;Вс';


LET vCurrentDate = Today(1);

SET DIC_QVD_PATH = '..\04_DataBase\02_QVD_DB\01_Dictionary\';
SET TRN_QVD_PATH = '..\04_DataBase\02_QVD_DB\02_Transaction\';
SET FILES_PATH = '..\04_DataBase\01_DataFiles\';

SET vBatchLimitMon = '?limit=1000';
SET vModeMon = '&mode=_all_';
SET vMethodMon = 'get';

SET vBaseMonURL = 'https://audit-api.prozorro.gov.ua/api/0/monitorings'; // Live 

// Шаг  изменения пачек планов (чем больше число, тем реже перезаписываются QVD файлы)
SET vStep_Mon = 20;

// Безусловная перезагрузка данных дней назад
SET vBackUpDays = 1;

// Множитель для образования ключа в периодах
SET MulKey = 1000000000;

// Ф-и преобразования даты и времени
SET vDateConvert = "TimeStamp(ConvertToLocalTime($1))";
SET vFloorDateConvert = "Date(Floor(ConvertToLocalTime($1)))";

BoolMap:
Mapping
LOAD * Inline [
BoolVal, DigVal
true, 	 1
false,	 0
];
///$tab 1 Mon ID
// Проверка успешности загрузки данных  с прошлого раза
IF NOT IsNull(FileSize('$(DIC_QVD_PATH)ReloadMonCreator.txt')) THEN

	ReloadMonCreator:
	LOAD ReloadMonFlag
	FROM $(DIC_QVD_PATH)ReloadMonCreator.txt
	(txt, utf8, embedded labels, delimiter is '|', msq);
	
	LET vReloadMonFlag = Peek('ReloadMonFlag', -1, 'ReloadMonCreator');
	
	DROP Table ReloadMonCreator;
	
	ELSE
		SET vReloadMonFlag = 0;
ENDIF

// Загрузка порции индентификаторов мониторинглв с момента последней метки времени

IF NOT IsNull(FileSize('$(DIC_QVD_PATH)OffsetTable_Mon.txt')) THEN
	OffsetTable_Mon:
	LOAD uri
	FROM
	$(DIC_QVD_PATH)OffsetTable_Mon.txt
	(txt, utf8, embedded labels, delimiter is ',', msq);
	
	LET vURL_MonOrig = Peek('uri', -1, 'OffsetTable_Mon');
	
	DROP Table OffsetTable_Mon;
	
	// Сдвиг на $(vBackUpDays) дней назад, если прошлая перезагрузка успешная
		IF $(vReloadMonFlag) THEN
			LET vURL_Mon = Left(vURL_MonOrig, Index(vURL_MonOrig, 'offset=')+6)&Date(Date#(TextBetween(vURL_MonOrig, 'offset=', 'T'), 'YYYY-MM-DD')-vBackUpDays, 'YYYY-MM-DD')&Mid(vURL_MonOrig, Index(vURL_MonOrig, 'T'));
			
			ELSE
				LET vURL_Mon = vURL_MonOrig;
		ENDIF
	
	ELSE
	
	LET vURL_Mon = vBaseMonURL&vBatchLimitMon&vModeMon;
ENDIF

SET RowsQtyMonHeaders = 0;


MonHeadersAll:
LOAD * Inline [
MonId, MonModificateDateTime, MHUri
];

CUSTOM CONNECT TO "Provider=QvRestConnector.exe;url=$(vBaseMonURL);sendExpect100Continue=True;checkResponseTypeOnTestConnection=true;authSchema=anonymous;skipServerCertificateValidation=1;timeout=300;method=$(vMethodMon);autoDetectResponseType=true;keyGenerationStrategy=3;useWindowsAuthentication=false;useCertificate=No;certificateStoreLocation=CurrentUser;certificateStoreName=My;PaginationType=Custom;XUserId=HWZYccD;XPassword=KKVKOCC;";

DO

	TRACE;
	TRACE $(vURL_Mon);
	
	RestConnectorMasterTable:
	SQL SELECT 
		"__KEY_root",
		(SELECT 
			"path",
			"uri",
			"offset",
			"__FK_next_page"
		FROM "next_page" FK "__FK_next_page"),
		(SELECT 
			"id",
			"dateModified",
			"__FK_data"
		FROM "data" FK "__FK_data")
	FROM JSON (wrap on) "root" PK "__KEY_root"
	WITH CONNECTION(URL "$(vURL_Mon)");
	
	
	OffsetTable_Mon:
	LOAD [path],
		 [uri],
		 [offset]
	RESIDENT RestConnectorMasterTable
	WHERE NOT IsNull([__FK_next_page]);
	
	
	MonHeadersTmp:
	LOAD [id],
		 [dateModified]
	RESIDENT RestConnectorMasterTable
	WHERE NOT IsNull([__FK_data]);
	
	DROP TABLE RestConnectorMasterTable;
	
	LET vURL_Mon = Peek('uri', -1, 'OffsetTable_Mon');
	LET RowsQtyMonHeaders = NoOfRows('MonHeadersTmp');
	
	IF $(RowsQtyMonHeaders) > 0 THEN
		Concatenate (MonHeadersAll)
		LOAD
			[id] as MonId,
			Timestamp($(vDateConvert(dateModified))) as MonModificateDateTime,
			'$(vURL_Mon)' as MHUri
		Resident MonHeadersTmp;	
	ENDIF;
	
	IF $(RowsQtyMonHeaders) <> 0 THEN
		DROP Table OffsetTable_Mon;
	ENDIF;
	
	DROP Table MonHeadersTmp;

LOOP WHILE $(RowsQtyMonHeaders) > 0;


//Исключение записей с одинковыми идентификаторами
MonHeaders:
NoConcatenate
LOAD
	MonId,
	LastValue(MonModificateDateTime) as MonModificateDateTime,
	LastValue(MHUri) as MHUri
Resident MonHeadersAll	
Group by MonId
Order By MonModificateDateTime;

DROP Table MonHeadersAll;

STORE MonHeaders into $(FILES_PATH)MonHeaders.qvd (qvd); // For Debug

LET AllRowsQty_Mon = NoOfRows('MonHeaders');

STORE OffsetTable_Mon INTO  $(FILES_PATH)OffsetTable_Mon.txt (txt); // For Debug
DROP Table OffsetTable_Mon;

//Если не было новых идентификаторов - выход
IF $(AllRowsQty_Mon) = 0 THEN
	TRACE WARNING! No Mons changed;
	
	EXIT SCRIPT;
ENDIF

//EXIT SCRIPT;

// Разбивка на порции для сохранения в QVD
MonHeadersBase:
LOAD MonId as MonIdBase, 
     MonModificateDateTime as MonModificateDateTimeBase,
     MHUri as MHUriBase,
     if(IsNull(Previous(MHUri)), 1, if(Previous(MHUri)=MHUri, Peek('BatchNo_Mon', -1, 'MonHeadersBase'),  RangeSum(Peek('BatchNo_Mon', -1, 'MonHeadersBase'), 1) )) as BatchNo_Mon
Resident  MonHeaders
Order by MonModificateDateTime;    

DROP Table MonHeaders;

BatchTable_Mon:
LOAD 	 
	 Only(BatchNo_Mon) as Batch_Mon
Resident MonHeadersBase
Group By BatchNo_Mon
Order By BatchNo_Mon;

LET vLastBatch_Mon = Peek('Batch_Mon', -1, 'BatchTable_Mon');
LET vFirstBatch_Mon = Peek('Batch_Mon', 0, 'BatchTable_Mon');


//
FOR vBatchNo_Mon = $(vFirstBatch_Mon) to  $(vLastBatch_Mon) step vStep_Mon 
//

LET vBatchNoStep_Mon = $(vBatchNo_Mon) + vStep_Mon - 1;

TRACE BatchNo_Mon $(vBatchNo_Mon) - $(vBatchNoStep_Mon);

MonHeaders:
NoConcatenate
LOAD MonIdBase as MonId, 
     MHUriBase as MHUri
Resident  MonHeadersBase
Where BatchNo_Mon >= $(vBatchNo_Mon) AND BatchNo_Mon <= $(vBatchNoStep_Mon)
Order By BatchNo_Mon;

LET RowsQty_Mon = NoOfRows('MonHeaders'); 
///$tab 2 MonMasterTable
// Загрузка в общую таблицу данных по тендерам (на основании полученных идентификаторов тендеров)

CUSTOM CONNECT TO "Provider=QvRestConnector.exe;url=$(vBaseMonURL);sendExpect100Continue=True;checkResponseTypeOnTestConnection=true;authSchema=anonymous;skipServerCertificateValidation=1;timeout=300;method=$(vMethodMon);autoDetectResponseType=true;keyGenerationStrategy=3;useWindowsAuthentication=false;useCertificate=No;certificateStoreLocation=CurrentUser;certificateStoreName=My;PaginationType=None;XUserId=***;XPassword=***;";

FOR Each vMonId in FieldValueList('MonId') 

	LET vURL_Mon = vBaseMonURL&'/'&vMonId; 
	
	RestConnectorMasterTable:
	LOAD
		 *,
		 Text([id_u6]) as [id_u6Txt]
	;
	SQL SELECT 
		"status",
		"endDate" AS "endDate_u1",
		"monitoring_id",
		"tender_id",
		"id" AS "id_u8",
		"tender_owner",
		"dateCreated" AS "dateCreated_u4",
		"dateModified" AS "dateModified_u5",
		"mode",
		"riskIndicatorsRegion",
		"riskIndicatorsTotalImpact",
		"__KEY_data",
		(SELECT 
			"startDate",
			"endDate",
			"__FK_eliminationPeriod"
		FROM "eliminationPeriod" FK "__FK_eliminationPeriod"),
		(SELECT 
			"dateCreated",
			"description",
			"datePublished" AS "datePublished_u0",
			"__KEY_appeal",
			"__FK_appeal",
			(SELECT 
				"hash",
				"author",
				"title",
				"url",
				"format",
				"datePublished",
				"id",
				"dateModified",
				"__FK_documents"
			FROM "documents" FK "__FK_documents")
		FROM "appeal" PK "__KEY_appeal" FK "__FK_appeal"),
		(SELECT 
			"@Value",
			"__FK_reasons"
		FROM "reasons" FK "__FK_reasons" ArrayValueAlias "@Value"),
		(SELECT 
			"startDate" AS "startDate_u0",
			"endDate" AS "endDate_u0",
			"__FK_monitoringPeriod"
		FROM "monitoringPeriod" FK "__FK_monitoringPeriod"),
		(SELECT 
			"description" AS "description_u0",
			"dateCreated" AS "dateCreated_u0",
			"relatedParty",
			"date",
			"datePublished" AS "datePublished_u2",
			"__KEY_decision",
			"__FK_decision",
			(SELECT 
				"hash" AS "hash_u0",
				"author" AS "author_u0",
				"title" AS "title_u0",
				"url" AS "url_u0",
				"format" AS "format_u0",
				"datePublished" AS "datePublished_u1",
				"id" AS "id_u0",
				"dateModified" AS "dateModified_u0",
				"__FK_documents_u0"
			FROM "documents" FK "__FK_documents_u0")
		FROM "decision" PK "__KEY_decision" FK "__FK_decision"),
		(SELECT 
			"dateCreated" AS "dateCreated_u1",
			"description" AS "description_u1",
			"datePublished" AS "datePublished_u4",
			"__KEY_eliminationReport",
			"__FK_eliminationReport",
			(SELECT 
				"hash" AS "hash_u1",
				"author" AS "author_u1",
				"title" AS "title_u1",
				"url" AS "url_u1",
				"format" AS "format_u1",
				"datePublished" AS "datePublished_u3",
				"id" AS "id_u1",
				"dateModified" AS "dateModified_u1",
				"__FK_documents_u1"
			FROM "documents" FK "__FK_documents_u1")
		FROM "eliminationReport" PK "__KEY_eliminationReport" FK "__FK_eliminationReport"),
		(SELECT 
			"description" AS "description_u2",
			"title" AS "title_u3",
			"author" AS "author_u3",
			"datePublished" AS "datePublished_u6",
			"relatedParty" AS "relatedParty_u0",
			"dateOverdue",
			"id" AS "id_u3",
			"postOf",
			"relatedPost",
			"__KEY_posts",
			"__FK_posts",
			(SELECT 
				"hash" AS "hash_u2",
				"author" AS "author_u2",
				"title" AS "title_u2",
				"url" AS "url_u2",
				"format" AS "format_u2",
				"datePublished" AS "datePublished_u5",
				"id" AS "id_u2",
				"dateModified" AS "dateModified_u2",
				"__FK_documents_u2"
			FROM "documents" FK "__FK_documents_u2")
		FROM "posts" PK "__KEY_posts" FK "__FK_posts"),
		(SELECT 
			"description" AS "description_u3",
			"dateCreated" AS "dateCreated_u2",
			"relatedParty" AS "relatedParty_u3",
			"result",
			"datePublished" AS "datePublished_u8",
			"__KEY_eliminationResolution",
			"__FK_eliminationResolution",
			(SELECT 
				"hash" AS "hash_u3",
				"title" AS "title_u4",
				"author" AS "author_u5",
				"url" AS "url_u3",
				"format" AS "format_u3",
				"datePublished" AS "datePublished_u7",
				"id" AS "id_u4",
				"dateModified" AS "dateModified_u3",
				"__FK_documents_u3"
			FROM "documents" FK "__FK_documents_u3"),
			(SELECT 
				"corruptionDescription",
				"corruptionProcurementMethodType",
				"corruptionPublicDisclosure",
				"corruptionBiddingDocuments",
				"documentsForm",
				"corruptionAwarded",
				"corruptionCancelled",
				"corruptionContracting",
				"corruptionChanges",
				"other",
				"__FK_resultByType"
			FROM "resultByType" FK "__FK_resultByType")
		FROM "eliminationResolution" PK "__KEY_eliminationResolution" FK "__FK_eliminationResolution"),
		(SELECT 
			"name" AS "name_u0",
			"datePublished" AS "datePublished_u9",
			"id" AS "id_u6",
			"__KEY_parties",
			"__FK_parties",
			(SELECT 
				"@Value" AS "@Value_u0",
				"__FK_roles"
			FROM "roles" FK "__FK_roles" ArrayValueAlias "@Value_u0"),
			(SELECT 
				"postalCode",
				"countryName",
				"streetAddress",
				"region",
				"locality",
				"__FK_address"
			FROM "address" FK "__FK_address"),
			(SELECT 
				"name",
				"email",
				"telephone",
				"faxNumber",
				"__FK_contactPoint"
			FROM "contactPoint" FK "__FK_contactPoint"),
			(SELECT 
				"scheme",
				"id" AS "id_u5",
				"legalName",
				"uri",
				"__FK_identifier"
			FROM "identifier" FK "__FK_identifier")
		FROM "parties" PK "__KEY_parties" FK "__FK_parties"),
		(SELECT 
			"@Value" AS "@Value_u1",
			"__FK_procuringStages"
		FROM "procuringStages" FK "__FK_procuringStages" ArrayValueAlias "@Value_u1"),
		(SELECT 
			"description" AS "description_u4",
			"stringsAttached",
			"datePublished" AS "datePublished_u11",
			"auditFinding",
			"relatedParty" AS "relatedParty_u2",
			"violationOccurred",
			"dateCreated" AS "dateCreated_u3",
			"date" AS "date_u0",
			"__KEY_conclusion",
			"__FK_conclusion",
			(SELECT 
				"hash" AS "hash_u4",
				"author" AS "author_u4",
				"title" AS "title_u5",
				"url" AS "url_u4",
				"format" AS "format_u4",
				"datePublished" AS "datePublished_u10",
				"id" AS "id_u7",
				"dateModified" AS "dateModified_u4",
				"__FK_documents_u4"
			FROM "documents" FK "__FK_documents_u4"),
			(SELECT 
				"@Value" AS "@Value_u2",
				"__FK_violationType"
			FROM "violationType" FK "__FK_violationType" ArrayValueAlias "@Value_u2")
		FROM "conclusion" PK "__KEY_conclusion" FK "__FK_conclusion"),
		(SELECT 
			"dateCreated" AS "dateCreated_u5",
			"relatedParty" AS "relatedParty_u4",
			"description" AS "description_u5",
			"datePublished" AS "datePublished_u12",
			"__FK_cancellation"
		FROM "cancellation" FK "__FK_cancellation"),
		(SELECT 
			"@Value" AS "@Value_u3",
			"__FK_riskIndicators"
		FROM "riskIndicators" FK "__FK_riskIndicators" ArrayValueAlias "@Value_u3")
	FROM JSON (wrap off) "data" PK "__KEY_data"
	WITH CONNECTION(URL "$(vURL_Mon)");

NEXT

//Store RestConnectorMasterTable into $(FILES_PATH)RestConnectorMasterTable.qvd (qvd); // For Debug
///$tab 3 Mon StoreToQVD
// Формирование таблиц для сохранения в QVD

Monitorings_TMP:
LOAD	[status] as MonitoringStatus,
	$(vFloorDateConvert([dateModified_u5])) as [Дата останньої зміни моніторингу],
	$(vDateConvert([dateModified_u5])) as [Дата час останньої зміни моніторингу],
	$(vFloorDateConvert([endDate_u1])) as [Кінцева дата моніторингу],
	$(vDateConvert([endDate_u1])) as [Кінцева дата час моніторингу],
	[monitoring_id] as [Ідентифікатор моніторингу],
//	Mid([monitoring_id], 6, 4) as YearPeriodMonitoring,
	[tender_id] as [ID закупівлі],
	[id_u8] as [ID моніторингу],
	[tender_owner] as Майданчик,
	$(vFloorDateConvert([dateCreated_u4])) as [Дата створення моніторингу],
	$(vDateConvert([dateCreated_u4])) as [Дата час створення моніторингу],
	if(Lower([mode])='test', 1, 0) as TestFlag,
	[riskIndicatorsRegion] as [Обсласть ризик індикатора],
	[riskIndicatorsTotalImpact] as [Вплив ризик індикатора],
	[__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_data]);

Left Join (Monitorings_TMP)
LOAD	
	$(vDateConvert([startDate_u0])) as [Дата час початку моніторингу],
	$(vFloorDateConvert([startDate_u0])) as [Дата початку моніторингу],
	$(vDateConvert([endDate_u0])) as [Кінцева дата час періоду моніторингу],
	$(vFloorDateConvert([endDate_u0])) as [Кінцева дата періоду моніторингу],
	[__FK_monitoringPeriod] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_monitoringPeriod]);

Left Join (Monitorings_TMP)
LOAD	
	$(vFloorDateConvert([startDate])) as [Початкова дата періоду закриття моніторингу],
	$(vDateConvert([startDate])) as [Початкова дата час періоду закриття моніторингу],
	$(vFloorDateConvert([endDate])) as [Кінцева дата періоду закриття моніторингу],
	$(vDateConvert([endDate])) as [Кінцева дата час періоду закриття моніторингу],
	[__FK_eliminationPeriod] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_eliminationPeriod]);

Left Join (Monitorings_TMP)
LOAD	
	$(vDateConvert([dateCreated])) as [Дата час створення оскарження в суді],
	$(vFloorDateConvert([dateCreated])) as [Дата створення оскарження в суді],
	[description] as [Оскарження в суді],
	$(vDateConvert([datePublished_u0])) as [Дата час публікації оскарження в суді],
	$(vFloorDateConvert([datePublished_u0])) as [Дата публікації оскарження в суді],
//	[__KEY_appeal],
	[__FK_appeal] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_appeal]);

Left Join (Monitorings_TMP)
LOAD	
	[description_u0] as [Рішення моніторингу ДАСУ],
	$(vDateConvert([dateCreated_u0])) as [Дата створення рішення про проведення моніторингу],
	$(vFloorDateConvert([dateCreated_u0])) as [Дата час створення рішення про проведення моніторингу],
	[relatedParty] as DecisionRelatedParty,
	$(vDateConvert([date])) as [Дата час прийняття рішення про проведення моніторингу],
	$(vFloorDateConvert([date])) as [Дата прийняття рішення про проведення моніторингу],
	$(vDateConvert([datePublished_u2])) as [Дата час публікації рішення про проведення моніторингу],
	$(vFloorDateConvert([datePublished_u2])) as [Дата публікації рішення про проведення моніторингу],
//	[__KEY_decision],
	[__FK_decision] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_decision]);

Left Join (Monitorings_TMP)
LOAD	
	$(vDateConvert([dateCreated_u1])) as [Дата час усунення порушень],
	$(vFloorDateConvert([dateCreated_u1])) as [Дата усунення порушень],
	[description_u1] as [Усунення порушень],
	$(vDateConvert([datePublished_u4])) as [Дата час публікації інформації про усунення порушень (замовником)], 
	$(vFloorDateConvert([datePublished_u4])) as [Дата публікації інформації про усунення порушень (замовником)],
//	[__KEY_eliminationReport],
	[__FK_eliminationReport] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_eliminationReport]);

Left Join (Monitorings_TMP)
LOAD	
	$(vDateConvert([dateCreated_u5])) as [Дата час відміни моніторингу],
	$(vFloorDateConvert([dateCreated_u5])) as [Дата відміни моніторингу],
	[relatedParty_u4] as CancellationRelatedParty,
	[description_u5] as [Рішення про відміну моніторингу],
	$(vDateConvert([datePublished_u12])) as [Дата час публікації відміни моніторингу],
	$(vFloorDateConvert([datePublished_u12])) as [Дата публікації відміни моніторингу],
	[__FK_cancellation] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_cancellation]);

Left Join (Monitorings_TMP)
LOAD	
	[description_u3] as [Загальний опис результату усунення порушень],
	$(vDateConvert([dateCreated_u2])) as [Дата час результату усунення порушень],
	$(vFloorDateConvert([dateCreated_u2])) as [Дата результату усунення порушень],
	[relatedParty_u3] as EliminationResolutionRelatedParty,
	[result] as EliminationResolutionResult,
	$(vDateConvert([datePublished_u8])) as [Дата час публікації перевірки усунення порушень],
	$(vFloorDateConvert([datePublished_u8])) as [Дата публікації перевірки усунення порушень],
	[__KEY_eliminationResolution],
	[__FK_eliminationResolution] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_eliminationResolution]);

// resultByType
Left Join (Monitorings_TMP)
LOAD	
	[corruptionDescription],
	[corruptionProcurementMethodType],
	[corruptionPublicDisclosure],
	[corruptionBiddingDocuments],
	[documentsForm],
	[corruptionAwarded],
	[corruptionCancelled],
	[corruptionContracting],
	[corruptionChanges],
	[other],
	[__FK_resultByType] AS [__KEY_eliminationResolution]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_resultByType]);

Left Join (Monitorings_TMP)
LOAD	
	[description_u4] as [Висновок про наявність порушень],
	[stringsAttached] as [Зобов’язання щодо усунення порушення],
	$(vFloorDateConvert([date_u0])) as [Дата прийняття рішення про висновок щодо моніторингу],
	$(vDateConvert([date_u0])) as [Дата час прийняття рішення про висновок щодо моніторингу],
	$(vDateConvert([datePublished_u11])) as [Дата час публікації висновку щодо моніторингу],
	$(vFloorDateConvert([datePublished_u11])) as [Дата публікації висновку щодо моніторингу],
	[auditFinding] as [Результат моніторингу],
	[relatedParty_u2] as ConclusionRelatedParty,
	ApplyMap('BoolMap', Lower([violationOccurred]), 0) as [Чи було виявлене порушення],
	$(vDateConvert([dateCreated_u3])) as [Дата час створення рішення про висновок],
	$(vFloorDateConvert([dateCreated_u3])) as [Дата створення рішення про висновок],
//	[__KEY_conclusion],
	[__FK_conclusion] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_conclusion]);

DROP Field [__KEY_data] From Monitorings_TMP;

// Проверка на полноту загруженных данных
IF NoOfRows('Monitorings_TMP')<>$(RowsQty_Mon) THEN 
	TRACE ERROR of Load full data from web for Monitorings;
	EXIT Script;
ENDIF

YearList:
LOAD Distinct
	 Mid([Ідентифікатор моніторингу], 6, 4) as YearPeriod
Resident Monitorings_TMP;

FOR Each vPeriod in FieldValueList('YearPeriod') 

	Monitorings_:
	NoConcatenate
	LOAD
		*
	Resident Monitorings_TMP
	Where Mid([Ідентифікатор моніторингу], 6, 4) = $(vPeriod);	
	
	IF NOT IsNull(FileSize('$(TRN_QVD_PATH)Monitorings_$(vPeriod).qvd')) THEN
		Concatenate (Monitorings_)
		LOAD
			[CancellationRelatedParty],
			[ConclusionRelatedParty],
			[DecisionRelatedParty],
			[EliminationResolutionRelatedParty],
			[ID закупівлі],
			[ID моніторингу],
			[Висновок про наявність порушень],
			[Вплив ризик індикатора],
			[Дата відміни моніторингу],
			[Дата останньої зміни моніторингу],
			[Дата час останньої зміни моніторингу],
			[Дата прийняття рішення про проведення моніторингу],
			[Дата публікації відміни моніторингу],
			[Дата публікації оскарження в суді],
			[Дата публікації перевірки усунення порушень],
			[Дата публікації висновку щодо моніторингу],
			[Дата публікації рішення про проведення моніторингу],
			[Дата публікації інформації про усунення порушень (замовником)],
			[Дата результату усунення порушень],
			[Дата створення моніторингу],
			[Дата створення оскарження в суді],
			[Дата створення рішення про висновок],
			[Дата створення рішення про проведення моніторингу],
			[Дата усунення порушень],
			[Дата час відміни моніторингу],
			[Дата час прийняття рішення про проведення моніторингу],
			[Дата час публікації відміни моніторингу],
			[Дата час публікації оскарження в суді],
			[Дата час публікації перевірки усунення порушень],
			[Дата час публікації висновку щодо моніторингу],
			[Дата час публікації рішення про проведення моніторингу],
			[Дата час публікації інформації про усунення порушень (замовником)],
			[Дата час результату усунення порушень],
			[Дата час створення моніторингу],
			[Дата час створення оскарження в суді],
			[Дата час створення рішення про висновок],
			[Дата час створення рішення про проведення моніторингу],
			[Дата час усунення порушень],
			[Загальний опис результату усунення порушень],
			[Зобов’язання щодо усунення порушення],
			[Ідентифікатор моніторингу],
			[Результат моніторингу],
			[Кінцева дата моніторингу],
			[Кінцева дата періоду закриття моніторингу],
			[Кінцева дата періоду моніторингу],
			[Кінцева дата час моніторингу],
			[Кінцева дата час періоду закриття моніторингу],
			[Кінцева дата час періоду моніторингу],
			[Майданчик],
			[Обсласть ризик індикатора],
			[Оскарження в суді],
			[Початкова дата періоду закриття моніторингу],
			[Дата початку моніторингу],
			[Початкова дата час періоду закриття моніторингу],
			[Дата час початку моніторингу],
			EliminationResolutionResult,
			[Рішення моніторингу ДАСУ],
			[Рішення про відміну моніторингу],
			MonitoringStatus,
			[Усунення порушень],
			[Дата час прийняття рішення про висновок щодо моніторингу],
			[Дата прийняття рішення про висновок щодо моніторингу],
			[Чи було виявлене порушення],
			[corruptionDescription],
			[corruptionProcurementMethodType],
			[corruptionPublicDisclosure],
			[corruptionBiddingDocuments],
			[documentsForm],
			[corruptionAwarded],
			[corruptionCancelled],
			[corruptionContracting],
			[corruptionChanges],
			[other]
		FROM [$(TRN_QVD_PATH)Monitorings_$(vPeriod).qvd] (qvd)
		WHERE NOT EXISTS([ID моніторингу]);
	ENDIF	 
	
	Monitorings_$(vPeriod):
	NoConcatenate
	LOAD 
		[CancellationRelatedParty],
		if(NOT IsNull([CancellationRelatedParty]), AutoNumber([ID моніторингу]&'|'&[CancellationRelatedParty], 'RelatedPartyId')+$(vPeriod)*$(MulKey)) as [CancellationRelatedPartyIdKey], 
		[ConclusionRelatedParty],
		if(NOT IsNull([ConclusionRelatedParty]), AutoNumber([ID моніторингу]&'|'&[ConclusionRelatedParty], 'RelatedPartyId')+$(vPeriod)*$(MulKey)) as [ConclusionRelatedPartyIdKey],
		[DecisionRelatedParty],	
		if(NOT IsNull([DecisionRelatedParty]), AutoNumber([ID моніторингу]&'|'&[DecisionRelatedParty], 'RelatedPartyId')+$(vPeriod)*$(MulKey)) as [DecisionRelatedPartyIdKey],
		[EliminationResolutionRelatedParty],
		if(NOT IsNull([EliminationResolutionRelatedParty]), AutoNumber([ID моніторингу]&'|'&[EliminationResolutionRelatedParty], 'RelatedPartyId')+$(vPeriod)*$(MulKey)) as [EliminationResolutionRelatedPartyIdKey],
		[ID закупівлі],
		[ID моніторингу],
		AutoNumber([ID моніторингу], 'MonitoringId')+$(vPeriod)*$(MulKey) as MonitoringIdKey,
		[Висновок про наявність порушень],
		[Вплив ризик індикатора],
		[Дата відміни моніторингу],
		[Дата останньої зміни моніторингу],
		[Дата час останньої зміни моніторингу],
		[Дата прийняття рішення про проведення моніторингу],
		[Дата публікації відміни моніторингу],
		[Дата публікації оскарження в суді],
		[Дата публікації перевірки усунення порушень],
		[Дата публікації висновку щодо моніторингу],
		[Дата публікації рішення про проведення моніторингу],
		[Дата публікації інформації про усунення порушень (замовником)],
		[Дата результату усунення порушень],
		[Дата створення моніторингу],
		[Дата створення оскарження в суді],
		[Дата створення рішення про висновок],
		[Дата створення рішення про проведення моніторингу],
		[Дата усунення порушень],
		[Дата час відміни моніторингу],
		[Дата час прийняття рішення про проведення моніторингу],
		[Дата час публікації відміни моніторингу],
		[Дата час публікації оскарження в суді],
		[Дата час публікації перевірки усунення порушень],
		[Дата час публікації висновку щодо моніторингу],
		[Дата час публікації рішення про проведення моніторингу],
		[Дата час публікації інформації про усунення порушень (замовником)],
		[Дата час результату усунення порушень],
		[Дата час створення моніторингу],
		[Дата час створення оскарження в суді],
		[Дата час створення рішення про висновок],
		[Дата час створення рішення про проведення моніторингу],
		[Дата час усунення порушень],
		[Загальний опис результату усунення порушень],
		[Зобов’язання щодо усунення порушення],
		[Ідентифікатор моніторингу],
		[Результат моніторингу],
		[Кінцева дата моніторингу],
		[Кінцева дата періоду закриття моніторингу],
		[Кінцева дата періоду моніторингу],
		[Кінцева дата час моніторингу],
		[Кінцева дата час періоду закриття моніторингу],
		[Кінцева дата час періоду моніторингу],
		[Майданчик],
		[Обсласть ризик індикатора],
		[Оскарження в суді],
		[Початкова дата періоду закриття моніторингу],
		[Дата початку моніторингу],
		[Початкова дата час періоду закриття моніторингу],
		[Дата час початку моніторингу],
		EliminationResolutionResult,
		[Рішення моніторингу ДАСУ],
		[Рішення про відміну моніторингу],
		MonitoringStatus,
		[Усунення порушень],
		[Дата час прийняття рішення про висновок щодо моніторингу],
		[Дата прийняття рішення про висновок щодо моніторингу],
		[Чи було виявлене порушення],
		[corruptionDescription],
		[corruptionProcurementMethodType],
		[corruptionPublicDisclosure],
		[corruptionBiddingDocuments],
		[documentsForm],
		[corruptionAwarded],
		[corruptionCancelled],
		[corruptionContracting],
		[corruptionChanges],
		[other]	
	Resident Monitorings_
	WHERE TestFlag <> 1;
	
	DROP Table Monitorings_;
	
	STORE Monitorings_$(vPeriod) into $(TRN_QVD_PATH)Monitorings_$(vPeriod).qvd (qvd);
	DROP Table Monitorings_$(vPeriod);

NEXT

DROP Table Monitorings_TMP;

// Установка флага измененных данных в QVD
ReloadMonCreator:
LOAD * Inline [
ReloadMonFlag
0
];

STORE ReloadMonCreator into $(DIC_QVD_PATH)ReloadMonCreator.txt (txt);

DROP Table ReloadMonCreator;
//

// Підстави моніторингу
Reasons_TMP:
LOAD	
	[@Value] as Reasons,
	[__FK_reasons] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_reasons]);

Left Join (Reasons_TMP)
LOAD	
	[id_u8] as [ID моніторингу],
	Mid([monitoring_id], 6, 4) as Year_Period,
	if(Lower([mode])='test', 1, 0) as TestFlag,
	[__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_data]);

DROP Field __KEY_data From Reasons_TMP;

FOR Each vPeriod in FieldValueList('YearPeriod') 

	Reasons_:
	NoConcatenate
	LOAD
		Reasons,
		[ID моніторингу],
		[ID моніторингу] as [ID моніторингу Orig],
		TestFlag
	Resident Reasons_TMP
	Where Year_Period = $(vPeriod);	
	
	IF NOT IsNull(FileSize('$(TRN_QVD_PATH)MonitoringReasons_$(vPeriod).qvd')) THEN
		Concatenate (Reasons_)
		LOAD
			 Reasons,
			 [ID моніторингу]
		FROM [$(TRN_QVD_PATH)MonitoringReasons_$(vPeriod).qvd] (qvd)
		WHERE NOT EXISTS([ID моніторингу Orig], [ID моніторингу]);
	ENDIF	 
	
	Reasons_$(vPeriod):
	NoConcatenate
	LOAD 
		[ID моніторингу],
		AutoNumber([ID моніторингу], 'MonitoringId')+$(vPeriod)*$(MulKey) as MonitoringIdKey,
		Reasons
	Resident Reasons_
	WHERE TestFlag <> 1;
	
	DROP Table Reasons_;
	
	STORE Reasons_$(vPeriod) into $(TRN_QVD_PATH)MonitoringReasons_$(vPeriod).qvd (qvd);
	DROP Table Reasons_$(vPeriod);

NEXT

DROP Table Reasons_TMP;

// Поточний статус закупівлі
ProcuringStages_TMP:
LOAD	
	[@Value_u1] as ProcuringStages,
	[__FK_procuringStages] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_procuringStages]);

Left Join (ProcuringStages_TMP)
LOAD	
	[id_u8] as [ID моніторингу],
	Mid([monitoring_id], 6, 4) as Year_Period,
	if(Lower([mode])='test', 1, 0) as TestFlag,
	[__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_data]);

DROP Field __KEY_data From ProcuringStages_TMP;

FOR Each vPeriod in FieldValueList('YearPeriod') 

	ProcuringStages_:
	NoConcatenate
	LOAD
		ProcuringStages,
		[ID моніторингу],
		[ID моніторингу] as [ID моніторингу Orig],
		TestFlag
	Resident ProcuringStages_TMP
	Where Year_Period = $(vPeriod);	
	
	IF NOT IsNull(FileSize('$(TRN_QVD_PATH)MonitoringProcuringStages_$(vPeriod).qvd')) THEN
		Concatenate (ProcuringStages_)
		LOAD
			 ProcuringStages,
			 [ID моніторингу]
		FROM [$(TRN_QVD_PATH)MonitoringProcuringStages_$(vPeriod).qvd] (qvd)
		WHERE NOT EXISTS([ID моніторингу Orig], [ID моніторингу]);
	ENDIF	 
	
	ProcuringStages_$(vPeriod):
	NoConcatenate
	LOAD 
		[ID моніторингу],
		AutoNumber([ID моніторингу], 'MonitoringId')+$(vPeriod)*$(MulKey) as MonitoringIdKey,
		ProcuringStages
	Resident ProcuringStages_
	WHERE TestFlag <> 1;
	
	DROP Table ProcuringStages_;
	
	STORE ProcuringStages_$(vPeriod) into $(TRN_QVD_PATH)MonitoringProcuringStages_$(vPeriod).qvd (qvd);
	DROP Table ProcuringStages_$(vPeriod);

NEXT

DROP Table ProcuringStages_TMP;

// Тип порушення
ViolationType_TMP:
LOAD	
	[@Value_u2] as ViolationType,
	[__FK_violationType] AS [__KEY_conclusion]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_violationType]);

Left Join (ViolationType_TMP)
LOAD	
	[__KEY_conclusion],
	[__FK_conclusion] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_conclusion]);

Left Join (ViolationType_TMP)
LOAD	
	[id_u8] as [ID моніторингу],
	Mid([monitoring_id], 6, 4) as Year_Period,
	if(Lower([mode])='test', 1, 0) as TestFlag,
	[__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_data]);

DROP Fields __KEY_data, __KEY_conclusion From ViolationType_TMP;

FOR Each vPeriod in FieldValueList('YearPeriod') 

	ViolationType_:
	NoConcatenate
	LOAD
		ViolationType,
		[ID моніторингу],
		[ID моніторингу] as [ID моніторингу Orig],
		TestFlag
	Resident ViolationType_TMP
	Where Year_Period = $(vPeriod);	
	
	IF NOT IsNull(FileSize('$(TRN_QVD_PATH)MonitoringViolationType_$(vPeriod).qvd')) THEN
		Concatenate (ViolationType_)
		LOAD
			 ViolationType,
			 [ID моніторингу]
		FROM [$(TRN_QVD_PATH)MonitoringViolationType_$(vPeriod).qvd] (qvd)
		WHERE NOT EXISTS([ID моніторингу Orig], [ID моніторингу]);
	ENDIF	 
	
	ViolationType_$(vPeriod):
	NoConcatenate
	LOAD 
		[ID моніторингу],
		AutoNumber([ID моніторингу], 'MonitoringId')+$(vPeriod)*$(MulKey) as MonitoringIdKey,
		ViolationType
	Resident ViolationType_
	WHERE TestFlag <> 1;
	
	DROP Table ViolationType_;
	
	STORE ViolationType_$(vPeriod) into $(TRN_QVD_PATH)MonitoringViolationType_$(vPeriod).qvd (qvd);
	DROP Table ViolationType_$(vPeriod);

NEXT

DROP Table ViolationType_TMP;

// Ризик індикатори
RiskIndicators_TMP:
LOAD	[@Value_u3] as RiskIndicators,
	[__FK_riskIndicators] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_riskIndicators]);

Left Join (RiskIndicators_TMP)
LOAD	
	[id_u8] as [ID моніторингу],
	Mid([monitoring_id], 6, 4) as Year_Period,
	if(Lower([mode])='test', 1, 0) as TestFlag,
	[__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_data]);

DROP Fields __KEY_data From RiskIndicators_TMP;

FOR Each vPeriod in FieldValueList('YearPeriod') 

	RiskIndicators_:
	NoConcatenate
	LOAD
		RiskIndicators,
		[ID моніторингу],
		[ID моніторингу] as [ID моніторингу Orig],
		TestFlag
	Resident RiskIndicators_TMP
	Where Year_Period = $(vPeriod);	
	
	IF NOT IsNull(FileSize('$(TRN_QVD_PATH)MonitoringRiskIndicators_$(vPeriod).qvd')) THEN
		Concatenate (RiskIndicators_)
		LOAD
			 RiskIndicators,
			 [ID моніторингу]
		FROM [$(TRN_QVD_PATH)MonitoringRiskIndicators_$(vPeriod).qvd] (qvd)
		WHERE NOT EXISTS([ID моніторингу Orig], [ID моніторингу]);
	ENDIF	 
	
	RiskIndicators_$(vPeriod):
	NoConcatenate
	LOAD 
		[ID моніторингу],
		AutoNumber([ID моніторингу], 'MonitoringId')+$(vPeriod)*$(MulKey) as MonitoringIdKey,
		RiskIndicators
	Resident RiskIndicators_
	WHERE TestFlag <> 1;
	
	DROP Table RiskIndicators_;
	
	STORE RiskIndicators_$(vPeriod) into $(TRN_QVD_PATH)MonitoringRiskIndicators_$(vPeriod).qvd (qvd);
	DROP Table RiskIndicators_$(vPeriod);

NEXT

DROP Table RiskIndicators_TMP;

// Повідомлення
Posts_TMP:
LOAD	
	[description_u2] as [Опис повідомлення],
	[title_u3] as [Повідомлення],
	[author_u3] as [Автор повідомлення],
	$(vFloorDateConvert([datePublished_u6])) as [Дата публікації повідомлення],
	$(vDateConvert([datePublished_u6])) as [Дата час публікації повідомлення],
	[relatedParty_u0] as [PostRelatedParty],
	$(vFloorDateConvert([dateOverdue])) as [Дата прострочення],
	$(vDateConvert([dateOverdue])) as [Дата час прострочення],
	[id_u3] as [ID повідомлення],
	[postOf],
	[relatedPost],
//	[__KEY_posts],
	[__FK_posts] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_posts]);

Left Join (Posts_TMP)
LOAD	
	[id_u8] as [ID моніторингу],
	Mid([monitoring_id], 6, 4) as Year_Period,
	if(Lower([mode])='test', 1, 0) as TestFlag,
	[__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_data]);

DROP Field __KEY_data From Posts_TMP;

FOR Each vPeriod in FieldValueList('YearPeriod') 

	Posts_:
	NoConcatenate
	LOAD
		[Опис повідомлення],
		[Повідомлення],
		[Автор повідомлення],
		[Дата публікації повідомлення],
		[Дата час публікації повідомлення],
		[PostRelatedParty],
		[Дата прострочення],
		[Дата час прострочення],
		[ID повідомлення],
		[postOf],
		[relatedPost],
		[ID моніторингу],
		[ID моніторингу] as [ID моніторингу Orig],
		TestFlag
	Resident Posts_TMP
	Where Year_Period = $(vPeriod);	
	
	IF NOT IsNull(FileSize('$(TRN_QVD_PATH)MonitoringPosts_$(vPeriod).qvd')) THEN
		Concatenate (Posts_)
		LOAD
			 [Опис повідомлення],
			 [Повідомлення],
			 [Автор повідомлення],
			 [Дата публікації повідомлення],
			 [Дата час публікації повідомлення],
			 [PostRelatedParty],
			 [Дата прострочення],
			 [Дата час прострочення],
			 [ID повідомлення],
			 [postOf],
			 [relatedPost],
			 [ID моніторингу]
		FROM [$(TRN_QVD_PATH)MonitoringPosts_$(vPeriod).qvd] (qvd)
		WHERE NOT EXISTS([ID моніторингу Orig], [ID моніторингу]);
	ENDIF	 
	
	Posts_$(vPeriod):
	NoConcatenate
	LOAD 
		 [ID моніторингу],
		 AutoNumber([ID моніторингу], 'MonitoringId')+$(vPeriod)*$(MulKey) as MonitoringIdKey,
		 [Опис повідомлення],
		 [Повідомлення],
		 [Автор повідомлення],
		 [Дата публікації повідомлення],
		 [Дата час публікації повідомлення],
		 [PostRelatedParty],
		 if(NOT IsNull(PostRelatedParty), AutoNumber([ID моніторингу]&'|'&[PostRelatedParty], 'RelatedPartyId')+$(vPeriod)*$(MulKey)) as [PostRelatedPartyIdKey],
		 [Дата прострочення],
		 [Дата час прострочення],
		 [ID повідомлення],
		 AutoNumber([ID моніторингу]&'|'&[ID повідомлення], 'PostId')+$(vPeriod)*$(MulKey) as PostIdKey,
		 [postOf],
		 [relatedPost],
		 if(NOT IsNull(relatedPost), AutoNumber([ID моніторингу]&'|'&[relatedPost], 'PostId')+$(vPeriod)*$(MulKey)) as RelatedPostIdKey
	Resident Posts_
	WHERE TestFlag <> 1;
	
	DROP Table Posts_;
	
	STORE Posts_$(vPeriod) into $(TRN_QVD_PATH)MonitoringPosts_$(vPeriod).qvd (qvd);
	DROP Table Posts_$(vPeriod);

NEXT

DROP Table Posts_TMP;

// Parties
Parties_TMP:
LOAD	
	[name_u0] as [Ініціатор моніторингу],
	$(vDateConvert([datePublished_u9])) as [Дата час публікації ініціатора моніторингу],
	[id_u6Txt] as [ID ініціатора моніторингу],
	[__KEY_parties],
	[__FK_parties] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_parties]);

Left Join (Parties_TMP)
LOAD	[scheme] as [Схема ініціатора моніторингу],
	[id_u5] as [Код ініціатора моніторингу],
	[uri] as [Веб адреса ініціатора моніторингу],
	[legalName] as [Юр. назва ініціатора моніторингу],
	[__FK_identifier] AS [__KEY_parties]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_identifier]);

Left Join (Parties_TMP)
LOAD	[@Value_u0] as [Роль],
	[__FK_roles] AS [__KEY_parties]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_roles]);

Left Join (Parties_TMP)
LOAD	
	[postalCode] as [Поштовий індекс ініціатора моніторингу],
	[countryName] as [Країна ініціатора моніторингу],
	[streetAddress] as [Адреса ініціатора моніторингу],
	[region] as [Область ініціатора моніторингу],
	[locality] as [Населений пункт ініціатора моніторингу],
	[__FK_address] AS [__KEY_parties]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_address]);

Left Join (Parties_TMP)
LOAD	[name] as [Представник ініціатора моніторингу],
	[telephone] as [Телефон представника ініціатора моніторингу],
	[faxNumber] as [Факс представника ініціатора моніторингу],
	[email] as [Email представника ініціатора моніторингу],
	[__FK_contactPoint] AS [__KEY_parties]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_contactPoint]);

Left Join (Parties_TMP)
LOAD	
	[id_u8] as [ID моніторингу],
	Mid([monitoring_id], 6, 4) as Year_Period,
	if(Lower([mode])='test', 1, 0) as TestFlag,
	[__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_data]);

DROP Fields __KEY_data, __KEY_parties From Parties_TMP;

FOR Each vPeriod in FieldValueList('YearPeriod') 

	Parties_:
	NoConcatenate
	LOAD
		[Ініціатор моніторингу],
		[Дата час публікації ініціатора моніторингу],
		[ID ініціатора моніторингу],
		[Схема ініціатора моніторингу],
		[Код ініціатора моніторингу],
		[Веб адреса ініціатора моніторингу],
		[Юр. назва ініціатора моніторингу],
		[Роль],
		[Поштовий індекс ініціатора моніторингу],
		[Країна ініціатора моніторингу],
		[Адреса ініціатора моніторингу],
		[Область ініціатора моніторингу],
		[Населений пункт ініціатора моніторингу],
		[Представник ініціатора моніторингу],
		[Телефон представника ініціатора моніторингу],
		[Факс представника ініціатора моніторингу],
		[Email представника ініціатора моніторингу],
		[ID моніторингу],
		[ID моніторингу] as [ID моніторингу Orig],
		TestFlag
	Resident Parties_TMP
	Where Year_Period = $(vPeriod);	
	
	IF NOT IsNull(FileSize('$(TRN_QVD_PATH)MonitoringParties_$(vPeriod).qvd')) THEN
		Concatenate (Parties_)
		LOAD
			[Ініціатор моніторингу],
			[Дата час публікації ініціатора моніторингу],
			[ID ініціатора моніторингу],
			[Схема ініціатора моніторингу],
			[Код ініціатора моніторингу],
			[Веб адреса ініціатора моніторингу],
			[Юр. назва ініціатора моніторингу],
			[Роль],
			[Поштовий індекс ініціатора моніторингу],
			[Країна ініціатора моніторингу],
			[Адреса ініціатора моніторингу],
			[Область ініціатора моніторингу],
			[Населений пункт ініціатора моніторингу],
			[Представник ініціатора моніторингу],
			[Телефон представника ініціатора моніторингу],
			[Факс представника ініціатора моніторингу],
			[Email представника ініціатора моніторингу],
			[ID моніторингу]
		FROM [$(TRN_QVD_PATH)MonitoringParties_$(vPeriod).qvd] (qvd)
		WHERE NOT EXISTS([ID моніторингу Orig], [ID моніторингу]);
	ENDIF	 
	
	Parties_$(vPeriod):
	NoConcatenate
	LOAD 
		[ID моніторингу],
		AutoNumber([ID моніторингу], 'MonitoringId')+$(vPeriod)*$(MulKey) as MonitoringIdKey,
		[Ініціатор моніторингу],
		[Дата час публікації ініціатора моніторингу],
		[ID ініціатора моніторингу],
		AutoNumber([ID моніторингу]&'|'&[ID ініціатора моніторингу], 'RelatedPartyId')+$(vPeriod)*$(MulKey) as [RelatedPartyIdKey],
		[Схема ініціатора моніторингу],
		[Код ініціатора моніторингу],
		[Веб адреса ініціатора моніторингу],
		[Юр. назва ініціатора моніторингу],
		[Роль],
		[Поштовий індекс ініціатора моніторингу],
		[Країна ініціатора моніторингу],
		[Адреса ініціатора моніторингу],
		[Область ініціатора моніторингу],
		[Населений пункт ініціатора моніторингу],
		[Представник ініціатора моніторингу],
		[Телефон представника ініціатора моніторингу],
		[Факс представника ініціатора моніторингу],
		[Email представника ініціатора моніторингу]
	Resident Parties_
	WHERE TestFlag <> 1;
	
	DROP Table Parties_;
	
	STORE Parties_$(vPeriod) into $(TRN_QVD_PATH)MonitoringParties_$(vPeriod).qvd (qvd);
	DROP Table Parties_$(vPeriod);

NEXT

DROP Table Parties_TMP;

// Документи оскарження в суді
AppealDocuments_TMP:
LOAD	
	[hash] as AppealHash,
	[author] as [Автор документа оскарження в суді],
	[title] as [Документ оскарження в суді],
	[url] as [Посилання на документ оскарження в суді],
	[format] as [AppealDocFormat],
	$(vDateConvert([datePublished])) as [Дата час публікації документа оскарження в суді],
	[id] as [ID документа оскарження в суді],
	$(vDateConvert([dateModified])) as [Дата час зміни документа оскарження в суді],
	[__FK_documents] AS [__KEY_appeal]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_documents]);

Left Join (AppealDocuments_TMP)
LOAD	
	[__KEY_appeal],
	[__FK_appeal] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_appeal]);

Left Join (AppealDocuments_TMP)
LOAD	
	[id_u8] as [ID моніторингу],
	Mid([monitoring_id], 6, 4) as Year_Period,
	if(Lower([mode])='test', 1, 0) as TestFlag,
	[__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_data]);

DROP Fields __KEY_data, __KEY_appeal From AppealDocuments_TMP;

FOR Each vPeriod in FieldValueList('YearPeriod') 

	AppealDocuments_:
	NoConcatenate
	LOAD
		AppealHash,
		[Автор документа оскарження в суді],
		[Документ оскарження в суді],
		[Посилання на документ оскарження в суді],
		AppealDocFormat,
		[Дата час публікації документа оскарження в суді],
		[ID документа оскарження в суді],
		[Дата час зміни документа оскарження в суді],
		[ID моніторингу],
		[ID моніторингу] as [ID моніторингу Orig],
		TestFlag
	Resident AppealDocuments_TMP
	Where Year_Period = $(vPeriod);	
	
	IF NOT IsNull(FileSize('$(TRN_QVD_PATH)MonitoringAppealDocuments_$(vPeriod).qvd')) THEN
		Concatenate (AppealDocuments_)
		LOAD
			AppealHash,
			[Автор документа оскарження в суді],
			[Документ оскарження в суді],
			[Посилання на документ оскарження в суді],
			AppealDocFormat,
			[Дата час публікації документа оскарження в суді],
			[ID документа оскарження в суді],
			[Дата час зміни документа оскарження в суді],
			[ID моніторингу]
		FROM [$(TRN_QVD_PATH)MonitoringAppealDocuments_$(vPeriod).qvd] (qvd)
		WHERE NOT EXISTS([ID моніторингу Orig], [ID моніторингу]);
	ENDIF	 
	
	AppealDocuments_$(vPeriod):
	NoConcatenate
	LOAD 
		[ID моніторингу],
		AutoNumber([ID моніторингу], 'MonitoringId')+$(vPeriod)*$(MulKey) as MonitoringIdKey,
		AppealHash,
		[Автор документа оскарження в суді],
		[Документ оскарження в суді],
		[Посилання на документ оскарження в суді],
		AppealDocFormat,
		[Дата час публікації документа оскарження в суді],
		[ID документа оскарження в суді],
		AutoNumber([ID моніторингу]&'|'&[ID документа оскарження в суді], 'AppealDocId')+$(vPeriod)*$(MulKey) as AppealDocId,
		[Дата час зміни документа оскарження в суді]
	Resident AppealDocuments_
	WHERE TestFlag <> 1;
	
	DROP Table AppealDocuments_;
	
	STORE AppealDocuments_$(vPeriod) into $(TRN_QVD_PATH)MonitoringAppealDocuments_$(vPeriod).qvd (qvd);
	DROP Table AppealDocuments_$(vPeriod);

NEXT

DROP Table AppealDocuments_TMP;

// Документи рішення про проведення моніторингу
DecisionDocuments_TMP:
LOAD	[hash_u0] as DecisionHash,
	[author_u0] as [Автор документа рішення про проведення моніторингу],
	[title_u0] as [Документ рішення про проведення моніторингу],
	[url_u0] as [Посилання на документ рішення про проведення моніторингу],
	[format_u0] as DecisionDocFormat,
	$(vDateConvert([datePublished_u1])) as [Дата час публікації документа рішення про проведення моніторингу],
	[id_u0] as [ID документа рішення про проведення моніторингу],
	$(vDateConvert([dateModified_u0])) as [Дата час зміни документа рішення про проведення моніторингу],
	[__FK_documents_u0] AS [__KEY_decision]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_documents_u0]);

Left Join (DecisionDocuments_TMP)
LOAD	
	[__KEY_decision],
	[__FK_decision] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_decision]);

Left Join (DecisionDocuments_TMP)
LOAD	
	[id_u8] as [ID моніторингу],
	Mid([monitoring_id], 6, 4) as Year_Period,
	if(Lower([mode])='test', 1, 0) as TestFlag,
	[__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_data]);

DROP Fields __KEY_data, __KEY_decision From DecisionDocuments_TMP;

FOR Each vPeriod in FieldValueList('YearPeriod') 

	DecisionDocuments_:
	NoConcatenate
	LOAD
		DecisionHash,
		[Автор документа рішення про проведення моніторингу],
		[Документ рішення про проведення моніторингу],
		[Посилання на документ рішення про проведення моніторингу],
		DecisionDocFormat,
		[Дата час публікації документа рішення про проведення моніторингу],
		[ID документа рішення про проведення моніторингу],
		[Дата час зміни документа рішення про проведення моніторингу],
		[ID моніторингу],
		[ID моніторингу] as [ID моніторингу Orig],
		TestFlag
	Resident DecisionDocuments_TMP
	Where Year_Period = $(vPeriod);	
	
	IF NOT IsNull(FileSize('$(TRN_QVD_PATH)MonitoringDecisionDocuments_$(vPeriod).qvd')) THEN
		Concatenate (DecisionDocuments_)
		LOAD
			DecisionHash,
			[Автор документа рішення про проведення моніторингу],
			[Документ рішення про проведення моніторингу],
			[Посилання на документ рішення про проведення моніторингу],
			DecisionDocFormat,
			[Дата час публікації документа рішення про проведення моніторингу],
			[ID документа рішення про проведення моніторингу],
			[Дата час зміни документа рішення про проведення моніторингу],
			[ID моніторингу]
		FROM [$(TRN_QVD_PATH)MonitoringDecisionDocuments_$(vPeriod).qvd] (qvd)
		WHERE NOT EXISTS([ID моніторингу Orig], [ID моніторингу]);
	ENDIF	 
	
	DecisionDocuments_$(vPeriod):
	NoConcatenate
	LOAD 
		[ID моніторингу],
		AutoNumber([ID моніторингу], 'MonitoringId')+$(vPeriod)*$(MulKey) as MonitoringIdKey,
		DecisionHash,
		[Автор документа рішення про проведення моніторингу],
		[Документ рішення про проведення моніторингу],
		[Посилання на документ рішення про проведення моніторингу],
		DecisionDocFormat,
		[Дата час публікації документа рішення про проведення моніторингу],
		[ID документа рішення про проведення моніторингу],
		AutoNumber([ID моніторингу]&'|'&[ID документа рішення про проведення моніторингу], 'DecisionDocId')+$(vPeriod)*$(MulKey) as DecisionDocId,
		[Дата час зміни документа рішення про проведення моніторингу]
	Resident DecisionDocuments_
	WHERE TestFlag <> 1;
	
	DROP Table DecisionDocuments_;
	
	STORE DecisionDocuments_$(vPeriod) into $(TRN_QVD_PATH)MonitoringDecisionDocuments_$(vPeriod).qvd (qvd);
	DROP Table DecisionDocuments_$(vPeriod);

NEXT

DROP Table DecisionDocuments_TMP;

// Документи усунення порушень
EliminationReportDocuments_TMP:
LOAD	[hash_u1] as EliminationReportHash,
	[author_u1] as [Автор документа усунення порушень],
	[title_u1] as [Документ усунення порушень],
	[url_u1] as [Посилання на документ усунення порушень],
	[format_u1] as EliminationReportDocFormat,
	$(vDateConvert([datePublished_u3])) as [Дата час публікації документа усунення порушень],
	[id_u1] as [ID документа усунення порушень],
	$(vDateConvert([dateModified_u1])) as [Дата час зміни документа усунення порушень],
	[__FK_documents_u1] AS [__KEY_eliminationReport]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_documents_u1]);

Left Join (EliminationReportDocuments_TMP)
LOAD	
	[__KEY_eliminationReport],
	[__FK_eliminationReport] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_eliminationReport]);

Left Join (EliminationReportDocuments_TMP)
LOAD	
	[id_u8] as [ID моніторингу],
	Mid([monitoring_id], 6, 4) as Year_Period,
	if(Lower([mode])='test', 1, 0) as TestFlag,
	[__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_data]);

DROP Fields __KEY_data, __KEY_eliminationReport From EliminationReportDocuments_TMP;

FOR Each vPeriod in FieldValueList('YearPeriod') 

	EliminationReportDocuments_:
	NoConcatenate
	LOAD
		EliminationReportHash,
		[Автор документа усунення порушень],
		[Документ усунення порушень],
		[Посилання на документ усунення порушень],
		EliminationReportDocFormat,
		[Дата час публікації документа усунення порушень],
		[ID документа усунення порушень],
		[Дата час зміни документа усунення порушень],
		[ID моніторингу],
		[ID моніторингу] as [ID моніторингу Orig],
		TestFlag
	Resident EliminationReportDocuments_TMP
	Where Year_Period = $(vPeriod);	
	
	IF NOT IsNull(FileSize('$(TRN_QVD_PATH)MonitoringEliminationReportDocuments_$(vPeriod).qvd')) THEN
		Concatenate (EliminationReportDocuments_)
		LOAD
			EliminationReportHash,
			[Автор документа усунення порушень],
			[Документ усунення порушень],
			[Посилання на документ усунення порушень],
			EliminationReportDocFormat,
			[Дата час публікації документа усунення порушень],
			[ID документа усунення порушень],
			[Дата час зміни документа усунення порушень],
			[ID моніторингу]
		FROM [$(TRN_QVD_PATH)MonitoringEliminationReportDocuments_$(vPeriod).qvd] (qvd)
		WHERE NOT EXISTS([ID моніторингу Orig], [ID моніторингу]);
	ENDIF	 
	
	EliminationReportDocuments_$(vPeriod):
	NoConcatenate
	LOAD 
		[ID моніторингу],
		AutoNumber([ID моніторингу], 'MonitoringId')+$(vPeriod)*$(MulKey) as MonitoringIdKey,
		EliminationReportHash,
		[Автор документа усунення порушень],
		[Документ усунення порушень],
		[Посилання на документ усунення порушень],
		EliminationReportDocFormat,
		[Дата час публікації документа усунення порушень],
		[ID документа усунення порушень],
		AutoNumber([ID моніторингу]&'|'&[ID документа усунення порушень], 'EliminationReportDocId')+$(vPeriod)*$(MulKey) as EliminationReportDocId,
		[Дата час зміни документа усунення порушень]
	Resident EliminationReportDocuments_
	WHERE TestFlag <> 1;
	
	DROP Table EliminationReportDocuments_;
	
	STORE EliminationReportDocuments_$(vPeriod) into $(TRN_QVD_PATH)MonitoringEliminationReportDocuments_$(vPeriod).qvd (qvd);
	DROP Table EliminationReportDocuments_$(vPeriod);

NEXT

DROP Table EliminationReportDocuments_TMP;

// Документи повідомлень
PostDocuments_TMP:
LOAD	[hash_u2] as PostHash,
	[author_u2] as [Автор документа повідомлень],
	[title_u2] as [Документ повідомлень],
	[url_u2] as [Посилання на документ повідомлень],
	[format_u2] as PostDocFormat,
	$(vDateConvert([datePublished_u5])) as [Дата час публікації документа повідомлень],
	[id_u2] as [ID документа повідомлень],
	$(vDateConvert([dateModified_u2])) as [Дата час зміни документа повідомлень],
	[__FK_documents_u2] AS [__KEY_posts]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_documents_u2]);

Left Join (PostDocuments_TMP)
LOAD	
	[__KEY_posts],
	[id_u3] as [ID повідомлення],
	[__FK_posts] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_posts]);

Left Join (PostDocuments_TMP)
LOAD	
	[id_u8] as [ID моніторингу],
	Mid([monitoring_id], 6, 4) as Year_Period,
	if(Lower([mode])='test', 1, 0) as TestFlag,
	[__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_data]);

DROP Fields __KEY_data, __KEY_posts From PostDocuments_TMP;

FOR Each vPeriod in FieldValueList('YearPeriod') 

	PostDocuments_:
	NoConcatenate
	LOAD
		PostHash,
		[Автор документа повідомлень],
		[Документ повідомлень],
		[Посилання на документ повідомлень],
		PostDocFormat,
		[Дата час публікації документа повідомлень],
		[ID повідомлення],
		[ID документа повідомлень],
		[Дата час зміни документа повідомлень],
		[ID моніторингу],
		[ID моніторингу] as [ID моніторингу Orig],
		TestFlag
	Resident PostDocuments_TMP
	Where Year_Period = $(vPeriod);	
	
	IF NOT IsNull(FileSize('$(TRN_QVD_PATH)MonitoringPostDocuments_$(vPeriod).qvd')) THEN
		Concatenate (PostDocuments_)
		LOAD
			PostHash,
			[Автор документа повідомлень],
			[Документ повідомлень],
			[Посилання на документ повідомлень],
			PostDocFormat,
			[Дата час публікації документа повідомлень],
			[ID повідомлення],
			[ID документа повідомлень],
			[Дата час зміни документа повідомлень],
			[ID моніторингу]
		FROM [$(TRN_QVD_PATH)MonitoringPostDocuments_$(vPeriod).qvd] (qvd)
		WHERE NOT EXISTS([ID моніторингу Orig], [ID моніторингу]);
	ENDIF	 
	
	PostDocuments_$(vPeriod):
	NoConcatenate
	LOAD 
		[ID моніторингу],
		AutoNumber([ID моніторингу], 'MonitoringId')+$(vPeriod)*$(MulKey) as MonitoringIdKey,
		PostHash,
		[Автор документа повідомлень],
		[Документ повідомлень],
		[Посилання на документ повідомлень],
		PostDocFormat,
		[Дата час публікації документа повідомлень],
		[ID повідомлення],
		[ID документа повідомлень],
		AutoNumber([ID моніторингу]&'|'&[ID повідомлення]&'|'&[ID документа повідомлень], 'PostDocId')+$(vPeriod)*$(MulKey) as PostDocId,
		[Дата час зміни документа повідомлень]
	Resident PostDocuments_
	WHERE TestFlag <> 1;
	
	DROP Table PostDocuments_;
	
	STORE PostDocuments_$(vPeriod) into $(TRN_QVD_PATH)MonitoringPostDocuments_$(vPeriod).qvd (qvd);
	DROP Table PostDocuments_$(vPeriod);

NEXT

DROP Table PostDocuments_TMP;

// Документи результату усунення порушень
EliminationResolutionDocuments_TMP:
LOAD	[hash_u3] as EliminationResolutionHash,
	[author_u5] as [Автор документа результату усунення порушень],
	[title_u4] as [Документ результату усунення порушень],
	[url_u3] as [Посилання на документ результату усунення порушень],
	[format_u3] as EliminationResolutionDocFormat,
	$(vDateConvert([datePublished_u7])) as [Дата час публікації документа результату усунення порушень],
	[id_u4] as [ID документа результату усунення порушень],
	$(vDateConvert([dateModified_u3])) as [Дата час зміни документа результату усунення порушень],
	[__FK_documents_u3] AS [__KEY_eliminationResolution]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_documents_u3]);

Left Join (EliminationResolutionDocuments_TMP)
LOAD	
	[__KEY_eliminationResolution],
	[__FK_eliminationResolution] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_eliminationResolution]);

Left Join (EliminationResolutionDocuments_TMP)
LOAD	
	[id_u8] as [ID моніторингу],
	Mid([monitoring_id], 6, 4) as Year_Period,
	if(Lower([mode])='test', 1, 0) as TestFlag,
	[__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_data]);

DROP Fields __KEY_data, __KEY_eliminationResolution From EliminationResolutionDocuments_TMP;

FOR Each vPeriod in FieldValueList('YearPeriod') 

	EliminationResolutionDocuments_:
	NoConcatenate
	LOAD
		EliminationResolutionHash,
		[Автор документа результату усунення порушень],
		[Документ результату усунення порушень],
		[Посилання на документ результату усунення порушень],
		EliminationResolutionDocFormat,
		[Дата час публікації документа результату усунення порушень],
		[ID документа результату усунення порушень],
		[Дата час зміни документа результату усунення порушень],
		[ID моніторингу],
		[ID моніторингу] as [ID моніторингу Orig],
		TestFlag
	Resident EliminationResolutionDocuments_TMP
	Where Year_Period = $(vPeriod);	
	
	IF NOT IsNull(FileSize('$(TRN_QVD_PATH)MonitoringEliminationResolutionDocuments_$(vPeriod).qvd')) THEN
		Concatenate (EliminationResolutionDocuments_)
		LOAD
			EliminationResolutionHash,
			[Автор документа результату усунення порушень],
			[Документ результату усунення порушень],
			[Посилання на документ результату усунення порушень],
			EliminationResolutionDocFormat,
			[Дата час публікації документа результату усунення порушень],
			[ID документа результату усунення порушень],
			[Дата час зміни документа результату усунення порушень],
			[ID моніторингу]
		FROM [$(TRN_QVD_PATH)MonitoringEliminationResolutionDocuments_$(vPeriod).qvd] (qvd)
		WHERE NOT EXISTS([ID моніторингу Orig], [ID моніторингу]);
	ENDIF	 
	
	EliminationResolutionDocuments_$(vPeriod):
	NoConcatenate
	LOAD 
		[ID моніторингу],
		AutoNumber([ID моніторингу], 'MonitoringId')+$(vPeriod)*$(MulKey) as MonitoringIdKey,
		EliminationResolutionHash,
		[Автор документа результату усунення порушень],
		[Документ результату усунення порушень],
		[Посилання на документ результату усунення порушень],
		EliminationResolutionDocFormat,
		[Дата час публікації документа результату усунення порушень],
		[ID документа результату усунення порушень],
		AutoNumber([ID моніторингу]&'|'&[ID документа результату усунення порушень], 'EliminationResolutionDocId')+$(vPeriod)*$(MulKey) as EliminationResolutionDocId,
		[Дата час зміни документа результату усунення порушень]
	Resident EliminationResolutionDocuments_
	WHERE TestFlag <> 1;
	
	DROP Table EliminationResolutionDocuments_;
	
	STORE EliminationResolutionDocuments_$(vPeriod) into $(TRN_QVD_PATH)MonitoringEliminationResolutionDocuments_$(vPeriod).qvd (qvd);
	DROP Table EliminationResolutionDocuments_$(vPeriod);

NEXT

DROP Table EliminationResolutionDocuments_TMP;

// Документи рішення про висновок
ConclusionDocuments_TMP:
LOAD	[hash_u4] as ConclusionHash,
	[author_u4] as [Автор документа рішення про висновок],
	[title_u5] as [Документ рішення про висновок],
	[url_u4] as [Посилання на документ рішення про висновок],
	[format_u4] as ConclusionDocFormat,
	$(vDateConvert([datePublished_u10])) as [Дата час публікації документа рішення про висновок],
	[id_u7] as [ID документа рішення про висновок],
	$(vDateConvert([dateModified_u4])) as [Дата час зміни документа рішення про висновок],
	[__FK_documents_u4] AS [__KEY_conclusion]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_documents_u4]);

Left Join (ConclusionDocuments_TMP)
LOAD	
	[__KEY_conclusion],
	[__FK_conclusion] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_conclusion]);

Left Join (ConclusionDocuments_TMP)
LOAD	
	[id_u8] as [ID моніторингу],
	Mid([monitoring_id], 6, 4) as Year_Period,
	if(Lower([mode])='test', 1, 0) as TestFlag,
	[__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_data]);

DROP Fields __KEY_data, __KEY_conclusion From ConclusionDocuments_TMP;

FOR Each vPeriod in FieldValueList('YearPeriod') 

	ConclusionDocuments_:
	NoConcatenate
	LOAD
		ConclusionHash,
		[Автор документа рішення про висновок],
		[Документ рішення про висновок],
		[Посилання на документ рішення про висновок],
		ConclusionDocFormat,
		[Дата час публікації документа рішення про висновок],
		[ID документа рішення про висновок],
		[Дата час зміни документа рішення про висновок],
		[ID моніторингу],
		[ID моніторингу] as [ID моніторингу Orig],
		TestFlag
	Resident ConclusionDocuments_TMP
	Where Year_Period = $(vPeriod);	
	
	IF NOT IsNull(FileSize('$(TRN_QVD_PATH)MonitoringConclusionDocuments_$(vPeriod).qvd')) THEN
		Concatenate (ConclusionDocuments_)
		LOAD
			ConclusionHash,
			[Автор документа рішення про висновок],
			[Документ рішення про висновок],
			[Посилання на документ рішення про висновок],
			ConclusionDocFormat,
			[Дата час публікації документа рішення про висновок],
			[ID документа рішення про висновок],
			[Дата час зміни документа рішення про висновок],
			[ID моніторингу]
		FROM [$(TRN_QVD_PATH)MonitoringConclusionDocuments_$(vPeriod).qvd] (qvd)
		WHERE NOT EXISTS([ID моніторингу Orig], [ID моніторингу]);
	ENDIF	 
	
	ConclusionDocuments_$(vPeriod):
	NoConcatenate
	LOAD 
		[ID моніторингу],
		AutoNumber([ID моніторингу], 'MonitoringId')+$(vPeriod)*$(MulKey) as MonitoringIdKey,
		ConclusionHash,
		[Автор документа рішення про висновок],
		[Документ рішення про висновок],
		[Посилання на документ рішення про висновок],
		ConclusionDocFormat,
		[Дата час публікації документа рішення про висновок],
		[ID документа рішення про висновок],
		AutoNumber([ID моніторингу]&'|'&[ID документа рішення про висновок], 'ConclusionDocId')+$(vPeriod)*$(MulKey) as ConclusionDocId,
		[Дата час зміни документа рішення про висновок]
	Resident ConclusionDocuments_
	WHERE TestFlag <> 1;
	
	DROP Table ConclusionDocuments_;
	
	STORE ConclusionDocuments_$(vPeriod) into $(TRN_QVD_PATH)MonitoringConclusionDocuments_$(vPeriod).qvd (qvd);
	DROP Table ConclusionDocuments_$(vPeriod);

NEXT

DROP Table ConclusionDocuments_TMP;
///$tab 4 Offset Clean
DROP TABLE RestConnectorMasterTable;

// Если обновление данных без ошибок - сохранить новый Offset,
// иначе при следующей перезагрузке обновлять данные со старого Offseta

OffsetTable_Mon:
LOAD Distinct
	 LastValue(MHUri) as uri
Resident MonHeaders;	 

STORE OffsetTable_Mon INTO  $(DIC_QVD_PATH)OffsetTable_Mon.txt (txt); 
DROP Table OffsetTable_Mon;

DROP Table MonHeaders;

//
NEXT vBatchNo_Mon;
//

DROP Table BatchTable_Mon;

// Сохранение флага успешности текущей перезагрузки
ReloadMonCreator:
LOAD * Inline [
ReloadMonFlag
1
];

STORE ReloadMonCreator into $(DIC_QVD_PATH)ReloadMonCreator.txt (txt);

DROP Table ReloadMonCreator;
///$tab Exit Script


Exit Script;
