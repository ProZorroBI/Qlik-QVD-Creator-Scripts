///$tab Main
//V3.0
SET ThousandSep=' ';
SET DecimalSep=',';
SET MoneyThousandSep=' ';
SET MoneyDecimalSep=',';
SET MoneyFormat='# ##0,00 ₴;-# ##0,00 ₴';
SET TimeFormat='h:mm:ss';
SET DateFormat='DD.MM.YYYY';
SET TimestampFormat='DD.MM.YYYY h:mm:ss[.fff]';
SET MonthNames='янв;фев;мар;апр;май;июн;июл;авг;сен;окт;ноя;дек';
SET DayNames='Пн;Вт;Ср;Чт;Пт;Сб;Вс';

LET vStartPeriod = MakeDate(2015, 2, 1);
LET vEndPeriod = Today(1) + 6; // Курсы валют выставляются на будущую дату следующего или послепраздничного дня

LET vCurrentDate = Today(1);

SET DIC_QVD_PATH = '..\04_DataBase\02_QVD_DB\01_Dictionary\';
SET TRN_QVD_PATH = '..\04_DataBase\02_QVD_DB\02_Transaction\';
SET FILES_PATH = '..\04_DataBase\01_DataFiles\';

SET R_FILES_PATH = 'C:/QlikView/04_DataBase/01_DataFiles';

SET vBatchLimit = '?limit=1000';
SET vBatchLimit_C = '?limit=1000';
SET vMode = '&mode=_all_';
SET vMethod = 'get';

// Шаг  изменения пачек (чем больше число, тем реже перезаписываются QVD файлы) vPageSize x vStep
SET vStep = 5;

SET vBaseURL = 'https://public.api.openprocurement.org/api/0/tenders'; // Live 
SET vBaseURL_C = 'https://public.api.openprocurement.org/api/0/contracts'; 

//SET vBaseURL = 'https://lb.api-sandbox.openprocurement.org/api/0.11/tenders'; // SandBox

// Ф-и преобразования даты и времени
//SET vDateConvert = "Date#(Left($1, 10), 'YYYY-MM-DD')+Time#(Mid($1, 12, 8), 'hh:mm:ss')+if(Right($1, 6)='+00:00', Time#(if(Date#(Left($1, 10), 'YYYY-MM-DD')>Floor(WeekEnd(MakeDate(Left($1, 4),3,25))) AND Date#(Left($1, 10), 'YYYY-MM-DD')<Floor(WeekEnd(MakeDate(Left($1, 4),10,25))), 3, 2), 'h'), 0)";

SET vDateConvert = "TimeStamp(ConvertToLocalTime($1))"; 

// Множитель для образования ключа в периодах
SET MulKey = 1000000000;

// Файл со справочниками Гугл таблица
SET vPZOrgURL = 'https://docs.google.com/spreadsheets/d/11K8M9CjC2QcPkRDdzJLeI6C9tC6SSMfV4Z71fhuzSE8/export?format=xlsx';

SET vHelpURL = 'https://docs.google.com/spreadsheets/d/10_EYMciEo_RGk5Ng0FsVgi_iWGpAnj77S2NFFcaMslg/export?format=xlsx'; //перевод хэлпов

SET vGPADictionary ='https://docs.google.com/spreadsheets/u/1/d/1LEy18iO2f0KH0PBmmEthyCwDaQI4D594fwabunFsnAA/export?format=xlsx';

// Адреса справочников доноров
//SET vFundersURLua ='http://standards.openprocurement.org/codelists/tender-funders/ua.json';
//SET vFundersURLen ='http://standards.openprocurement.org/codelists/tender-funders/en.json';
//SET vFundersURLru ='http://standards.openprocurement.org/codelists/tender-funders/ru.json';

SET vFundersURLua ='https://prozorroukr.github.io/standards/codelists/tender-funders/ua.json';
SET vFundersURLen ='https://prozorroukr.github.io/standards/codelists/tender-funders/en.json';
SET vFundersURLru ='https://prozorroukr.github.io/standards/codelists/tender-funders/ru.json';

// Справочник черного списка АМКУ
SET vBLAMKU = 'http://www.amc.gov.ua/amku/doccatalog/document?id=133394&schema=main';

// Справочник регулярных выражений и причин разрыва договоров
SET vRegExpFile = 'https://docs.google.com/spreadsheets/d/1Xmxr6PiMuHEDDAQYRrlH97VoWf-vOYV4_T-VXwBZ9Os/export?format=xlsx';

// Справочник ДРЛЗ
SET vDRLZUrl = 'http://www.drlz.com.ua/ibp/zvity.nsf/all/zvit/$file/reestr.csv';
SET vDRLZstaticUrl = 'https://docs.google.com/spreadsheets/d/1B-6muSsRA20buCAoBpxeW0AvplRYdKCDabVYCa0n9xM/export?format=xlsx&id=1B-6muSsRA20buCAoBpxeW0AvplRYdKCDabVYCa0n9xM';

// Справочник МНН
SET vINNinNP = 'https://docs.google.com/spreadsheets/d/1y5zkYauWA2SyxmkiYTZuJ_suEqYYQLZUTYal9bNiRaU/gviz/tq?tqx=out:html&tq&gid=1174057939';

//SET vLoadNow = 0; // 1 - Безусловная перезагрузка курсов валют, справочника единиц измерений, таблиц переводов и справочника НГ; 0 - обычный режим

SET vLoadCPVDKPP = 1; // 1 - загрузка с веб, 0 - перезагрузка с qvd 

// Условие сохранения QVD файлов для Планов
//LET vPlanSave = if( Match(Hour(Now(1)), 0, 1, 22, 23), true(), false() );
//LET vPlanSave = if( Hour(Now(1))>=10 AND Hour(Now(1))<=22, true(), false() );
LET vPlanSave = 1; // Безусловно формировать файлы

SET vELetters = '!"#$%&''()*+,-./:;<=>?@[\]^_`{|}~–';
SET vPLetters = '0123456789qwertyuiopasdfghjklzxcvbnmйцукенгшщзхїфівапролджєячсмитьбюъыэ ';


//LET vDelayTime = Round(600000*Rand());

//LET vTimeOut = Interval(vDelayTime/(1000*60*60*24), 'm:ss');

//TRACE TimeOut = $(vTimeOut);

//SLEEP $(vDelayTime);

//Exit SCRIPT;
///$tab 1 Procedures
// =========================================================

// Доп. процедуры 

// Настройка дополнительной повторной перезагрузки данных за прошедшие сутки с 05:00
SUB ADD_TENDER_RELOAD

	IF NOT Match( Hour(Now(1)), 0 ) AND BackupFlag=0 THEN
		SET BackupFlag = 1;
	ENDIF
	
	IF Match( Hour(Now(1)), 0 ) AND BackupFlag=1  THEN
	
		OffsetTable:
		LOAD 
				Left(uri, Index(uri, 'offset=')+6)&Date(Today(1)-1, 'YYYY-MM-DD')&'T05%3A00%3A00' as uri
		FROM
		$(DIC_QVD_PATH)OffsetTable.txt
		(txt, utf8, embedded labels, delimiter is '\t', msq);
		
		STORE OffsetTable INTO  $(DIC_QVD_PATH)OffsetTable.txt (txt); 
		DROP Table OffsetTable;
		
		SET BackupFlag = 0;
	
	ENDIF

ENDSUB;

// Настройка дополнительной повторной перезагрузки данных за прошедшие сутки с 05:00
SUB ADD_CONTRACT_RELOAD

	IF NOT Match( Hour(Now(1)), 0 ) AND BackupFlag_C=0 THEN
		SET BackupFlag_C = 1;
	ENDIF
	
	IF Match( Hour(Now(1)), 0 ) AND BackupFlag_C=1 THEN
	
		OffsetTableContracts:
		LOAD 
				Left(uri, Index(uri, 'offset=')+6)&Date(Today(1)-1, 'YYYY-MM-DD')&'T05%3A00%3A00' as uri
		FROM
		$(DIC_QVD_PATH)OffsetTableContracts.txt
		(txt, utf8, embedded labels, delimiter is '\t', msq);
		
		STORE OffsetTableContracts INTO  $(DIC_QVD_PATH)OffsetTableContracts.txt (txt); 
		DROP Table OffsetTableContracts;
		
		SET BackupFlag_C = 0;
	
	ENDIF

ENDSUB;

// Процедура создания таблицы со ставками 
SUB LoadRound(StartRange, EndRange)
	Range_Tmp:
	LOAD 
		 @1 as FieldNames, 
	     @2 as FieldValues, 
	     if(@1 like '- *' OR @1 like 'turn_*', RangeSum(1, Peek(GrID, -1, 'Range_Tmp')), Peek(GrID, -1, 'Range_Tmp')) as GrID
	Resident Auction_Tmp
	Where AuditLineNo >= $(StartRange) AND AuditLineNo <= $(EndRange);
	
	RangeTmp:
	NoConcatenate
	LOAD
		 ApplyMap('MapTable', FieldNames) as FieldNames,
		 FieldValues,
		 GrID
	Resident Range_Tmp	 
	Where NOT FieldNames Like 'turn_*';
	
	DROP Table Range_Tmp;
	
	roundTmp:
	LOAD * Inline [
	IDBid, Дата предложения раунда, Сумма раунда, Приведенная цена, Коэффициент коррекции, Дата предложения раунда доп, contractDurationDays, contractDurationYears, yearlyPaymentsPercentage 
	];
	
	RangeTmp1:
	LOAD * INLINE [GrID];
	
	FOR Each vFieldName in FieldValueList('FieldNames')
	
		Outer Join (RangeTmp1)
		LOAD
			GrID,
			FieldValues as [$(vFieldName)]
		Resident RangeTmp
		Where FieldNames = '$(vFieldName)';		
	
	NEXT vFieldName
	
	DROP Field GrID From RangeTmp1;
	
	Concatenate (roundTmp)
	LOAD 
		*
	Resident RangeTmp1;	
	
	DROP Table RangeTmp1;
	
	round:
	NoConcatenate
	LOAD 
		IDBid,
		[Сумма раунда],
		[Приведенная цена], 
		[Коэффициент коррекции],
		Alt([Дата предложения раунда доп], [Дата предложения раунда]) as [Дата предложения раунда],
		contractDurationDays,
		contractDurationYears,
		yearlyPaymentsPercentage
	Resident roundTmp;
	
	DROP Table roundTmp;
	
	DROP Table RangeTmp;

ENDSUB

//================ Translate Procedure ====================
SET vTranslKey = ****; // Ключ от ТИУ С. Павлюк

//// Время жизни токена 8 минут (макс 10 минут) // OLD version
//SET vTokenTTL = 0,005555;
//
//// Процедура получения токена для последующих запросов на переод
//SUB GETToken
//
//TRACE;
//TRACE Getting/Updating Token;
//
//CUSTOM CONNECT TO "Provider=QvRestConnector.exe;url=https://api.cognitive.microsoft.com/sts/v1.0/issueToken;sendExpect100Continue=True;checkResponseTypeOnTestConnection=true;authSchema=anonymous;skipServerCertificateValidation=1;timeout=10000;method=POST;autoDetectResponseType=true;keyGenerationStrategy=3;useWindowsAuthentication=false;forceAuthenticationType=0;useCertificate=No;certificateStoreLocation=CurrentUser;certificateStoreName=My;queryHeaders=Ocp-Apim-Subscription-Key%2$(vTranslKey);PaginationType=None;XUserId=***;XPassword=***;";
//
//RestConnectorMasterTable:
//SQL SELECT 
//	"col_1"
//FROM CSV (header off, delimiter ",", quote """") "CSV_source";
//
//LET vToken = 'Bearer '&Peek('col_1', -1, 'RestConnectorMasterTable');
//LET vTokenTime = Now(1); 
//DROP TABLE RestConnectorMasterTable;
//
//ENDSUB;


// Процедура перевода (переводимое поле, таблица, переведенное поле)
SUB TRANSLATE(FieldName_, TableName_, outputFieldName_)

	IF FileSize('$(FILES_PATH)SymbolCount.txt') > 0 THEN 
		SymbolCount:
		LOAD SymbolCount
		FROM $(FILES_PATH)SymbolCount.txt
		(txt, utf8, embedded labels, delimiter is '\t', msq);
		
		LET vSymbolCount = Peek('SymbolCount', -1, 'SymbolCount');	 
		
		DROP Table SymbolCount; 
	ENDIF
	
	LET vTableRows = NoOfRows('$(TableName_)');
	
	CUSTOM CONNECT TO "Provider=QvRestConnector.exe;url=https://api.cognitive.microsofttranslator.com/translate;sendExpect100Continue=True;checkResponseTypeOnTestConnection=true;authSchema=anonymous;skipServerCertificateValidation=1;timeout=300;method=POST;autoDetectResponseType=true;keyGenerationStrategy=3;useWindowsAuthentication=false;useCertificate=No;certificateStoreLocation=CurrentUser;certificateStoreName=My;PaginationType=None;XUserId=***;XPassword=***;"; 
	
	FOR i=0 to $(vTableRows)-1
		
		LET vStr2Transl= Replace(Replace(Peek('$(FieldName_)',$(i), '$(TableName_)'), '"', 'ʺ'), '\', '/');	//значения строки для перевода
		LET vStr = Peek('$(FieldName_)',$(i), '$(TableName_)');	                //оригинальные значения поля (до replace)
		LET vStringLenth = Len('$(vStr2Transl)');				//коичество символов в строке
		
		LET vSymbolCount = $(vSymbolCount) + $(vStringLenth);
		
		SymbolCount:
		LOAD
			$(vSymbolCount) as SymbolCount
		AutoGenerate 1;
		
		STORE SymbolCount into $(FILES_PATH)SymbolCount.txt (txt); 
		DROP Table SymbolCount; 
		
		// https://docs.microsoft.com/en-us/azure/cognitive-services/translator/migrate-to-v3
		RestConnectorMasterTable:
		SQL SELECT 
			"__KEY_root",
			(SELECT 
				"text",
				"to",
				"__FK_translations"
			FROM "translations" FK "__FK_translations")
		FROM JSON (wrap on) "root" PK "__KEY_root"
		WITH CONNECTION (
		HTTPHEADER "Ocp-Apim-Subscription-Key" "$(vTranslKey)",
		HTTPHEADER "Content-Type" "application/json",
		QUERY "api-version" "3.0",
		QUERY "from" "uk",
		QUERY "to" "en",
		BODY "[{""text"":""$(vStr2Transl)""}]"
		);
		
		Text:
		LOAD
			  [text] as Translation,
			  '$(vStr)' as FieldName
		RESIDENT RestConnectorMasterTable
		WHERE NOT IsNull([__FK_translations]);
		
		DROP Table RestConnectorMasterTable;
	
	NEXT i;
	
	Left Join ($(TableName_))
	LOAD 
		 FieldName as $(FieldName_),
		 Translation as $(outputFieldName_)
	Resident Text;
	
	DROP Table Text;

ENDSUB

// Процедура получения ссылок от сервиса YouControl (поле с идентификатором (ЕГРПОУ), таблица, название поля со ссылкой от YouControl, название поля с кодом ответа)
//ТЗ https://docs.google.com/document/d/
SUB GETYCLINK(CodeField_, TableName_, YCLink_, RespCode_)

	CUSTOM CONNECT TO "Provider=QvRestConnector.exe;url=https://youcontrol.com.ua/api/card.php?login%2***&password%2***&section%2open_data;sendExpect100Continue=True;checkResponseTypeOnTestConnection=true;authSchema=anonymous;skipServerCertificateValidation=1;timeout=300;method=GET;autoDetectResponseType=true;keyGenerationStrategy=3;useWindowsAuthentication=false;useCertificate=No;certificateStoreLocation=CurrentUser;certificateStoreName=My;queryParameters=code%214308500;PaginationType=None;XUserId=***;XPassword=***;";
	
	SET vGetYCLinkIter = 0;
	
	FOR Each vTendererCode in FieldValueList('$(CodeField_)')
	
		RestConnectorMasterTableYCurl:
		SQL SELECT 
			"url",
			"responseCode"
		FROM JSON (wrap on) "root"
		WITH CONNECTION (
		QUERY "code" "$(vTendererCode)"
		);
		
		YCurl:
		LOAD
			"url" as [$(YCLink_)],
			"responseCode" as [$(RespCode_)],
			Text('$(vTendererCode)') as [$(CodeField_)]
		Resident RestConnectorMasterTableYCurl;	 
		
		DROP Table RestConnectorMasterTableYCurl;
		// For Debug
		LET vGetYCLinkIter = vGetYCLinkIter + 1;
		
		IF vGetYCLinkIter = 1000 THEN 
		
			STORE YCurl into $(FILES_PATH)YCurl.qvd (qvd);
			
			LET vGetYCLinkIter = 0;
		
		ENDIF
	
	NEXT
	
	Left Join ($(TableName_))
	LOAD
		 [$(CodeField_)],
		 [$(YCLink_)],
		 [$(RespCode_)]
	Resident 	YCurl;
	
	// For Debug
	STORE YCurl into $(FILES_PATH)YCurl.qvd (qvd);
	DROP Table YCurl;

ENDSUB

// Процедура перегенерации ключевых полей в файлах транзакций
SUB QVDIDCreator(TableName, DropFldList, CreateFldList)
	
	IF NOT IsNull(FileSize('$(TRN_QVD_PATH)$(TableName)_$(vPeriod).qvd')) THEN
		$(TableName)_:
		LOAD 
			*
		FROM [$(TRN_QVD_PATH)$(TableName)_$(vPeriod).qvd] (qvd);
		
		DROP Fields $(DropFldList);
		
		$(TableName):
		LOAD 
			 *,
		     $(CreateFldList)
		Resident $(TableName)_;
		
		DROP Table $(TableName)_;
		STORE $(TableName) into [$(TRN_QVD_PATH)$(TableName)_$(vPeriod).qvd] (qvd);
		DROP Table $(TableName);
	ENDIF

ENDSUB
///$tab 2 Start Control

IF NOT IsNull(FileSize('$(DIC_QVD_PATH)StartControl.txt')) THEN

	StartControl:
	LOAD StartControl
	FROM
	$(DIC_QVD_PATH)StartControl.txt
	(txt, utf8, embedded labels, delimiter is ',', msq);
	
	LET vStartControl = Peek('StartControl', -1, 'StartControl');
	
	IF $(vStartControl) = 1 THEN
	
		TRACE WARNING!!! Data Model is reloading now!;
	
	EXIT SCRIPT;
	
	ENDIF

ENDIF
///$tab 3 Tender ID

// Очистка периодов во внешнем файле для возможности его использования в договорах и в др. загрузчиках
YearList:
LOAD * Inline [
YearPeriod
];

STORE YearList into $(FILES_PATH)YearList.txt (txt);
DROP Table YearList;

// Загрузка порции индентификаторов тендеров с момента последней метки времени
IF NOT IsNull(FileSize('$(DIC_QVD_PATH)OffsetTable.txt')) THEN
	OffsetTable:
	LOAD uri
	FROM
	$(DIC_QVD_PATH)OffsetTable.txt
	(txt, utf8, embedded labels, delimiter is ',', msq);
	
	LET vURL = Peek('uri', -1, 'OffsetTable');
	DROP Table OffsetTable;
	
	ELSE
	
	LET vURL = vBaseURL&vBatchLimit&vMode;
ENDIF

SET RowsQtyTenderHeaders = 0;


TenderHeadersAll:
LOAD * Inline [
TenderId, TenderModificateDateTime, THUri
];

CUSTOM CONNECT TO "Provider=QvRestConnector.exe;url=$(vBaseURL);sendExpect100Continue=True;checkResponseTypeOnTestConnection=true;authSchema=anonymous;skipServerCertificateValidation=1;timeout=30;method=$(vMethod);autoDetectResponseType=true;keyGenerationStrategy=3;useWindowsAuthentication=false;useCertificate=No;certificateStoreLocation=CurrentUser;certificateStoreName=My;PaginationType=Custom;XUserId=***;XPassword=***;";

DO

	TRACE;
	TRACE $(vURL);
	
	RestConnectorMasterTable:
	SQL SELECT 
		"__KEY_root",
		(SELECT 
			"path",
			"uri",
			"offset",
			"__FK_next_page"
		FROM "next_page" FK "__FK_next_page"),
		(SELECT 
			"id",
			"dateModified",
			"__FK_data"
		FROM "data" FK "__FK_data")
	FROM JSON (wrap on) "root" PK "__KEY_root"
	WITH CONNECTION(URL "$(vURL)");
	
	
	OffsetTable:
	LOAD [path],
		 [uri],
		 [offset]
	RESIDENT RestConnectorMasterTable
	WHERE NOT IsNull([__FK_next_page]);
	
	
	TenderHeadersTmp:
	LOAD [id],
		 [dateModified]
	RESIDENT RestConnectorMasterTable
	WHERE NOT IsNull([__FK_data]);
	
	DROP TABLE RestConnectorMasterTable;
	
	LET vURL = Peek('uri', -1, 'OffsetTable');
	LET RowsQtyTenderHeaders = NoOfRows('TenderHeadersTmp');
	
	IF $(RowsQtyTenderHeaders) > 0 THEN
		Concatenate (TenderHeadersAll)
		LOAD
			[id] as TenderId,
			Timestamp($(vDateConvert(dateModified))) as TenderModificateDateTime,
			'$(vURL)' as THUri
		Resident TenderHeadersTmp;	
	ENDIF;
	
	IF $(RowsQtyTenderHeaders) <> 0 THEN
		DROP Table OffsetTable;
	ENDIF;
	
	DROP Table TenderHeadersTmp;

LOOP WHILE $(RowsQtyTenderHeaders) > 0;


//Исключение записей с одинковыми идентификаторами тендеров
TenderHeaders:
NoConcatenate
LOAD
	TenderId,
	LastValue(TenderModificateDateTime) as TenderModificateDateTime,
	LastValue(THUri) as THUri
Resident TenderHeadersAll	
Group by TenderId
Order By TenderModificateDateTime;

DROP Table TenderHeadersAll;

STORE TenderHeaders into $(FILES_PATH)TenderHeaders.qvd (qvd); // For Debug

LET AllRowsQty = NoOfRows('TenderHeaders');

STORE OffsetTable INTO  $(FILES_PATH)OffsetTable.txt (txt); // For Debug
DROP Table OffsetTable;

//Если не было новых идентификаторов - выход
IF $(AllRowsQty) = 0 THEN
	TRACE WARNING! No tenders changed;
	
	// Флаг не перегружать модель
	ReloadModel:
	LOAD * Inline [
	ReloadModelFlag
	0
	];
	
	STORE ReloadModel INTO  $(DIC_QVD_PATH)ReloadModel.txt (txt);	 
	
	CALL ADD_TENDER_RELOAD;
	
	// Сохранение данных для Планов
	IF vPlanSave THEN
		
		FOR Each vFileName in FileList('$(TRN_QVD_PATH)Tender_????.qvd')
			LET vYearPeriod = TextBetween('$(vFileName)', 'Tender_','.qvd');
			// Проверка изменения времени файла тендеров или отсутствия файла для планов
			IF FileTime('$(vFileName)') > FileTime('$(TRN_QVD_PATH)Tender_P_$(vYearPeriod).qvd') OR IsNull(FileSize('$(TRN_QVD_PATH)Tender_P_$(vYearPeriod).qvd')) THEN
				Tender:
				LOAD ТерминальнаяДатаТендера, [Начало периода уточнений], IDTenderOrig, IDOrganizatorOrig, СтатусТендера, Идентификатор, procurementMethodType, stage2TenderID
				From [$(vFileName)] (qvd);
				STORE  Tender into $(TRN_QVD_PATH)Tender_P_$(vYearPeriod).qvd (qvd);
				DROP Table Tender;
			ENDIF
		NEXT
		
		FOR Each vFileName in FileList('$(TRN_QVD_PATH)Award_????.qvd')
			LET vYearPeriod = TextBetween('$(vFileName)', 'Award_','.qvd');
			// Проверка изменения времени файла тендеров или отсутствия файла для планов
			IF FileTime('$(vFileName)') > FileTime('$(TRN_QVD_PATH)Award_P_$(vYearPeriod).qvd') OR IsNull(FileSize('$(TRN_QVD_PATH)Award_P_$(vYearPeriod).qvd')) THEN
				Award:
				LOAD IDAward, KeyLotBid, IDTenderOrig, ДатаВремяЗакрытия, СтатусПротоколаОценки, IsLimitedAward
				From [$(vFileName)] (qvd);
				STORE  Award into $(TRN_QVD_PATH)Award_P_$(vYearPeriod).qvd (qvd);
				DROP Table Award;
			ENDIF
		NEXT
		
		FOR Each vFileName in FileList('$(TRN_QVD_PATH)Lot_????.qvd')
			LET vYearPeriod = TextBetween('$(vFileName)', 'Lot_','.qvd');
			// Проверка изменения времени файла тендеров или отсутствия файла для планов
			IF FileTime('$(vFileName)') > FileTime('$(TRN_QVD_PATH)Lot_P_$(vYearPeriod).qvd') OR IsNull(FileSize('$(TRN_QVD_PATH)Lot_P_$(vYearPeriod).qvd')) THEN	
				Lot:
				LOAD IDTenderOrig, IDLot, IDLotOrig, СтатусЛота, ВалютаЛота, СуммаЛота
				From [$(vFileName)] (qvd);
				STORE  Lot into $(TRN_QVD_PATH)Lot_P_$(vYearPeriod).qvd (qvd);
				DROP Table Lot;
			ENDIF
		NEXT
		
		FOR Each vFileName in FileList('$(TRN_QVD_PATH)TenderItem_????.qvd')
			LET vYearPeriod = TextBetween('$(vFileName)', 'TenderItem_','.qvd');
			// Проверка изменения времени файла тендеров или отсутствия файла для планов
			IF FileTime('$(vFileName)') > FileTime('$(TRN_QVD_PATH)TenderItem_P_$(vYearPeriod).qvd') OR IsNull(FileSize('$(TRN_QVD_PATH)TenderItem_P_$(vYearPeriod).qvd')) THEN
				TenderItem:
				LOAD IDTenderOrig, IDClassCPV 
				FROM [$(vFileName)] (qvd);
				STORE TenderItem into $(TRN_QVD_PATH)TenderItem_P_$(vYearPeriod).qvd (qvd);
				DROP Table TenderItem;
			ENDIF
		NEXT
		
		Organizator:
		LOAD IDOrganizatorOrig, ГородОрганизатора, РегионОрганизатора, Организатор, Organiser, ТелефонОрганизатора, ИндексОрганизатора, EmailОрганизатора, ПредставительОрганизатора, АдресОрганизатора
		From $(DIC_QVD_PATH)Organizator.qvd (qvd);
		STORE  Organizator into $(DIC_QVD_PATH)Organizator_P.qvd (qvd);
		DROP Table Organizator;
	ENDIF
	
	EXIT SCRIPT;
ENDIF


// Разбивка на порции для сохранения в QVD
TenderHeadersBase:
LOAD TenderId as TenderIdBase, 
     TenderModificateDateTime as TenderModificateDateTimeBase,
     THUri as THUriBase,
     if(IsNull(Previous(THUri)), 1, if(Previous(THUri)=THUri, Peek('BatchNo', -1, 'TenderHeadersBase'),  RangeSum(Peek('BatchNo', -1, 'TenderHeadersBase'), 1) )) as BatchNo
Resident  TenderHeaders
Order by TenderModificateDateTime;    

DROP Table TenderHeaders;

BatchTable:
LOAD 	 
	 Only(BatchNo) as Batch
Resident TenderHeadersBase
Group By BatchNo
Order By BatchNo;

LET vLastBatch = Peek('Batch', -1, 'BatchTable');
LET vFirstBatch = Peek('Batch', 0, 'BatchTable');


//
FOR vBatchNo =  $(vFirstBatch) to  $(vLastBatch) step vStep  
//

LET vBatchNoStep = $(vBatchNo) + vStep - 1;

TRACE BatchNo $(vBatchNo) - $(vBatchNoStep);

TenderHeaders:
NoConcatenate
LOAD TenderIdBase as TenderId, 
     THUriBase as THUri
Resident  TenderHeadersBase
Where BatchNo >= $(vBatchNo) AND BatchNo <= $(vBatchNoStep)
Order By BatchNo;

LET RowsQty = NoOfRows('TenderHeaders'); 
///$tab 4 TenderMasterTable
// За грузка в общую таблицу данных по тендерам (на основании полученных идентификаторов тендеров)

CUSTOM CONNECT TO "Provider=QvRestConnector.exe;url=$(vBaseURL);sendExpect100Continue=True;checkResponseTypeOnTestConnection=true;authSchema=anonymous;skipServerCertificateValidation=1;timeout=300;method=$(vMethod);autoDetectResponseType=true;keyGenerationStrategy=3;useWindowsAuthentication=false;useCertificate=No;certificateStoreLocation=CurrentUser;certificateStoreName=My;PaginationType=None;XUserId=***;XPassword=***;";

FOR Each vTenderId in FieldValueList('TenderId') 

	LET vURL = vBaseURL&'/'&vTenderId; 
	//LET vURL = 'https://public.api.openprocurement.org/api/0/tenders/f110e6d5387249fa95c7caba71087824';
	
	RestConnectorMasterTable:
	LOAD
		 *,
		 text([id_u11]) as [id_u11Txt],
		 text([id]) as [idTxt],
		 text([id_u23]) as [id_u23Txt],
		 text([id_u15]) as [id_u15Txt],
		 text([id_u0]) as [id_u0Txt],
		 text([id_u9]) as [id_u9Txt],
	//	 text([id_u32]) as [id_u32Txt],
		 text([id_u31]) as [id_u31Txt],
		 text([id_u35]) as [id_u35Txt],
		 text([id_u36]) as [id_u36Txt]
	;	
	SQL SELECT 
		"procurementMethod",
		"numberOfBids",
		"submissionMethod",
		"owner" AS "owner_u0",
		"title_en",
		"mode",
		"title_ru",
		"id" AS "id_u13",
		"description" AS "description_u4",
		"description_en",
		"title" AS "title_u4",
		"tenderID",
		"minimalStepPercentage" AS "minimalStepPercentage_u0",
		"fundingKind" AS "fundingKind_u0",
		"NBUdiscountRate",
		"yearlyPaymentsPercentageRange" AS "yearlyPaymentsPercentageRange_u0",
		"noticePublicationDate",
		"date" AS "date_u13",
		"dateModified" AS "dateModified_u3",
		"status" AS "status_u1",
		"procurementMethodType", 
		"submissionMethodDetails", 
		"awardCriteria",
		"auctionUrl",
		"procurementMethodRationale",
		"cause",
		"causeDescription",
		"stage2TenderID",
		"mainProcurementCategory",
		"__KEY_data",
		(SELECT 
			"currency" AS "currency_u11",
			"amount" AS "amount_u11",
			"valueAddedTaxIncluded" AS "valueAddedTaxIncluded_u9",
			"__FK_minValue_u0"
		FROM "minValue" FK "__FK_minValue_u0"),
//		Funders	
		(SELECT 
			"name_ru" AS "name_ru_u0",
			"name" AS "name_u17",
			"name_en" AS "name_en_u6",
			"__KEY_funders",
			"__FK_funders",
			(SELECT 
				"postalCode" AS "postalCode_u8",
				"countryName" AS "countryName_u8",
				"streetAddress" AS "streetAddress_u8",
				"region" AS "region_u8",
				"locality" AS "locality_u8",
				"__FK_address_u7"
			FROM "address" FK "__FK_address_u7"),
			(SELECT 
				"scheme" AS "scheme_u10",
				"id" AS "id_u36",
				"legalName" AS "legalName_u5",
				"__FK_identifier_u1"
			FROM "identifier" FK "__FK_identifier_u1"),
			(SELECT 
				"telephone" AS "telephone_u8",
				"url" AS "url_u18",
				"faxNumber" AS "faxNumber_u3",
				"name" AS "name_u18",
				"email" AS "email_u8",
				"__FK_contactPoint_u7"
			FROM "contactPoint" FK "__FK_contactPoint_u7")
		FROM "funders" PK "__KEY_funders" FK "__FK_funders"),
	// Guarantee Tender	
		(SELECT 
			"currency" AS "currency_u8",
			"amount" AS "amount_u8",
			"__FK_guarantee"
		FROM "guarantee" FK "__FK_guarantee"),
		
		(SELECT 
				"startDate" AS "startDate_u8",
				"endDate" AS "endDate_u8",
				"__FK_complaintPeriod_u0"
		FROM "complaintPeriod" FK "__FK_complaintPeriod_u0"),
		
		(SELECT 
			"startDate",
			"endDate",
			"__FK_awardPeriod"
		FROM "awardPeriod" FK "__FK_awardPeriod"),
		(SELECT 
			"startDate" AS "startDate_u0",
			"endDate" AS "endDate_u0",
			"__FK_enquiryPeriod"
		FROM "enquiryPeriod" FK "__FK_enquiryPeriod"),
		(SELECT 
			"startDate" AS "startDate_u9",
			"endDate" AS "endDate_u9",
			"__FK_qualificationPeriod"
		FROM "qualificationPeriod" FK "__FK_qualificationPeriod"),
	// Организатор	
		(SELECT 
			"name" AS "name_u0",
			"name_en",
			"kind",
			"__KEY_procuringEntity",
			"__FK_procuringEntity",
			(SELECT 
				"telephone",
				"availableLanguage",
				"url",
				"faxNumber",
				"name",
				"name_en" AS "name_en_u0",
				"name_ru",
				"email",
				"__FK_contactPoint"
			FROM "contactPoint" FK "__FK_contactPoint"),
			(SELECT 
				"telephone" AS "telephone_u6",
				"name_en" AS "name_en_u1",
				"name" AS "name_u14",
				"availableLanguage" AS "availableLanguage_u0",
				"email" AS "email_u6",
				"url" AS "url_u16",
				"faxNumber" AS "faxNumber_u2",
				"__FK_additionalContactPoints"
			FROM "additionalContactPoints" FK "__FK_additionalContactPoints"),
			(SELECT 
				"scheme",
				"id",
				"legalName",
				"legalName_en",
				"__FK_identifier"
			FROM "identifier" FK "__FK_identifier"),
	//		(SELECT 
	//			"scheme" AS "scheme_u8",
	//			"id" AS "id_u32",
	//			"legalName" AS "legalName_u4",
	//			"legalName_en" AS "legalName_en_u0",
	//			"__FK_additionalIdentifiers"
	//		FROM "additionalIdentifiers" FK "__FK_additionalIdentifiers"),
			(SELECT 
				"postalCode",
				"countryName",
				"streetAddress",
				"region",
				"locality",
				"__FK_address"
			FROM "address" FK "__FK_address")
		FROM "procuringEntity" PK "__KEY_procuringEntity" FK "__FK_procuringEntity"),
		(SELECT 
			"description",
			"title",
			"answer",
			"date",
			"dateAnswered" AS "dateAnswered_u2",
			"id" AS "id_u1",
			"questionOf",
			"relatedItem" AS "relatedItem_u0",
			"__KEY_questions",
			"__FK_questions",
			(SELECT 
				"name" AS "name_u2",
				"__KEY_author",
				"__FK_author",
				(SELECT 
					"telephone" AS "telephone_u0",
					"url" AS "url_u0",
					"name" AS "name_u1",
					"email" AS "email_u0",
					"__FK_contactPoint_u0"
				FROM "contactPoint" FK "__FK_contactPoint_u0"),
				(SELECT 
					"scheme" AS "scheme_u0",
					"id" AS "id_u0",
					"legalName" AS "legalName_u0",
					"__FK_identifier_u0"
				FROM "identifier" FK "__FK_identifier_u0"),
				(SELECT 
					"postalCode" AS "postalCode_u0",
					"countryName" AS "countryName_u0",
					"streetAddress" AS "streetAddress_u0",
					"region" AS "region_u0",
					"locality" AS "locality_u0",
					"__FK_address_u0"
				FROM "address" FK "__FK_address_u0")
			FROM "author" PK "__KEY_author" FK "__FK_author")
		FROM "questions" PK "__KEY_questions" FK "__FK_questions"),
		(SELECT 
			"format",
			"url" AS "url_u1",
			"title" AS "title_u0",
			"description" AS "description_u11",
			"documentOf",
			"documentType", 
			"datePublished",
			"dateModified",
			"id" AS "id_u2",
			"language",
			"relatedItem" AS "relatedItem_u1",
			"__FK_documents"
		FROM "documents" FK "__FK_documents"),
		(SELECT 
			"startDate" AS "startDate_u1",
			"endDate" AS "endDate_u1",
			"__FK_tenderPeriod"
		FROM "tenderPeriod" FK "__FK_tenderPeriod"),
		(SELECT 
			"startDate" AS "startDate_u2",
			"endDate" AS "endDate_u2",
			"__FK_auctionPeriod"
		FROM "auctionPeriod" FK "__FK_auctionPeriod"),
	// Award	
		(SELECT 
			"status" AS "status_u0",
			"bid_id",
			"date" AS "date_u0",
			"description" AS "description_u5",
			"title" AS "title_u5",
			"id" AS "id_u7",
			"lotID", 
			"eligible",
			"qualified",
	    	"__KEY_awards",
			"__FK_awards",
			(SELECT 
				"format" AS "format_u0",
				"url" AS "url_u2",
				"title" AS "title_u1",
				"description" AS "description_u12",
				"documentOf" AS "documentOf_u0",
				"documentType" AS "documentType_u0",
				"datePublished" AS "datePublished_u0",
				"dateModified" AS "dateModified_u0",
				"id" AS "id_u3",
				"language" AS "language_u0",
				"relatedItem" AS "relatedItem_u2",
				"__FK_documents_u0"
			FROM "documents" FK "__FK_documents_u0"),
			(SELECT 
				"startDate" AS "startDate_u3",
				"endDate" AS "endDate_u3",
				"__FK_complaintPeriod"
			FROM "complaintPeriod" FK "__FK_complaintPeriod"),
	// 	Suppliers (Tenderers)	from Awards
			(SELECT 
				"name" AS "name_u10",
				"name_en" AS "name_en_u4",
				"scale" AS "scale_u0",
				"__KEY_suppliers",
				"__FK_suppliers",
				(SELECT 
					"telephone" AS "telephone_u4",
					"url" AS "url_u10",
					"faxNumber" AS "faxNumber_u1",
					"name" AS "name_u11",
					"name_en" AS "name_en_u5",
					"email" AS "email_u4",
					"__FK_contactPoint_u4"
				FROM "contactPoint" FK "__FK_contactPoint_u4"),
				(SELECT 
					"scheme" AS "scheme_u6",
					"id" AS "id_u23",
					"legalName" AS "legalName_u3",
					"legalName_en" AS "legalName_en_u2",
					"__FK_identifier_u4"
				FROM "identifier" FK "__FK_identifier_u4"),
				(SELECT 
					"postalCode" AS "postalCode_u5",
					"countryName" AS "countryName_u5",
					"streetAddress" AS "streetAddress_u5",
					"region" AS "region_u5",
					"locality" AS "locality_u5",
					"__FK_address_u4"
				FROM "address" FK "__FK_address_u4")
			FROM "suppliers" PK "__KEY_suppliers" FK "__FK_suppliers"),
	
			(SELECT 
				"currency",
				"amount",
				"valueAddedTaxIncluded",
				"yearlyPaymentsPercentage" AS "yearlyPaymentsPercentage_u0",
				"amountPerformance" AS "amountPerformance_u0",
				"__KEY_value",
				"__FK_value",
				(SELECT 
					"days" AS "days_u0",
					"years" AS "years_u0",
					"__FK_contractDuration_u0"
				FROM "contractDuration" FK "__FK_contractDuration_u0"),
				(SELECT 
					"@Value" AS "@Value_u0",
					"__FK_annualCostsReduction_u0"
				FROM "annualCostsReduction" FK "__FK_annualCostsReduction_u0" ArrayValueAlias "@Value_u0")
			FROM "value" PK "__KEY_value" FK "__FK_value"),
	// Award Complaints		
			(SELECT 
				"status" AS "status_u8",
				"description" AS "description_u23",
				"title" AS "title_u20",
				"date" AS "date_u10",
				"dateSubmitted" AS "dateSubmitted_u0",
				"dateAnswered" AS "dateAnswered_u0",
				"dateEscalated" AS "dateEscalated_u0",
				"dateDecision" AS "dateDecision_u0",
				"dateCanceled" AS "dateCanceled_u0",
				"id" AS "id_u29",
				"complaintID" AS "complaintID_u0",
				"resolution" AS "resolution_u0",
				"resolutionType" AS "resolutionType_u0",
				"type" AS "type_u0",
				"satisfied" AS "satisfied_u0",
				"decision" AS "decision_u0",
				"cancellationReason" AS "cancellationReason_u0",
				"relatedLot" AS "relatedLot_u3",
				"tendererAction" AS "tendererAction_u0",
				"tendererActionDate" AS "tendererActionDate_u0",
				"acceptance" AS "acceptance_u0",
				"dateAccepted" AS "dateAccepted_u0",
				"rejectReason" AS "rejectReason_u0",
				"rejectReasonDescription" AS "rejectReasonDescription_u0",
				"reviewDate" AS "reviewDate_u0",
				"reviewPlace" AS "reviewPlace_u0",
				"__KEY_complaints_u0",
				"__FK_complaints_u0",
				(SELECT 
				"format" AS "format_u10",
				"url" AS "url_u15",
				"title" AS "title_u21",
				"description" AS "description_u24",
				"documentOf" AS "documentOf_u10",
				"documentType" AS "documentType_u10",
				"datePublished" AS "datePublished_u10",
				"dateModified" AS "dateModified_u11",
				"id" AS "id_u30",
				"language" AS "language_u10",
				"relatedItem" AS "relatedItem_u12",
				"__FK_documents_u7"
			FROM "documents" FK "__FK_documents_u7"),
			(SELECT 
				"name" AS "name_u12",
				"__KEY_author_u1",
				"__FK_author_u1",
				(SELECT 
					"telephone" AS "telephone_u5",
					"name" AS "name_u13",
					"email" AS "email_u5",
					"__FK_contactPoint_u5"
				FROM "contactPoint" FK "__FK_contactPoint_u5"),
				(SELECT 
					"scheme" AS "scheme_u7",
					"id" AS "id_u31",
					"__FK_identifier_u5"
				FROM "identifier" FK "__FK_identifier_u5"),
				(SELECT 
					"postalCode" AS "postalCode_u6",
					"countryName" AS "countryName_u6",
					"streetAddress" AS "streetAddress_u6",
					"region" AS "region_u6",
					"locality" AS "locality_u6",
					"__FK_address_u5"
				FROM "address" FK "__FK_address_u5")
			FROM "author" PK "__KEY_author_u1" FK "__FK_author_u1")
			FROM "complaints" PK "__KEY_complaints_u0" FK "__FK_complaints_u0")
		FROM "awards" PK "__KEY_awards" FK "__FK_awards"),
		
		(SELECT 
			"currency" AS "currency_u0",
			"amount" AS "amount_u0",
			"valueAddedTaxIncluded" AS "valueAddedTaxIncluded_u0",
			"__FK_minimalStep"
		FROM "minimalStep" FK "__FK_minimalStep"),
	// Items	
		(SELECT 
			"description" AS "description_u3",
			"id" AS "id_u16",
			"quantity",
			"relatedLot",
			"__KEY_items",
			"__FK_items",
			(SELECT 
				"latitude",
				"longitude",
				"__FK_deliveryLocation"
			FROM "deliveryLocation" FK "__FK_deliveryLocation"),
			(SELECT 
				"scheme" AS "scheme_u2",
				"description" AS "description_u1",
				"id" AS "id_u8",
				"__FK_classification"
			FROM "classification" FK "__FK_classification"),
			(SELECT 
				"scheme" AS "scheme_u3",
				"id" AS "id_u9",
				"description" AS "description_u2",
				"__FK_additionalClassifications"
			FROM "additionalClassifications" FK "__FK_additionalClassifications"),
			(SELECT 
				"postalCode" AS "postalCode_u2",
				"countryName" AS "countryName_u2",
				"streetAddress" AS "streetAddress_u2",
				"region" AS "region_u2",
				"locality" AS "locality_u2",
				"__FK_deliveryAddress"
			FROM "deliveryAddress" FK "__FK_deliveryAddress"),
			(SELECT 
				"startDate" AS "startDate_u4",
				"endDate" AS "endDate_u4",
				"__FK_deliveryDate"
			FROM "deliveryDate" FK "__FK_deliveryDate"),
			(SELECT 
				"code",
				"name" AS "name_u5",
				"__FK_unit"
			FROM "unit" FK "__FK_unit")
		FROM "items" PK "__KEY_items" FK "__FK_items"),
	// Bids	
		(SELECT 
			"owner",
			"date" AS "date_u1",
			"id" AS "id_u12",
			"participationUrl",
			"status" AS "status_u3",
			"subcontractingDetails",
			"selfEligible",
			"selfQualified",
			"__KEY_bids",
			"__FK_bids",
			(SELECT 
				"code" AS "code_u5",
				"value" AS "value_u0",
				"__FK_parameters"
			FROM "parameters" FK "__FK_parameters"),
			(SELECT 
				"format" AS "format_u2",
				"url" AS "url_u5",
				"confidentiality",
				"confidentialityRationale",
				"title" AS "title_u3",
				"description" AS "description_u13",
				"documentOf" AS "documentOf_u1",
				"documentType" AS "documentType_u1",
				"datePublished" AS "datePublished_u2",
				"dateModified" AS "dateModified_u2",
				"id" AS "id_u10",
				"language" AS "language_u1",
				"relatedItem" AS "relatedItem_u3",
				"__FK_documents_u2"
			FROM "documents" FK "__FK_documents_u2"),
			
			(SELECT 
				"format" AS "format_u6",
				"url" AS "url_u11",
				"confidentiality" AS "confidentiality_u0",
				"confidentialityRationale" AS "confidentialityRationale_u0",
				"title" AS "title_u15",
				"description" AS "description_u18",
				"documentOf" AS "documentOf_u6",
				"documentType" AS "documentType_u6",
				"datePublished" AS "datePublished_u6",
				"dateModified" AS "dateModified_u7",
				"id" AS "id_u24",
				"language" AS "language_u6",
				"relatedItem" AS "relatedItem_u8",
				"__FK_eligibilityDocuments"
			FROM "eligibilityDocuments" FK "__FK_eligibilityDocuments"),
			
			(SELECT 
				"format" AS "format_u7",
				"url" AS "url_u12",
				"confidentiality" AS "confidentiality_u1",
				"confidentialityRationale" AS "confidentialityRationale_u1",
				"title" AS "title_u16",
				"description" AS "description_u19",
				"documentOf" AS "documentOf_u7",
				"documentType" AS "documentType_u7",
				"datePublished" AS "datePublished_u7",
				"dateModified" AS "dateModified_u8",
				"id" AS "id_u25",
				"language" AS "language_u7",
				"relatedItem" AS "relatedItem_u9",
				"__FK_financialDocuments"
			FROM "financialDocuments" FK "__FK_financialDocuments"),
			
			(SELECT 
				"format" AS "format_u8",
				"url" AS "url_u13",
				"confidentiality" AS "confidentiality_u2",
				"confidentialityRationale" AS "confidentialityRationale_u2",
				"title" AS "title_u17",
				"description" AS "description_u20",
				"documentOf" AS "documentOf_u8",
				"documentType" AS "documentType_u8",
				"datePublished" AS "datePublished_u8",
				"dateModified" AS "dateModified_u9",
				"id" AS "id_u26",
				"language" AS "language_u8",
				"relatedItem" AS "relatedItem_u10",
				"__FK_qualificationDocuments"
			FROM "qualificationDocuments" FK "__FK_qualificationDocuments"),
			
			(SELECT 
				"currency" AS "currency_u1",
				"amount" AS "amount_u1",
				"valueAddedTaxIncluded" AS "valueAddedTaxIncluded_u1",
				"yearlyPaymentsPercentage" AS "yearlyPaymentsPercentage_u1",
				"amountPerformance" AS "amountPerformance_u1",
				"__KEY_value_u0",
				"__FK_value_u0",
				(SELECT 
					"days" AS "days_u1",
					"years" AS "years_u1",
					"__FK_contractDuration_u1"
				FROM "contractDuration" FK "__FK_contractDuration_u1"), 
				(SELECT 
					"@Value" AS "@Value_u1",
					"__FK_annualCostsReduction_u1"
				FROM "annualCostsReduction" FK "__FK_annualCostsReduction_u1" ArrayValueAlias "@Value_u1")
			FROM "value" PK "__KEY_value_u0" FK "__FK_value_u0"), 
			(SELECT 
				"name" AS "name_u7",
				"name_en" AS "name_en_u2",
				"scale",
				"__KEY_tenderers",
				"__FK_tenderers",
				(SELECT 
					"telephone" AS "telephone_u2",
					"url" AS "url_u6",
					"faxNumber" AS "faxNumber_u0",
					"name" AS "name_u6",
					"name_en" AS "name_en_u3",
					"email" AS "email_u2",
					"__FK_contactPoint_u2"
				FROM "contactPoint" FK "__FK_contactPoint_u2"),
				(SELECT 
					"scheme" AS "scheme_u4",
					"id" AS "id_u11",
					"legalName" AS "legalName_u2",
					"legalName_en" AS "legalName_en_u1",
					"__FK_identifier_u2"
				FROM "identifier" FK "__FK_identifier_u2"),
				(SELECT 
					"postalCode" AS "postalCode_u3",
					"countryName" AS "countryName_u3",
					"streetAddress" AS "streetAddress_u3",
					"region" AS "region_u3",
					"locality" AS "locality_u3",
					"__FK_address_u2"
				FROM "address" FK "__FK_address_u2")
			FROM "tenderers" PK "__KEY_tenderers" FK "__FK_tenderers"),
			(SELECT 
				"relatedLot" AS "relatedLot_u0",
				"date" AS "date_u7",
				"participationUrl" AS "participationUrl_u0",
				"subcontractingDetails" AS "subcontractingDetails_u0",
				"__KEY_lotValues",
				"__FK_lotValues",
				(SELECT 
					"currency" AS "currency_u6",
					"amount" AS "amount_u6",
					"valueAddedTaxIncluded" AS "valueAddedTaxIncluded_u6",
					"yearlyPaymentsPercentage" AS "yearlyPaymentsPercentage_u2",
					"amountPerformance" AS "amountPerformance_u2",
					"__KEY_value_u4",
					"__FK_value_u4",
					(SELECT 
						"days" AS "days_u2",
						"years" AS "years_u2",
						"__FK_contractDuration_u2"
					FROM "contractDuration" FK "__FK_contractDuration_u2"),
					(SELECT 
						"@Value" AS "@Value_u2",
						"__FK_annualCostsReduction_u2"
					FROM "annualCostsReduction" FK "__FK_annualCostsReduction_u2" ArrayValueAlias "@Value_u2")
				FROM "value" PK "__KEY_value_u4" FK "__FK_value_u4") 
			FROM "lotValues" PK "__KEY_lotValues" FK "__FK_lotValues")
		FROM "bids" PK "__KEY_bids" FK "__FK_bids"),
		
		(SELECT 
			"currency" AS "currency_u2",
			"amount" AS "amount_u2",
			"valueAddedTaxIncluded" AS "valueAddedTaxIncluded_u2",
			"__FK_value_u1"
		FROM "value" FK "__FK_value_u1"),
	// Complaints	
		(SELECT 
			"status" AS "status_u2",
			"description" AS "description_u6",
			"title" AS "title_u7",
			"date" AS "date_u2",
			"dateSubmitted",
			"dateAnswered",
			"dateEscalated",
			"dateDecision",
			"dateCanceled",
			"id" AS "id_u14",
			"complaintID",
			"resolution",
			"resolutionType",
			"type",
			"satisfied",
			"decision",
			"cancellationReason",
			"relatedLot" AS "relatedLot_u2",
			"tendererAction",
			"tendererActionDate",
			"acceptance",
			"dateAccepted",
			"rejectReason",
			"rejectReasonDescription",
			"reviewDate",
			"reviewPlace",
			"__KEY_complaints",
			"__FK_complaints",
			(SELECT 
				"format" AS "format_u3",
				"url" AS "url_u7",
				"title" AS "title_u8",
				"description" AS "description_u16",
				"documentOf" AS "documentOf_u4",
				"documentType" AS "documentType_u4",
				"datePublished" AS "datePublished_u3",
				"dateModified" AS "dateModified_u4",
				"id" AS "id_u18",
				"language" AS "language_u4",
				"relatedItem" AS "relatedItem_u6",
				"__FK_documents_u3"
			FROM "documents" FK "__FK_documents_u3"),
			(SELECT 
				"name" AS "name_u8",
				"__KEY_author_u0",
				"__FK_author_u0",
				(SELECT 
					"telephone" AS "telephone_u3",
					"name" AS "name_u9",
					"email" AS "email_u3",
					"__FK_contactPoint_u3"
				FROM "contactPoint" FK "__FK_contactPoint_u3"),
				(SELECT 
					"scheme" AS "scheme_u5",
					"id" AS "id_u15",
					"__FK_identifier_u3"
				FROM "identifier" FK "__FK_identifier_u3"),
				(SELECT 
					"postalCode" AS "postalCode_u4",
					"countryName" AS "countryName_u4",
					"streetAddress" AS "streetAddress_u4",
					"region" AS "region_u4",
					"locality" AS "locality_u4",
					"__FK_address_u3"
				FROM "address" FK "__FK_address_u3")
			FROM "author" PK "__KEY_author_u0" FK "__FK_author_u0")
		FROM "complaints" PK "__KEY_complaints" FK "__FK_complaints"),
	// Cancellation	
		(SELECT 
			"date" AS "date_u5",
			"id" AS "id_u17",
			"reason",
			"status" AS "status_u4",
			"cancellationOf",
			"relatedLot" AS "relatedLot_u1",
			"reasonType",
			"__KEY_cancellations",
			"__FK_cancellations",
			(SELECT 
				"format" AS "format_u4",
				"url" AS "url_u8",
				"title" AS "title_u9",
				"description" AS "description_u17",
				"documentOf" AS "documentOf_u5",
				"documentType" AS "documentType_u5",
				"datePublished" AS "datePublished_u4",
				"dateModified" AS "dateModified_u5",
				"id" AS "id_u19",
				"language" AS "language_u5",
				"relatedItem" AS "relatedItem_u7",
				"__FK_documents_u4"
			FROM "documents" FK "__FK_documents_u4")
		FROM "cancellations" PK "__KEY_cancellations" FK "__FK_cancellations"),
	// Features	
		(SELECT 
			"code" AS "code_u0",
			"featureOf",
			"relatedItem",
			"description" AS "description_u7",
			"title" AS "title_u10",
			"__KEY_features",
			"__FK_features",
			(SELECT 
				"description" AS "description_u8",
				"value",
				"title" AS "title_u11",
				"__FK_enum"
			FROM "enum" FK "__FK_enum")
		FROM "features" PK "__KEY_features" FK "__FK_features"),
	// Lots	
		(SELECT 
			"status" AS "status_u5",
			"description" AS "description_u9",
			"description_en" AS "description_en_u0",
			"date" AS "date_u14",
			"title" AS "title_u12",
			"title_en" AS "title_en_u0",
			"id" AS "id_u20",
			"auctionUrl" AS "auctionUrl_u0",
			"minimalStepPercentage",
			"fundingKind",
			"yearlyPaymentsPercentageRange",
			"__KEY_lots",
			"__FK_lots",
			(SELECT 
				"currency" AS "currency_u10",
				"amount" AS "amount_u10",
				"valueAddedTaxIncluded" AS "valueAddedTaxIncluded_u8",
				"__FK_minValue"
			FROM "minValue" FK "__FK_minValue"),
			(SELECT 
				"currency" AS "currency_u4",
				"amount" AS "amount_u4",
				"valueAddedTaxIncluded" AS "valueAddedTaxIncluded_u4",
				"__FK_minimalStep_u0"
			FROM "minimalStep" FK "__FK_minimalStep_u0"),
			(SELECT 
				"currency" AS "currency_u5",
				"amount" AS "amount_u5",
				"valueAddedTaxIncluded" AS "valueAddedTaxIncluded_u5",
				"__FK_value_u3"
			FROM "value" FK "__FK_value_u3"),
			(SELECT 
				"startDate" AS "startDate_u6",
				"endDate" AS "endDate_u6",
				"__FK_auctionPeriod_u0"
			FROM "auctionPeriod" FK "__FK_auctionPeriod_u0"),
	// Guarantee Lot	
			(SELECT 
				"currency" AS "currency_u9",
				"amount" AS "amount_u9",
				"__FK_guarantee_u0"
			FROM "guarantee" FK "__FK_guarantee_u0")
		FROM "lots" PK "__KEY_lots" FK "__FK_lots"),
	// Contracts
		(SELECT 
			"status" AS "status_u6",
			"awardID" AS "awardID_u1",
			"id" AS "id_u21",
			"contractID" AS "contractID_u0",
			"contractNumber" AS "contractNumber_u0",
			"description" AS "description_u10",
			"title" AS "title_u13",
			"dateSigned" AS "dateSigned_u0",
			"date" AS "date_u11",
			"__KEY_contracts_u0",
			"__FK_contracts_u0",
			(SELECT 
				"startDate" AS "startDate_u7",
				"endDate" AS "endDate_u7",
				"__FK_period_u0"
			FROM "period" FK "__FK_period_u0"),
			(SELECT 
				"currency" AS "currency_u7",
				"amount" AS "amount_u7",
				"valueAddedTaxIncluded" AS "valueAddedTaxIncluded_u7",
				"amountNet",
				"yearlyPaymentsPercentage",
				"amountPerformance",
				"__KEY_value_u5",
				"__FK_value_u5",
				(SELECT 
					"days" AS "days_u3",
					"years" AS "years_u3",
					"__FK_contractDuration"
				FROM "contractDuration" FK "__FK_contractDuration"),
				(SELECT 
					"@Value",
					"__FK_annualCostsReduction"
				FROM "annualCostsReduction" FK "__FK_annualCostsReduction" ArrayValueAlias "@Value")
			FROM "value" PK "__KEY_value_u5" FK "__FK_value_u5"),
			(SELECT 
				"format" AS "format_u5",
				"url" AS "url_u9",
				"title" AS "title_u14",
				"description" AS "description_u15",
				"documentOf" AS "documentOf_u3",
				"documentType" AS "documentType_u3",
				"datePublished" AS "datePublished_u5",
				"dateModified" AS "dateModified_u6",
				"id" AS "id_u22",
				"language" AS "language_u3",
				"relatedItem" AS "relatedItem_u5",
				"__FK_documents_u5"
			FROM "documents" FK "__FK_documents_u5")
		FROM "contracts" PK "__KEY_contracts_u0" FK "__FK_contracts_u0"),
	// Qualification	
		(SELECT 
			"status" AS "status_u7",
			"bidID",
			"date" AS "date_u9",
			"description" AS "description_u21",
			"title" AS "title_u18",
			"id" AS "id_u27",
			"lotID" AS "lotID_u0", 
			"eligible" AS "eligible_u0",
			"qualified" AS "qualified_u0",
	    	"__KEY_qualifications",
			"__FK_qualifications",
			(SELECT 
				"format" AS "format_u9",
				"url" AS "url_u14",
				"title" AS "title_u19",
				"description" AS "description_u22",
				"documentOf" AS "documentOf_u9",
				"documentType" AS "documentType_u9",
				"datePublished" AS "datePublished_u9",
				"dateModified" AS "dateModified_u10",
				"id" AS "id_u28",
				"language" AS "language_u9",
				"relatedItem" AS "relatedItem_u11",
				"__FK_documents_u6"
			FROM "documents" FK "__FK_documents_u6"),
	//Qualification Complaint		
			(SELECT 
				"status" AS "status_u9",
				"description" AS "description_u25",
				"title" AS "title_u22",
				"date" AS "date_u12",
				"dateSubmitted" AS "dateSubmitted_u1",
				"dateAnswered" AS "dateAnswered_u1",
				"dateEscalated" AS "dateEscalated_u1",
				"dateDecision" AS "dateDecision_u1",
				"dateCanceled" AS "dateCanceled_u1",
				"id" AS "id_u33",
				"complaintID" AS "complaintID_u1",
				"resolution" AS "resolution_u1",
				"resolutionType" AS "resolutionType_u1",
				"type" AS "type_u1",
				"satisfied" AS "satisfied_u1",
				"decision" AS "decision_u1",
				"cancellationReason" AS "cancellationReason_u1",
				"relatedLot" AS "relatedLot_u4",
				"tendererAction" AS "tendererAction_u1",
				"tendererActionDate" AS "tendererActionDate_u1",
				"acceptance" AS "acceptance_u1",
				"dateAccepted" AS "dateAccepted_u1",
				"rejectReason" AS "rejectReason_u1",
				"rejectReasonDescription" AS "rejectReasonDescription_u1",
				"reviewDate" AS "reviewDate_u1",
				"reviewPlace" AS "reviewPlace_u1",
				"__KEY_complaints_u1",
				"__FK_complaints_u1",
				(SELECT 
					"format" AS "format_u11",
					"url" AS "url_u17",
					"title" AS "title_u23",
					"description" AS "description_u26",
					"documentOf" AS "documentOf_u11",
					"documentType" AS "documentType_u11",
					"datePublished" AS "datePublished_u11",
					"dateModified" AS "dateModified_u12",
					"id" AS "id_u34",
					"language" AS "language_u11",
					"relatedItem" AS "relatedItem_u13",
					"__FK_documents_u8"
				FROM "documents" FK "__FK_documents_u8"),
				(SELECT 
					"name" AS "name_u15",
					"__KEY_author_u2",
					"__FK_author_u2",
					(SELECT 
						"telephone" AS "telephone_u7",
						"name" AS "name_u16",
						"email" AS "email_u7",
						"__FK_contactPoint_u6"
					FROM "contactPoint" FK "__FK_contactPoint_u6"),
					(SELECT 
						"scheme" AS "scheme_u9",
						"id" AS "id_u35",
						"__FK_identifier_u6"
					FROM "identifier" FK "__FK_identifier_u6"),
					(SELECT 
						"postalCode" AS "postalCode_u7",
						"countryName" AS "countryName_u7",
						"streetAddress" AS "streetAddress_u7",
						"region" AS "region_u7",
						"locality" AS "locality_u7",
						"__FK_address_u6"
					FROM "address" FK "__FK_address_u6")
				FROM "author" PK "__KEY_author_u2" FK "__FK_author_u2")
			FROM "complaints" PK "__KEY_complaints_u1" FK "__FK_complaints_u1")
		FROM "qualifications" PK "__KEY_qualifications" FK "__FK_qualifications"),
// MileStones		
		(SELECT 
		"code" AS "code_u6",
		"description" AS "description_u27",
		"sequenceNumber",
		"title" AS "title_u24",
		"percentage",
		"type" AS "type_u2",
		"id" AS "id_u37",
		"relatedLot" AS "relatedLot_u5",
		"__KEY_milestones",
		"__FK_milestones",
		(SELECT 
			"type" AS "type_u3",
			"days",
			"__FK_duration"
		FROM "duration" FK "__FK_duration")
	FROM "milestones" PK "__KEY_milestones" FK "__FK_milestones")	
		
	FROM JSON (wrap off) "data" PK "__KEY_data"
	WITH CONNECTION(URL "$(vURL)");

NEXT vTenderId;

////[classification]:
////LOAD	[scheme_u2],
////	[description_u1],
////	[id_u8],
////	[__FK_classification] AS [__KEY_items]
////RESIDENT RestConnectorMasterTable
////WHERE NOT IsNull([__FK_classification]);

// Store for DeBug
STORE RestConnectorMasterTable into $(FILES_PATH)RestConnectorMasterTable.qvd (qvd); 
///$tab 5 Tender StoreToQVD

// Тендеры
Tender_Tmp:
LOAD	
	procurementMethod,
	Alt([numberOfBids], 0) as КоличествоПредложений,
//	[auctionUrl] as СсылкаНаТендер,
	[submissionMethod] as ТипТендера,
	[owner_u0] as ПлощадкаТендера,
	[id_u13] as IDTenderOrig,
	if(Lower([mode])='test', 1, 0) as TestFlag,
	[description_u4] as ОписаниеТендера,
	[description_en],
	[title_u4] as Тендер,
	[title_en] as Title,
	[title_ru] as ТендерРу,
	[tenderID] as Идентификатор,
	$(vDateConvert([dateModified_u3])) as ДатаИзмененияТендера,
	$(vDateConvert([date_u13])) as ТерминальнаяДатаТендера,
	[status_u1] as СтатусТендера,
	awardCriteria as Критерий,
	procurementMethodType, 
	submissionMethodDetails as ТипТендераДетально,
	procurementMethodRationale as [Обоснование использования метода],
	cause,
	[causeDescription] as [Обоснование использования],
	stage2TenderID,
	mainProcurementCategory,
	NBUdiscountRate, 
	minimalStepPercentage_u0 as minimalStepPercentage,
	fundingKind_u0 as fundingKind,
	yearlyPaymentsPercentageRange_u0 as yearlyPaymentsPercentageRange,
	$(vDateConvert(noticePublicationDate)) as noticePublicationDate,
	[__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_data]);

Left Join (Tender_Tmp)
LOAD	$(vDateConvert([startDate_u8])) as [Начальная дата обжалования тендера],
	$(vDateConvert([endDate_u8])) as [Конечная дата обжалования тендера],
	[__FK_complaintPeriod_u0] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_complaintPeriod_u0]);

Left Join (Tender_Tmp)
LOAD	$(vDateConvert([startDate])) as [Начальная дата определения победителя],
	$(vDateConvert([endDate])) as [Конечная дата определения победителя],
	[__FK_awardPeriod] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_awardPeriod]);

Left Join (Tender_Tmp)
LOAD	$(vDateConvert([startDate_u0])) as [Начало периода уточнений],
	$(vDateConvert([endDate_u0])) as [Конец периода уточнений],
	[__FK_enquiryPeriod] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_enquiryPeriod]);

Left Join (Tender_Tmp)
LOAD	$(vDateConvert([startDate_u1])) as [Начало приема предложений],
	$(vDateConvert([endDate_u1])) as [Конец приема предложений],
	[__FK_tenderPeriod] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_tenderPeriod]);

Left Join (Tender_Tmp)
LOAD	$(vDateConvert([startDate_u9])) as [Начало квалификационного периода],
	$(vDateConvert([endDate_u9])) as [Конец квалификационного периода],
	[__FK_qualificationPeriod] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_qualificationPeriod]);

Left Join (Tender_Tmp)
LOAD	[currency_u0] as ШагУменьшенияВалюта,
	[amount_u0] as ШагУменьшения,
	if(Lower([valueAddedTaxIncluded_u0])='true', 1, if(Lower([valueAddedTaxIncluded_u0])='false', 0, [valueAddedTaxIncluded_u0])) as ШагУменьшенияНДС,
	[__FK_minimalStep] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_minimalStep]);

Left Join (Tender_Tmp)
LOAD	[currency_u2] as ВалютаТендера,
	[amount_u2] as СуммаТендера,
	if(Lower([valueAddedTaxIncluded_u2])='true', 1, if(Lower([valueAddedTaxIncluded_u2])='false', 0, [valueAddedTaxIncluded_u2])) as НДСТендера,
	[__FK_value_u1] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_value_u1]);

Left Join (Tender_Tmp)
LOAD	
	[kind],
	[__KEY_procuringEntity],
	[__FK_procuringEntity] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_procuringEntity]);

Left Join (Tender_Tmp)
LOAD	
	[idTxt] as IDOrganizatorOrig, 
	[__FK_identifier] AS [__KEY_procuringEntity]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_identifier]);

Left Join (Tender_Tmp)
LOAD	[currency_u8] as ВалютаГарантииПредложения,
	[amount_u8] as СуммаГарантииПредложения,
	[__FK_guarantee] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_guarantee]);

Left Join (Tender_Tmp)
LOAD	
	[__KEY_funders],
	[__FK_funders] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_funders]);

Left Join (Tender_Tmp)
LOAD	
	[scheme_u10]&'_'&[id_u36Txt] as [Ключ донора],
	[__FK_identifier_u1] AS [__KEY_funders]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_identifier_u1]);

Left Join (Tender_Tmp) 
LOAD	
	[currency_u11] as MinValueCurrency,
	[amount_u11] as MinValueAmount,
	if(Lower([valueAddedTaxIncluded_u9])='true', 1, if(Lower([valueAddedTaxIncluded_u9])='false', 0, [valueAddedTaxIncluded_u9])) as MinValueAddedTaxIncluded,
	[__FK_minValue_u0] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_minValue_u0]);

DROP Fields __KEY_data, __KEY_procuringEntity, __KEY_funders From Tender_Tmp;

// Проверка на полноту загруженных данных по тендерам 
IF NoOfRows('Tender_Tmp')<>$(RowsQty) THEN 
	TRACE ERROR of Load full data from web;
	EXIT Script;
ENDIF

YearList:
LOAD Distinct
	 Mid(Идентификатор, 4, 4) as YearPeriod
Resident Tender_Tmp;

FOR Each vPeriod in FieldValueList('YearPeriod')

	Tender_:
	NoConcatenate
	LOAD
		*
	Resident Tender_Tmp
	Where Mid(Идентификатор, 4, 4) = $(vPeriod);	

	IF NOT IsNull(FileSize('$(TRN_QVD_PATH)Tender_$(vPeriod).qvd')) THEN
		Concatenate (Tender_)
		LOAD 
		     Критерий, 
		     [Конечная дата определения победителя], 
		     [Начальная дата определения победителя], 
		     [Начало квалификационного периода],
			 [Конец квалификационного периода],
		     ДатаИзмененияТендера, 
		     ТерминальнаяДатаТендера,
		     ОписаниеТендера, 
		     description_en, 
		     [Конец периода уточнений], 
		     [Начало периода уточнений], 
		     IDTenderOrig, 
		     ШагУменьшения, 
		     ШагУменьшенияВалюта, 
		     ШагУменьшенияНДС, 
		     КоличествоПредложений, 
		     procurementMethod, 
		     IDOrganizatorOrig, 
		//     TestFlag,
		     ПлощадкаТендера,
		     СтатусТендера, 
		     ТипТендера, 
		     Идентификатор, 
		     [Конец приема предложений], 
		     [Начало приема предложений], 
		     Тендер, 
		     Title, 
		     kind,
			 ТендерРу, 
		     СуммаТендера, 
		     ВалютаТендера, 
		     НДСТендера,
		     procurementMethodType, 
			 ТипТендераДетально,
			 ВалютаГарантииПредложения, 
			 СуммаГарантииПредложения,
			 [Начальная дата обжалования тендера],
			 [Конечная дата обжалования тендера],
			 [Обоснование использования метода],
			 cause,
			 [Обоснование использования],
			 stage2TenderID,
			 [Ключ донора],
			 mainProcurementCategory,
			 NBUdiscountRate, 
			 minimalStepPercentage,
			 fundingKind,
			 yearlyPaymentsPercentageRange,
			 noticePublicationDate,
			 MinValueCurrency,
			 MinValueAmount,
			 MinValueAddedTaxIncluded
		FROM $(TRN_QVD_PATH)Tender_$(vPeriod).qvd (qvd)
		WHERE NOT EXISTS(IDTenderOrig);
	ENDIF
	
	Tender:
	NoConcatenate
	LOAD 
	     Критерий, 
	     [Конечная дата определения победителя], 
	     [Начальная дата определения победителя],
	     [Начало квалификационного периода],
		 [Конец квалификационного периода], 
	     ДатаИзмененияТендера, 
	     ТерминальнаяДатаТендера,
	     ОписаниеТендера, 
	     description_en,
	     [Конец периода уточнений], 
	     [Начало периода уточнений], 
	     IDTenderOrig,
	     AutoNumber(IDTenderOrig, 'IDTender')+$(vPeriod)*$(MulKey) as IDTender, 
	     ШагУменьшения, 
	     ШагУменьшенияВалюта, 
	     ШагУменьшенияНДС, 
	     КоличествоПредложений, 
	     procurementMethod, 
	     IDOrganizatorOrig,
//	     AutoNumber(IDOrganizatorOrig, 'IDOrganizator') as IDOrganizatorKey, 
//	     TestFlag,
	     ПлощадкаТендера,
	     СтатусТендера, 
	     ТипТендера, 
	     Идентификатор, 
	     [Конец приема предложений], 
	     [Начало приема предложений], 
	     Тендер, 
	     Title, 
	     kind,
		 ТендерРу,
	     СуммаТендера, 
	     ВалютаТендера, 
	     НДСТендера,
	     procurementMethodType, 
		 ТипТендераДетально,
		 ВалютаГарантииПредложения,
		 СуммаГарантииПредложения,
		 [Начальная дата обжалования тендера],
		 [Конечная дата обжалования тендера],
		 [Обоснование использования метода],
		 cause,
		 [Обоснование использования],
		 stage2TenderID,
		 [Ключ донора],
		 mainProcurementCategory,
		 NBUdiscountRate,
		 minimalStepPercentage,
		 fundingKind,
		 yearlyPaymentsPercentageRange,
		 noticePublicationDate,
		 MinValueCurrency,
		 MinValueAmount,
		 MinValueAddedTaxIncluded
	Resident    Tender_
	WHERE TestFlag <> 1;
	
	DROP Table Tender_;
	
	// Добавление ранее переведенных Заголовков тендеров
	IF NOT IsNull(FileSize('$(TRN_QVD_PATH)Tender_$(vPeriod).qvd')) THEN
	
		Left Join (Tender)
		LOAD
			 IDTenderOrig,
			 Tender
		FROM $(TRN_QVD_PATH)Tender_$(vPeriod).qvd (qvd);	 
		
		ELSE
		
		Left Join (Tender)
		LOAD
			 Null() as Tender
		AutoGenerate 1;     
	
	ENDIF
	
	STORE  Tender into $(TRN_QVD_PATH)Tender_$(vPeriod).qvd (qvd);
	
	IF vPlanSave THEN
		STORE ТерминальнаяДатаТендера, [Начало периода уточнений], IDTenderOrig, IDOrganizatorOrig, СтатусТендера, Идентификатор, procurementMethodType, stage2TenderID FROM Tender into $(TRN_QVD_PATH)Tender_P_$(vPeriod).qvd (qvd);
	ENDIF
	
	DROP Table Tender;
	
NEXT

DROP Table Tender_Tmp; 

// Лоты
Lot_Tmp:
LOAD	[status_u5] as СтатусЛота,
	[description_u9] as ОписаниеЛота,
	[description_en_u0] as LotDescription_en,
	[title_u12] as Лот,
	[title_en_u0] as LotTitle_en,
	[id_u20] as IDLotOrig,
	[auctionUrl_u0] as СсылкаНаАукцион,
	$(vDateConvert([date_u14])) as ТерминальнаяДатаЛота,
	[minimalStepPercentage],
	[fundingKind],
	[yearlyPaymentsPercentageRange],
	[__KEY_lots],
	1 as IsLot,
	[__FK_lots] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_lots]);

Left Join (Lot_Tmp)
LOAD	[currency_u5] as ВалютаЛота,
	[amount_u5] as СуммаЛота,
	if(Lower([valueAddedTaxIncluded_u5])='true', 1, if(Lower([valueAddedTaxIncluded_u5])='false', 0, [valueAddedTaxIncluded_u5])) as НДСЛота,
	[__FK_value_u3] AS [__KEY_lots]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_value_u3]);

Left Join (Lot_Tmp)
LOAD	[currency_u10] as MinValueCurrency,
	[amount_u10] as MinValueAmount,
	if(Lower([valueAddedTaxIncluded_u8])='true', 1, if(Lower([valueAddedTaxIncluded_u8])='false', 0, [valueAddedTaxIncluded_u8])) as MinValueAddedTaxIncluded,
	[__FK_minValue] AS [__KEY_lots]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_minValue]);

Left Join (Lot_Tmp)
LOAD	[currency_u4] as ШагУменьшенияЛотВалюта,
	[amount_u4] as ШагУменьшенияЛот,
	if(Lower([valueAddedTaxIncluded_u4])='true', 1, if(Lower([valueAddedTaxIncluded_u4])='false', 0, 1)) as ШагУменьшенияЛотНДС,
	[__FK_minimalStep_u0] AS [__KEY_lots]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_minimalStep_u0]);

Left Join (Lot_Tmp)
LOAD	$(vDateConvert([startDate_u6])) as [Начальная дата аукциона лота],
	$(vDateConvert([endDate_u6])) as [Конечная дата аукциона лота],
	[__FK_auctionPeriod_u0] AS [__KEY_lots]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_auctionPeriod_u0]);

Left Join (Lot_Tmp)
LOAD	
	[id_u13] as IDTenderOrig,
	[id_u13] as IDTender,
	[tenderID] as ИдентификаторТендера,
	Mid([tenderID], 4, 4) as Year_Period,
	if(Lower([mode])='test', 1, 0) as TestFlag,
	[__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_data]);

Left Join (Lot_Tmp)
LOAD	[currency_u9] as ВалютаГарантииПредложенияЛота,
	[amount_u9] as СуммаГарантииПредложенияЛота,
	[__FK_guarantee_u0] AS [__KEY_lots]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_guarantee_u0]);

LotList:
LOAD 
	Distinct
	[__FK_lots] AS [__KEY_data_lots]
Resident RestConnectorMasterTable	
WHERE NOT IsNull([__FK_lots]);

// ID Лотов из тендеров без Лотов

TenderLot_Tmp:
NoConcatenate
LOAD	
	[auctionUrl] as СсылкаНаАукцион,
	[id_u13] as IDTenderOrig,
	[id_u13] as IDTender,
	[tenderID] as ИдентификаторТендера,
	Mid([tenderID], 4, 4) as Year_Period,
	if(Lower([mode])='test', 1, 0) as TestFlag,
	'Lot'&[id_u13] as IDLotOrig, // Псевдо ID Лота
	[description_u4] as ОписаниеЛота,
	[description_en] as LotDescription_en,
	[title_u4] as Лот,
	[title_en] as LotTitle_en,
	$(vDateConvert([date_u13])) as ТерминальнаяДатаЛота,
	minimalStepPercentage_u0 as minimalStepPercentage, 
	fundingKind_u0 as fundingKind,
	yearlyPaymentsPercentageRange_u0 as yearlyPaymentsPercentageRange,
	0 as IsLot,
	[__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_data]) AND NOT Exists(__KEY_data_lots, __KEY_data);

DROP Table LotList;

Left Join (TenderLot_Tmp)
LOAD	[currency_u2] as ВалютаЛота,
	[amount_u2] as СуммаЛота,
	if(Lower([valueAddedTaxIncluded_u2])='true', 1, if(Lower([valueAddedTaxIncluded_u2])='false', 0, [valueAddedTaxIncluded_u2])) as НДСЛота,
	[__FK_value_u1] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_value_u1]);

Left Join (TenderLot_Tmp) 
LOAD	
	[currency_u11] as MinValueCurrency,
	[amount_u11] as MinValueAmount,
	if(Lower([valueAddedTaxIncluded_u9])='true', 1, if(Lower([valueAddedTaxIncluded_u9])='false', 0, [valueAddedTaxIncluded_u9])) as MinValueAddedTaxIncluded,
	[__FK_minValue_u0] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_minValue_u0]);

Left Join (TenderLot_Tmp)
LOAD	[currency_u0] as ШагУменьшенияЛотВалюта,
	[amount_u0] as ШагУменьшенияЛот,
	if(Lower([valueAddedTaxIncluded_u0])='true', 1, if(Lower([valueAddedTaxIncluded_u0])='false', 0, [valueAddedTaxIncluded_u0])) as ШагУменьшенияЛотНДС,
	[__FK_minimalStep] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_minimalStep]);

Left Join (TenderLot_Tmp)
LOAD	$(vDateConvert([startDate_u2])) as [Начальная дата аукциона лота],
	$(vDateConvert([endDate_u2])) as [Конечная дата аукциона лота],
	[__FK_auctionPeriod] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_auctionPeriod]);

Left Join (TenderLot_Tmp)
LOAD	[currency_u8] as ВалютаГарантииПредложенияЛота,
	[amount_u8] as СуммаГарантииПредложенияЛота,
	[__FK_guarantee] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_guarantee]);

Concatenate (Lot_Tmp)
LOAD
	СсылкаНаАукцион,
	IDTenderOrig,
	IDTender,
	IDLotOrig, // Псевдо ID Лота
	ИдентификаторТендера,
	Year_Period,
	TestFlag,
	ОписаниеЛота,
	LotDescription_en,
	Лот,
	LotTitle_en,
	ТерминальнаяДатаЛота,
	IsLot,
	ВалютаЛота,
	СуммаЛота,
	НДСЛота,
	ШагУменьшенияЛотВалюта,
	ШагУменьшенияЛот,
	ШагУменьшенияЛотНДС,
	[Начальная дата аукциона лота],
	[Конечная дата аукциона лота],
	ВалютаГарантииПредложенияЛота,
	СуммаГарантииПредложенияЛота,
	minimalStepPercentage, 
	fundingKind,
	yearlyPaymentsPercentageRange,
	MinValueCurrency,
	MinValueAmount,
	MinValueAddedTaxIncluded
Resident TenderLot_Tmp;

DROP Table TenderLot_Tmp;	

FOR Each vPeriod in FieldValueList('YearPeriod')

	Lot_:
	NoConcatenate
	LOAD
		*
	Resident Lot_Tmp
	Where Year_Period = $(vPeriod);

	// Создание нумерации лотов 23.01.2018
	// ТЗ https://docs.google.com/document/d/1pEkuk1uNFWx829TMb-qu3l_2ej9mrecWIoMqcHTwPDk
	
	IF NOT IsNull(FileSize('$(TRN_QVD_PATH)Lot_$(vPeriod).qvd'))  THEN
	
		Left Join (Lot_)
		LOAD
			 IDTenderOrig,
			 IDLotOrig,
			 NoLot
		FROM $(TRN_QVD_PATH)Lot_$(vPeriod).qvd (qvd);	 
		
		ELSE
		
		Left Join (Lot_)
		LOAD
			 Null() as NoLot
		AutoGenerate 1;     
	
	ENDIF
	
	// Для правильной сортировки с Null
	NULLASVALUE NoLot;
	
	Lot_Tmp_:
	NoConcatenate
	LOAD
		 *
	Resident Lot_;
	
	DROP Table Lot_;	 
		
	Lot_Tmp1:
	NoConcatenate
	LOAD
		СтатусЛота, 
		СсылкаНаАукцион,
		IDTenderOrig,
		IDTender,
		IDLotOrig, 
		ИдентификаторТендера,
		TestFlag,
		if(NoLot='', 
			if(Previous(IDTenderOrig)=IDTenderOrig, RangeSum(Peek('NoLot', -1, 'Lot_Tmp1'), 1), 1), 
			NoLot) as NoLot,
		ОписаниеЛота,
		LotDescription_en,
		Лот,
		LotTitle_en,
		ТерминальнаяДатаЛота,
		IsLot,
		ВалютаЛота,
		СуммаЛота,
		НДСЛота,
		ШагУменьшенияЛотВалюта,
		ШагУменьшенияЛот,
		ШагУменьшенияЛотНДС,
		[Начальная дата аукциона лота],
		[Конечная дата аукциона лота],
		ВалютаГарантииПредложенияЛота,
		СуммаГарантииПредложенияЛота,
		minimalStepPercentage,
		fundingKind,
		yearlyPaymentsPercentageRange,
		MinValueCurrency,
		MinValueAmount,
		MinValueAddedTaxIncluded
	Resident Lot_Tmp_
	Order By IDTenderOrig, NoLot, Лот;	
	
	DROP Table Lot_Tmp_;
	
	NULLASNULL NoLot;
	
	Lot_Tmp2:
	NoConcatenate
	LOAD
		СтатусЛота, 
		СсылкаНаАукцион,
		IDTenderOrig,
		IDTender,
		IDLotOrig, 
		ИдентификаторТендера&'-L'&NoLot as ИдентификаторЛота,
		TestFlag,
		NoLot,
		ОписаниеЛота,
		LotDescription_en,
		Лот,
		LotTitle_en,
		ТерминальнаяДатаЛота,
		IsLot,
		ВалютаЛота,
		СуммаЛота,
		НДСЛота,
		ШагУменьшенияЛотВалюта,
		ШагУменьшенияЛот,
		ШагУменьшенияЛотНДС,
		[Начальная дата аукциона лота],
		[Конечная дата аукциона лота],
		ВалютаГарантииПредложенияЛота,
		СуммаГарантииПредложенияЛота,
		minimalStepPercentage, 
		fundingKind,
		yearlyPaymentsPercentageRange,
		MinValueCurrency,
		MinValueAmount,
		MinValueAddedTaxIncluded
	Resident Lot_Tmp1;	
	
	DROP Table Lot_Tmp1;
	
	IF NOT IsNull(FileSize('$(TRN_QVD_PATH)Lot_$(vPeriod).qvd'))  THEN
		Concatenate (Lot_Tmp2)
		LOAD 
			СтатусЛота,
		    СсылкаНаАукцион,
			IDTenderOrig,
			IDLotOrig, 
			ИдентификаторЛота,
			NoLot,
			ОписаниеЛота,
			LotDescription_en, 
			Лот,
			LotTitle_en, 
			ТерминальнаяДатаЛота,
			IsLot,
			ВалютаЛота,
			СуммаЛота,
			НДСЛота,
			ШагУменьшенияЛотВалюта,
			ШагУменьшенияЛот,
			ШагУменьшенияЛотНДС,
			[Начальная дата аукциона лота],
			[Конечная дата аукциона лота],
			ВалютаГарантииПредложенияЛота, 
			СуммаГарантииПредложенияЛота,
			minimalStepPercentage, 
			fundingKind,
			yearlyPaymentsPercentageRange,
			MinValueCurrency,
			MinValueAmount,
			MinValueAddedTaxIncluded
		FROM $(TRN_QVD_PATH)Lot_$(vPeriod).qvd (qvd)
		Where NOT Exists(IDTender, IDTenderOrig);
	ENDIF
	
	Lot:
	LOAD 
		СтатусЛота,
	    СсылкаНаАукцион,
		IDTenderOrig,
		AutoNumber(IDTenderOrig, 'IDTender')+$(vPeriod)*$(MulKey) as IDTenderKey,
		IDLotOrig, 
		AutoNumber(IDTenderOrig&IDLotOrig, 'IDLot')+$(vPeriod)*$(MulKey) as IDLot,
		ИдентификаторЛота,
		NoLot,
		ОписаниеЛота,
		LotDescription_en,
		Лот,
		LotTitle_en,
		ТерминальнаяДатаЛота,
		IsLot,
		ВалютаЛота,
		СуммаЛота,
		НДСЛота,
		ШагУменьшенияЛотВалюта,
		ШагУменьшенияЛот,
		ШагУменьшенияЛотНДС,
		[Начальная дата аукциона лота],
		[Конечная дата аукциона лота],
		ВалютаГарантииПредложенияЛота,
		СуммаГарантииПредложенияЛота,
		minimalStepPercentage, 
		fundingKind,
		yearlyPaymentsPercentageRange,
		MinValueCurrency,
		MinValueAmount,
		MinValueAddedTaxIncluded
	Resident    Lot_Tmp2
	WHERE TestFlag <> 1;
	
	DROP Table Lot_Tmp2;  
		
	// Добавление ранее переведенных Заголовков лотов
	IF NOT IsNull(FileSize('$(TRN_QVD_PATH)Lot_$(vPeriod).qvd')) THEN
		Left Join (Lot)
		LOAD
			 IDTenderOrig,
			 IDLotOrig,
			 Lot
		FROM $(TRN_QVD_PATH)Lot_$(vPeriod).qvd (qvd);	 
		
		ELSE
		
		Left Join (Lot)
		LOAD
			 Null() as Lot
		AutoGenerate 1;     
	ENDIF
	
	STORE  Lot into $(TRN_QVD_PATH)Lot_$(vPeriod).qvd (qvd);
	
	IF vPlanSave THEN
		STORE IDTenderOrig, IDLot, IDLotOrig, СтатусЛота, ВалютаЛота, СуммаЛота FROM Lot into $(TRN_QVD_PATH)Lot_P_$(vPeriod).qvd (qvd);
	ENDIF
	
	DROP Table Lot;
	
NEXT	

DROP Table Lot_Tmp;

// MileStones
Milestones_:
LOAD	[code_u6] as MilestoneCode,
	[description_u27] as [Опис події],
	[sequenceNumber],
	[title_u24] as MilestoneTitle,
	[percentage] as Розмір,
	[type_u2] as MilestoneType,
	[id_u37] as [ID умови],
	[relatedLot_u5] as IDLotOrig,
	[__KEY_milestones],
	[__FK_milestones] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_milestones]);

Left Join (Milestones_)
LOAD	[type_u3] as MilestoneDurationType,
	[days] as [Період (днів)],
	[__FK_duration] AS [__KEY_milestones]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_duration]);

Left Join (Milestones_)
LOAD	
	[id_u13] as IDTenderOrig,
	[id_u13] as IDTender,
	Mid([tenderID], 4, 4) as Year_Period,
	if(Lower([mode])='test', 1, 0) as TestFlag,
	[__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_data]);

Milestones_Tmp:
NoConcatenate
LOAD
	 MilestoneCode,
	[Опис події],
	sequenceNumber,
	MilestoneTitle,
	Розмір,
	MilestoneType,
	[ID умови],
	if(IsNull(IDLotOrig), 'Lot'&IDTenderOrig, IDLotOrig) as IDLotOrig,
	MilestoneDurationType,
	[Період (днів)],
	IDTenderOrig,
	IDTender,
	Year_Period,
	TestFlag
Resident Milestones_;

DROP Table Milestones_;	 


FOR Each vPeriod in FieldValueList('YearPeriod')

	Milestones_:
	NoConcatenate
	LOAD
		*
	Resident Milestones_Tmp
	Where Year_Period = $(vPeriod);
	
	IF NOT IsNull(FileSize('$(TRN_QVD_PATH)Milestones_$(vPeriod).qvd'))  THEN
		Concatenate (Milestones_)
		LOAD 
			MilestoneCode,
			[Опис події],
			sequenceNumber,
			MilestoneTitle,
			Розмір,
			MilestoneType,
			[ID умови],
			IDLotOrig,
			MilestoneDurationType,
			[Період (днів)],
			IDTenderOrig
		FROM $(TRN_QVD_PATH)Milestones_$(vPeriod).qvd (qvd)
		Where NOT Exists(IDTender, IDTenderOrig);
	ENDIF
	
	Milestones:
	LOAD 
		IDTenderOrig,
		AutoNumber(IDTenderOrig, 'IDTender')+$(vPeriod)*$(MulKey) as IDTenderKey,
		IDLotOrig, 
		AutoNumber(IDTenderOrig&IDLotOrig, 'IDLot')+$(vPeriod)*$(MulKey) as IDLotKey,
		AutoNumber(IDTenderOrig&[ID умови], 'IDMilestone')+$(vPeriod)*$(MulKey) as IDMilestone,
		MilestoneCode,
		[Опис події],
		sequenceNumber,
		MilestoneTitle,
		Розмір,
		MilestoneType,
		[ID умови],
		MilestoneDurationType,
		[Період (днів)]
	Resident    Milestones_
	WHERE TestFlag <> 1;
	
	DROP Table Milestones_;  
	
	STORE  Milestones into $(TRN_QVD_PATH)Milestones_$(vPeriod).qvd (qvd);
	DROP Table Milestones;
	
NEXT	

DROP Table Milestones_Tmp;	 

// Оценки 

AwardTmp:
LOAD	
	[status_u0] as СтатусПротоколаОценки,
	[bid_id] as IDBidOrig,
	$(vDateConvert([date_u0])) as ДатаВремяЗакрытия,
	Date(Floor($(vDateConvert([date_u0])))) as ДатаЗакрытия,
	[id_u7] as IDAwardOrig,
	[lotID] as IDLotOrig,
	[description_u5] as ОписаниеПротоколаОценки,
	[title_u5] as ПротоколОценки,
	[eligible] as ПодтверждениеСоответствия,
	[qualified] as ПодтверждениеУчастия,
	[__KEY_awards],
	[__FK_awards] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_awards]);

// Определение тендеров с переговорными процедурами

Left Join (AwardTmp)
LOAD	Distinct	
	 [__KEY_data],
	 1 as IsLimitedAward
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_data]) AND Lower(procurementMethod) = 'limited';

Left Join (AwardTmp)
LOAD	$(vDateConvert([startDate_u3])) as [Начальная дата обжалования],
	$(vDateConvert([endDate_u3])) as [Конечная дата обжалования],
	[__FK_complaintPeriod] AS [__KEY_awards]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_complaintPeriod]);

Left Join (AwardTmp)
LOAD	[currency] as ВалютаПротоколаОценки,
	[amount] as СуммаПротоколаОценки,
	if(Lower([valueAddedTaxIncluded])='true', 1, if(Lower([valueAddedTaxIncluded])='false', 0, [valueAddedTaxIncluded])) as НДСПротоколаОценки,
	[yearlyPaymentsPercentage_u0] as AwardYearlyPaymentsPercentage, 
	[amountPerformance_u0] as AwardAmountPerformance,
	[__KEY_value],
	[__FK_value] AS [__KEY_awards]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_value]);

Left Join (AwardTmp) 
LOAD	[days_u0] as AwardContractDurationDays,
	[years_u0] as AwardContractDurationYears,
	[__FK_contractDuration_u0] AS [__KEY_value]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_contractDuration_u0]);

annualCostsReduction_u0: 
LOAD	[@Value_u0],
		RowNo() as RN,
		[__FK_annualCostsReduction_u0] AS [__KEY_value]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_annualCostsReduction_u0]);

Left Join (AwardTmp) 
LOAD
	 [__KEY_value],
	 Concat([@Value_u0], ';', RN) as AwardAnnualCostsReduction
Resident annualCostsReduction_u0
Group By [__KEY_value];

DROP Table annualCostsReduction_u0; 

Left Join (AwardTmp)
LOAD	
	[id_u13] as IDTenderOrig,
	Mid([tenderID], 4, 4) as Year_Period,
	if(Lower([mode])='test', 1, 0) as TestFlag,
	[__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_data]);

Left Join (AwardTmp)
LOAD	
	[__KEY_suppliers],
	[__FK_suppliers] AS [__KEY_awards]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_suppliers]);

Left Join (AwardTmp)
LOAD	
	[id_u23Txt] as IDTendererOrig,
	[__FK_identifier_u4] AS [__KEY_suppliers]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_identifier_u4]);

FOR Each vPeriod in FieldValueList('YearPeriod')
	
	Award_Tmp:
	NoConcatenate
	LOAD IDTenderOrig, 
		 IDTenderOrig as IDTender,
		 TestFlag,
	     IDBidOrig, 
	     if(IsNull(IDLotOrig), 'Lot'&IDTenderOrig, IDLotOrig) as IDLotOrig,
	     IDTendererOrig,
	     Alt(IsLimitedAward, 0) as IsLimitedAward,
	     ДатаВремяЗакрытия, 
	     ДатаЗакрытия, 
	     ОписаниеПротоколаОценки, 
	     IDAwardOrig, 
	     СтатусПротоколаОценки, 
	     ПротоколОценки, 
	     СуммаПротоколаОценки, 
	     ВалютаПротоколаОценки, 
	     НДСПротоколаОценки,
	     [Начальная дата обжалования],
	     [Конечная дата обжалования],
	     ПодтверждениеСоответствия,
		 ПодтверждениеУчастия,
		 AwardYearlyPaymentsPercentage, 
	     AwardAmountPerformance,
	     AwardContractDurationDays,
	     AwardContractDurationYears,
	     AwardAnnualCostsReduction
	Resident AwardTmp
	Where Year_Period = $(vPeriod);
	
	IF NOT IsNull(FileSize('$(TRN_QVD_PATH)Award_$(vPeriod).qvd')) THEN
		Concatenate (Award_Tmp)
		LOAD IDTenderOrig, 
		     IDBidOrig, 
		     IDLotOrig,
			 IDTendererOrig,
			 IsLimitedAward,
		     ДатаВремяЗакрытия, 
		     ДатаЗакрытия, 
		     ОписаниеПротоколаОценки, 
		     IDAwardOrig, 
		     СтатусПротоколаОценки, 
		     ПротоколОценки, 
		     СуммаПротоколаОценки, 
		     ВалютаПротоколаОценки, 
		     НДСПротоколаОценки,
		     [Начальная дата обжалования],
		     [Конечная дата обжалования],
			 ПодтверждениеСоответствия, 
			 ПодтверждениеУчастия,
			 AwardYearlyPaymentsPercentage, 
		     AwardAmountPerformance,
		     AwardContractDurationDays,
		     AwardContractDurationYears,
		     AwardAnnualCostsReduction
		FROM $(TRN_QVD_PATH)Award_$(vPeriod).qvd (qvd)
		WHERE NOT EXISTS(IDTender, IDTenderOrig);
	ENDIF
	
	Award:
	LOAD 
		 //AutoNumber(IDTenderOrig&IDLotOrig&IDBidOrig, 'KeyLotBid') as KeyLotBid,
		 if(IsLimitedAward=1, AutoNumber(IDTenderOrig&IDLotOrig&IDAwardOrig, 'KeyLotBid')+$(vPeriod)*$(MulKey), 
		 	AutoNumber(IDTenderOrig&IDLotOrig&IDBidOrig, 'KeyLotBid')+$(vPeriod)*$(MulKey)) as KeyLotBid,
		 IDTenderOrig, 
		 AutoNumber(IDTenderOrig, 'IDTender')+$(vPeriod)*$(MulKey) as IDTenderKey,
	     IDBidOrig, 
	     IDLotOrig,
	     AutoNumber(IDTenderOrig&IDLotOrig, 'IDLot')+$(vPeriod)*$(MulKey) as IDLotKey,
	     IDTendererOrig,
//	     AutoNumber(IDTendererOrig, 'IDTenderer')+$(vPeriod)*$(MulKey) as IDTendererKey,
	     IsLimitedAward,
	     ДатаВремяЗакрытия, 
	     ДатаЗакрытия, 
	     ОписаниеПротоколаОценки, 
	     IDAwardOrig, 
	     AutoNumber(IDTenderOrig&IDAwardOrig, 'IDAward')+$(vPeriod)*$(MulKey) as IDAward,
	     СтатусПротоколаОценки, 
	     ПротоколОценки, 
	     СуммаПротоколаОценки, 
	     ВалютаПротоколаОценки, 
	     НДСПротоколаОценки,
	     [Начальная дата обжалования],
	     [Конечная дата обжалования],
	     ПодтверждениеСоответствия,
		 ПодтверждениеУчастия,
		 AwardYearlyPaymentsPercentage, 
	     AwardAmountPerformance,
	     AwardContractDurationDays,
	     AwardContractDurationYears,
	     AwardAnnualCostsReduction
	Resident   Award_Tmp
	WHERE TestFlag <> 1;   
	
	DROP Table Award_Tmp;
	
	// Добавление ранее определенных причин дисквалификации
	IF NOT IsNull(FileSize('$(TRN_QVD_PATH)Award_$(vPeriod).qvd')) THEN
		Left Join (Award)
		LOAD
			 IDAwardOrig,
			 IDTenderOrig,
			 DisqualGrpResID
		FROM $(TRN_QVD_PATH)Award_$(vPeriod).qvd (qvd);	 
		
		ELSE
		
		Left Join (Award)
		LOAD
			 Null() as DisqualGrpResID
		AutoGenerate 1;     
	ENDIF
	
	STORE  Award into $(TRN_QVD_PATH)Award_$(vPeriod).qvd (qvd);
	
	IF vPlanSave THEN
		STORE IDAward, KeyLotBid, IDTenderOrig, ДатаВремяЗакрытия, СтатусПротоколаОценки, IsLimitedAward FROM Award into $(TRN_QVD_PATH)Award_P_$(vPeriod).qvd (qvd);
	ENDIF
	
	DROP Table Award;

NEXT

DROP Table AwardTmp;
	
// Квалификации 

QualificationTmp:
LOAD	
	[status_u7] as СтатусКвалификации,
	[bidID] as IDBidOrig,
	$(vDateConvert([date_u9])) as ДатаВремяКвалификации,
	[id_u27] as IDQualificationOrig,
	[lotID_u0] as IDLotOrig,
	[description_u21] as ОписаниеКвалификации,
	[title_u18] as Квалификация,
	[eligible_u0] as ПодтверждениеСоответствияКвалификации,
	[qualified_u0] as ПодтверждениеУчастияКвалификации,
	[__KEY_qualifications],
	[__FK_qualifications] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_qualifications]);

Left Join (QualificationTmp)
LOAD	
	[id_u13] as IDTenderOrig,
	[id_u13] as IDTender,
	Mid([tenderID], 4, 4) as Year_Period,
	if(Lower([mode])='test', 1, 0) as TestFlag,
	[__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_data]);

FOR Each vPeriod in FieldValueList('YearPeriod')

	Qualification_Tmp:
	NoConcatenate
	LOAD IDTenderOrig, 
		 IDTender,
		 TestFlag,
	     IDBidOrig, 
	     if(IsNull(IDLotOrig), 'Lot'&IDTenderOrig, IDLotOrig) as IDLotOrig,
	     IDQualificationOrig, 
	     ДатаВремяКвалификации,
		 ОписаниеКвалификации,
		 Квалификация,
		 ПодтверждениеСоответствияКвалификации,
		 ПодтверждениеУчастияКвалификации,
		 СтатусКвалификации
	Resident QualificationTmp
	Where Year_Period = $(vPeriod);
	
	IF NOT IsNull(FileSize('$(TRN_QVD_PATH)Qualification_$(vPeriod).qvd')) THEN
		Concatenate (Qualification_Tmp)
		LOAD IDTenderOrig, 
		     IDBidOrig, 
		     IDLotOrig,
		     IDQualificationOrig, 
		     ДатаВремяКвалификации,
			 ОписаниеКвалификации,
			 Квалификация,
			 ПодтверждениеСоответствияКвалификации,
			 ПодтверждениеУчастияКвалификации,
			 СтатусКвалификации
		FROM $(TRN_QVD_PATH)Qualification_$(vPeriod).qvd (qvd)
		WHERE NOT EXISTS(IDTender, IDTenderOrig);
	ENDIF
	
	Qualification:
	LOAD      
	     AutoNumber(IDTenderOrig&IDLotOrig&IDBidOrig, 'KeyLotBid')+$(vPeriod)*$(MulKey) as KeyLotBid,
	     IDTenderOrig, 
	     AutoNumber(IDTenderOrig, 'IDTender')+$(vPeriod)*$(MulKey) as IDTenderKey,
	     IDBidOrig, 
	     IDLotOrig,
	     AutoNumber(IDTenderOrig&IDLotOrig, 'IDLot')+$(vPeriod)*$(MulKey) as IDLotKey,
	     IDQualificationOrig, 
	     AutoNumber(IDTenderOrig&IDQualificationOrig, 'IDQualification')+$(vPeriod)*$(MulKey) as IDQualification,
	     ДатаВремяКвалификации,
		 ОписаниеКвалификации,
		 Квалификация,
		 ПодтверждениеСоответствияКвалификации,
		 ПодтверждениеУчастияКвалификации,
		 СтатусКвалификации
	Resident   Qualification_Tmp
	WHERE TestFlag <> 1;     
	
	DROP Table Qualification_Tmp;
	
	// Добавление ранее определенных причин дисквалификации
	IF NOT IsNull(FileSize('$(TRN_QVD_PATH)Qualification_$(vPeriod).qvd')) THEN
		Left Join (Qualification)
		LOAD
			 IDQualificationOrig,
			 IDTenderOrig,
			 DisqualGrpResID
		FROM $(TRN_QVD_PATH)Qualification_$(vPeriod).qvd (qvd);	 
		
		ELSE
		
		Left Join (Qualification)
		LOAD
			 Null() as DisqualGrpResID
		AutoGenerate 1;     
	ENDIF
	
	STORE  Qualification into $(TRN_QVD_PATH)Qualification_$(vPeriod).qvd (qvd);
	DROP Table Qualification;

NEXT

DROP Table QualificationTmp;

// Контракты

Contract_Tmp:
NoConcatenate
LOAD	[status_u6] as СтатусКонтракта,
	[awardID_u1] as IDAwardOrig,
	[id_u21] as IDContractOrig,
	[contractID_u0] as ИдентификаторКонтракта,
	[contractNumber_u0] as НомерКонтракта,
	[description_u10] as ОписаниеКонтракта,
	[title_u13] as Контракт,
	$(vDateConvert([dateSigned_u0])) as ДатаВремяПодписания,
	Date(Floor($(vDateConvert([dateSigned_u0])))) as ДатаПодписания,
	$(vDateConvert([date_u11])) as ДатаВремяАктивацииКонтракта,
	Date(Floor($(vDateConvert([date_u11])))) as ДатаАктивацииКонтракта,
	[__KEY_contracts_u0],
	[__FK_contracts_u0] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_contracts_u0]);

Left Join (Contract_Tmp)
LOAD	$(vDateConvert([startDate_u7])) as НачДатаКонтракта,
	$(vDateConvert([endDate_u7])) as КонДатаКонтракта,
	[__FK_period_u0] AS [__KEY_contracts_u0]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_period_u0]);

Left Join (Contract_Tmp)
LOAD	[currency_u7] as ВалютаКонтракта,
	[amount_u7] as СуммаКонтракта,
	[amountNet] as СуммаКонтрактаБезНДС,
	if(Lower([valueAddedTaxIncluded_u7])='true', 1, if(Lower([valueAddedTaxIncluded_u7])='false', 0, [valueAddedTaxIncluded_u7])) as НДСКонтракта,
	[yearlyPaymentsPercentage] as ContractYearlyPaymentsPercentage,
	[amountPerformance] as ContractAmountPerformance,
	[__KEY_value_u5],
	[__FK_value_u5] AS [__KEY_contracts_u0]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_value_u5]);

Left Join (Contract_Tmp) 
LOAD	[days_u3] as ContractDurationDays,
	[years_u3] as ContractDurationYears,
	[__FK_contractDuration] AS [__KEY_value_u5]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_contractDuration]);

annualCostsReduction: 
LOAD	[@Value],
		RowNo() as RN,
		[__FK_annualCostsReduction] AS [__KEY_value_u5]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_annualCostsReduction]);

Left Join (Contract_Tmp) 
LOAD
	 [__KEY_value_u5],
	 Concat([@Value], ';', RN) as ContractAnnualCostsReduction
Resident annualCostsReduction
Group By [__KEY_value_u5];

DROP Table annualCostsReduction; 

Left Join (Contract_Tmp)
LOAD	
	[id_u13] as IDTenderOrig,
	Mid([tenderID], 4, 4) as Year_Period,
	if(Lower([mode])='test', 1, 0) as TestFlag,
	[__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_data]);

DROP Fields __KEY_contracts_u0, __KEY_data From Contract_Tmp;

FOR Each vPeriod in FieldValueList('YearPeriod')

	Contract_:
	NoConcatenate
	LOAD
		*
	Resident Contract_Tmp
	Where Year_Period = $(vPeriod);	

	IF NOT IsNull(FileSize('$(TRN_QVD_PATH)Contract_$(vPeriod).qvd')) THEN
		Concatenate (Contract_)
		LOAD 
			 IDTenderOrig,
			 IDAwardOrig, 
		     IDContractOrig, 
		     ИдентификаторКонтракта, 
			 НомерКонтракта,
		     СтатусКонтракта, 
		     ОписаниеКонтракта, 
		     Контракт, 
		     КонДатаКонтракта, 
		     НачДатаКонтракта, 
		     СуммаКонтракта, 
		     СуммаКонтрактаБезНДС,
		     ВалютаКонтракта, 
		     НДСКонтракта, 
		     ДатаВремяПодписания,
		     ДатаПодписания,
		   	 ДатаВремяАктивацииКонтракта, 
			 ДатаАктивацииКонтракта,
			 ContractYearlyPaymentsPercentage, 
	         ContractAmountPerformance,
	         ContractDurationDays,
	         ContractDurationYears,
	         ContractAnnualCostsReduction
		FROM $(TRN_QVD_PATH)Contract_$(vPeriod).qvd (qvd)
		WHERE NOT EXISTS(IDContractOrig);
	ENDIF
	
	Contract:
	LOAD 
		 IDTenderOrig, 
	     AutoNumber(IDTenderOrig, 'IDTender')+$(vPeriod)*$(MulKey) as IDTenderKey,
		 IDAwardOrig, 
		 AutoNumber(IDTenderOrig&IDAwardOrig, 'IDAward')+$(vPeriod)*$(MulKey) as IDAwardKey,
	     IDContractOrig,
	     AutoNumber(IDContractOrig, 'IDContract')+$(vPeriod)*$(MulKey) as IDContract,
	     ИдентификаторКонтракта, 
		 НомерКонтракта, 
	     СтатусКонтракта, 
	     ОписаниеКонтракта, 
	     Контракт, 
	     КонДатаКонтракта, 
	     НачДатаКонтракта, 
	     СуммаКонтракта, 
	     СуммаКонтрактаБезНДС,
	     ВалютаКонтракта, 
	     НДСКонтракта, 
	     ДатаВремяПодписания,
	     ДатаПодписания,
	     ДатаВремяАктивацииКонтракта,
		 ДатаАктивацииКонтракта,
		 0 as isFromContracting,
		 ContractYearlyPaymentsPercentage, 
         ContractAmountPerformance,
         ContractDurationDays,
         ContractDurationYears,
         ContractAnnualCostsReduction
	Resident Contract_
	WHERE TestFlag <> 1; 
	
	DROP Table Contract_;     
	
	STORE  Contract into $(TRN_QVD_PATH)Contract_$(vPeriod).qvd (qvd);
	DROP Table Contract;

NEXT

DROP Table Contract_Tmp;

// Жалобы тендера

ComplaintTender_Tmp:
LOAD	
	[status_u2] as ComplaintTenderStatus,
	[description_u6] as ОписаниеЖалобыТендера,
	[title_u7] as ЖалобаТендера,
	$(vDateConvert([date_u2])) as ДатаЖалобыТендера,
	$(vDateConvert([dateSubmitted])) as ДатаПодачиТребованияЖалобыТендера,
	$(vDateConvert([dateAnswered])) as ДатаОтветаЗаказчикаНаТребованиеЖалобыТендера,
	$(vDateConvert([dateEscalated])) as ДатаЭскалацииТребованияЖалобыТендера,
	$(vDateConvert([dateDecision])) as ДатаПринятияРешенияПоТребованиюЖалобыТендера,
	$(vDateConvert([dateCanceled])) as ДатаОтклоненияЖалобыТендера,
	[id_u14] as IDComplaintTenderOrig,
	[complaintID] as ИдентификаторЖалобыТендера,
	[resolution] as РешениеЗаказчикаЖалобыТендера,
	[resolutionType] as resolutionTypeTender, // Тип Решения
	[type] as [Complaint tender type], // Тип Обращения
	if(Lower([satisfied])='true', 1, if(Lower([satisfied])='false', 0, [satisfied])) as УдовлетвореноЖалобыТендера,
	[decision] as РешениеОрганаОбжалованияЖалобыТендера,
	[cancellationReason] as ПричиныОтклоненияЖалобыТендера,
	relatedLot_u2 as IDLotOrig,
	[tendererAction] as ДействиеУчастникаЖалобыТендера,
	$(vDateConvert([tendererActionDate])) as ДатаДействияУчастникаЖалобыТендера,
	if(Lower([acceptance])='true', 1, if(Lower([acceptance])='false', 0, [acceptance])) as ПретензияУдовлетворенаЖалобыТендера,
	$(vDateConvert([dateAccepted])) as ДатаАкцептаЖалобыТендера,
	[rejectReason] as rejectReasonTender,
	[rejectReasonDescription] as ОписаниеПричиныОтклоненияЖалобыТендера,
	$(vDateConvert([reviewDate])) as ДатаРассмотренияЖалобыТендера,
	[reviewPlace] as МестоРассмотренияЖалобыТендера,
	[__KEY_complaints],
	[__FK_complaints] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_complaints]);

Left Join (ComplaintTender_Tmp)
LOAD	[name_u8] as ОрганизацияЖалобыТендера,
	[__KEY_author_u0],
	[__FK_author_u0] AS [__KEY_complaints]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_author_u0]);

Left Join (ComplaintTender_Tmp)
LOAD	[postalCode_u4] as ИндексЖалобыТендера,
	[countryName_u4] as СтранаЖалобыТендера,
	[streetAddress_u4] as АдресЖалобыТендера,
	[region_u4] as РегионЖалобыТендера,
	[locality_u4] as ГородЖалобыТендера,
	[__FK_address_u3] AS [__KEY_author_u0]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_address_u3]);

Left Join (ComplaintTender_Tmp)
LOAD	[scheme_u5] as СхемаЖалобыТендера,
	[id_u15Txt] as КодОргЖалобыТендера,
	[__FK_identifier_u3] AS [__KEY_author_u0]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_identifier_u3]);

Left Join (ComplaintTender_Tmp)
LOAD	[telephone_u3] as ТелефонЖалобыТендера,
	[name_u9] as ИмяЖалобыТендера,
	[email_u3] as ЭлАдресЖалобыТендера,
	[__FK_contactPoint_u3] AS [__KEY_author_u0]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_contactPoint_u3]);

Left Join (ComplaintTender_Tmp)
LOAD	
	[id_u13] as IDTenderOrig,
	[id_u13] as IDTender,
	Mid([tenderID], 4, 4) as Year_Period,
	if(Lower([mode])='test', 1, 0) as TestFlag,
	[__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_data]);

FOR Each vPeriod in FieldValueList('YearPeriod')

	ComplaintTender_:
	NoConcatenate
	LOAD
		*
	Resident ComplaintTender_Tmp
	Where Year_Period = $(vPeriod);	

	IF NOT IsNull(FileSize('$(TRN_QVD_PATH)ComplaintTender_$(vPeriod).qvd')) THEN
		Concatenate (ComplaintTender_) 
		LOAD 
			ComplaintTenderStatus,
			ОписаниеЖалобыТендера,
			ЖалобаТендера,
			ДатаЖалобыТендера,
			ДатаПодачиТребованияЖалобыТендера,
			ДатаОтветаЗаказчикаНаТребованиеЖалобыТендера,
			ДатаЭскалацииТребованияЖалобыТендера,
			ДатаПринятияРешенияПоТребованиюЖалобыТендера,
			ДатаОтклоненияЖалобыТендера,
			IDComplaintTenderOrig,
			ИдентификаторЖалобыТендера,
			РешениеЗаказчикаЖалобыТендера,
			resolutionTypeTender, 
			[Complaint tender type], 
			УдовлетвореноЖалобыТендера,
			РешениеОрганаОбжалованияЖалобыТендера,
			ПричиныОтклоненияЖалобыТендера,
			IDLotOrig,
			ДействиеУчастникаЖалобыТендера,
			ДатаДействияУчастникаЖалобыТендера,
			ОрганизацияЖалобыТендера,
			ИндексЖалобыТендера,
			СтранаЖалобыТендера,
			АдресЖалобыТендера,
			РегионЖалобыТендера,
			ГородЖалобыТендера,
			СхемаЖалобыТендера,
			КодОргЖалобыТендера,
			ТелефонЖалобыТендера,
			ИмяЖалобыТендера,
			ЭлАдресЖалобыТендера,
			ПретензияУдовлетворенаЖалобыТендера,
			ДатаАкцептаЖалобыТендера,
			rejectReasonTender,
			ОписаниеПричиныОтклоненияЖалобыТендера,
			ДатаРассмотренияЖалобыТендера,
			МестоРассмотренияЖалобыТендера,
			IDTenderOrig
		FROM $(TRN_QVD_PATH)ComplaintTender_$(vPeriod).qvd (qvd)
		WHERE NOT EXISTS(IDTender, IDTenderOrig);
	ENDIF
	
	ComplaintTender:
	LOAD      
	    ComplaintTenderStatus,
		ОписаниеЖалобыТендера,
		ЖалобаТендера,
		ДатаЖалобыТендера,
		ДатаПодачиТребованияЖалобыТендера,
		ДатаОтветаЗаказчикаНаТребованиеЖалобыТендера,
		ДатаЭскалацииТребованияЖалобыТендера,
		ДатаПринятияРешенияПоТребованиюЖалобыТендера,
		ДатаОтклоненияЖалобыТендера,
		IDComplaintTenderOrig,
		AutoNumber(IDTenderOrig&IDComplaintTenderOrig, 'IDComplaintTender')+$(vPeriod)*$(MulKey) as IDComplaintTender,
		ИдентификаторЖалобыТендера,
		РешениеЗаказчикаЖалобыТендера,
		resolutionTypeTender, 
		[Complaint tender type], 
		УдовлетвореноЖалобыТендера,
		РешениеОрганаОбжалованияЖалобыТендера,
		ПричиныОтклоненияЖалобыТендера,
		IDLotOrig,
		if(NOT IsNull(IDLotOrig), AutoNumber(IDTenderOrig&IDLotOrig, 'IDLot')+$(vPeriod)*$(MulKey)) as IDLotKey,
		ДействиеУчастникаЖалобыТендера,
		ДатаДействияУчастникаЖалобыТендера,
		ОрганизацияЖалобыТендера,
		ИндексЖалобыТендера,
		СтранаЖалобыТендера,
		АдресЖалобыТендера,
		РегионЖалобыТендера,
		ГородЖалобыТендера,
		СхемаЖалобыТендера,
		КодОргЖалобыТендера,
		ТелефонЖалобыТендера,
		ИмяЖалобыТендера,
		ЭлАдресЖалобыТендера,
		ПретензияУдовлетворенаЖалобыТендера,
		ДатаАкцептаЖалобыТендера,
		rejectReasonTender,
		ОписаниеПричиныОтклоненияЖалобыТендера,
		ДатаРассмотренияЖалобыТендера,
		МестоРассмотренияЖалобыТендера,
		IDTenderOrig,
		AutoNumber(IDTenderOrig, 'IDTender')+$(vPeriod)*$(MulKey) as IDTenderKey,
		'condition' as ComplaintLevel,
		if(IsNull(ОрганизацияЖалобыТендера), ИмяЖалобыТендера, ОрганизацияЖалобыТендера) as ПодавшийЖалобу,
		Date(Floor(ДатаЖалобыТендера)) as [ДатаЖалобы]
	Resident   ComplaintTender_
	WHERE TestFlag <> 1;
	
	DROP Table ComplaintTender_;   
	
	// Добавление ранее переведенных ПодавшихЖалобу
	IF NOT IsNull(FileSize('$(TRN_QVD_PATH)ComplaintTender_$(vPeriod).qvd')) THEN
		Left Join (ComplaintTender)
		LOAD
			 IDTenderOrig,
		     IDComplaintTenderOrig,
		     Complainant
		FROM $(TRN_QVD_PATH)ComplaintTender_$(vPeriod).qvd (qvd);	 
		
		ELSE
		
		Left Join (ComplaintTender)
		LOAD
			 Null() as Complainant
		AutoGenerate 1;     
	ENDIF
	
	STORE  ComplaintTender into $(TRN_QVD_PATH)ComplaintTender_$(vPeriod).qvd (qvd);
	DROP Table ComplaintTender;

NEXT

DROP TABLE ComplaintTender_Tmp;

// Предложения

BidTmp:
LOAD	
	[owner] as ПлощадкаПредложения,
	$(vDateConvert([date_u1])) as ДатаПредложения,
	[id_u12] as IDBidOrig,
	[participationUrl] as ВебАдресУчастия,
	[status_u3] as СтатусПредложения,
	[subcontractingDetails] as СубподрядчикПредложения,
	[selfEligible] as ПодтверждениеСоответствия,
	[selfQualified] as ПодтверждениеУчастия,
	[__KEY_bids],
	[__FK_bids] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_bids]);

Left Join (BidTmp)
LOAD	[currency_u1] as ВалютаПредложения,
	[amount_u1] as СуммаПредложения,
	if(Lower([valueAddedTaxIncluded_u1])='true', 1, if(Lower([valueAddedTaxIncluded_u1])='false', 0, [valueAddedTaxIncluded_u1])) as НДСПредложения,
	[yearlyPaymentsPercentage_u1] AS BidYearlyPaymentsPercentage, 
	[amountPerformance_u1] AS BidAmountPerformance,
	[__KEY_value_u0],
	[__FK_value_u0] AS [__KEY_bids]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_value_u0]);

Left Join (BidTmp) 
LOAD	[days_u1] AS BidContractDurationDays,
	[years_u1] AS BidContractDurationYears,
	[__FK_contractDuration_u1] AS [__KEY_value_u0]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_contractDuration_u1]);

annualCostsReduction_u1: 
LOAD	[@Value_u1],
		RowNo() as RN,
		[__FK_annualCostsReduction_u1] AS [__KEY_value_u0]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_annualCostsReduction_u1]);

Left Join (BidTmp) 
LOAD
	 [__KEY_value_u0],
	 Concat([@Value_u1], ';', RN) as BidAnnualCostsReduction
Resident annualCostsReduction_u1
Group By [__KEY_value_u0];

DROP Table annualCostsReduction_u1; 

Left Join (BidTmp)
LOAD	[relatedLot_u0] as IDLotOrig,
	$(vDateConvert([date_u7])) as ДатаПредложенияЛот,
	[participationUrl_u0] as ВебАдресУчастияЛот,
	[__KEY_lotValues],
	[__FK_lotValues] AS [__KEY_bids]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_lotValues]);

Left Join (BidTmp)
LOAD	[currency_u6] as ВалютаПредложенияЛот,
	[amount_u6] as СуммаПредложенияЛот,
	if(Lower([valueAddedTaxIncluded_u6])='true', 1, if(Lower([valueAddedTaxIncluded_u6])='false', 0, [valueAddedTaxIncluded_u6])) as НДСПредложенияЛот,
	[subcontractingDetails_u0] as СубподрядчикЛота,
	[yearlyPaymentsPercentage_u2] as BidYearlyPaymentsPercentageLot, 
	[amountPerformance_u2] as BidAmountPerformanceLot,
	[__KEY_value_u4],
	[__FK_value_u4] AS [__KEY_lotValues]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_value_u4]);

Left Join (BidTmp) 
LOAD	[days_u2] AS BidContractDurationDaysLot,
	[years_u2] AS BidContractDurationYearsLot,
	[__FK_contractDuration_u2] AS [__KEY_value_u4]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_contractDuration_u2]);

annualCostsReduction_u2: 
LOAD	[@Value_u2],
		RowNo() as RN,
		[__FK_annualCostsReduction_u2] AS [__KEY_value_u4]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_annualCostsReduction_u2]);

Left Join (BidTmp) 
LOAD
	 [__KEY_value_u4],
	 Concat([@Value_u2], ';', RN) as BidAnnualCostsReductionLot
Resident annualCostsReduction_u2
Group By [__KEY_value_u4];

DROP Table annualCostsReduction_u2; 

Left Join (BidTmp) 
LOAD	[days_u2] AS BidContractDurationDaysLot,
	[years_u2] AS BidContractDurationYearsLot,
	[__FK_contractDuration_u2] AS [__KEY_value_u4]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_contractDuration_u2]);

Left Join (BidTmp)
LOAD	
	[id_u13] as IDTenderOrig,
	Mid([tenderID], 4, 4) as Year_Period,
	if(Lower([mode])='test', 1, 0) as TestFlag,
	[__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_data]);

Left Join (BidTmp)
LOAD	
	[__KEY_tenderers],
	[__FK_tenderers] AS [__KEY_bids]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_tenderers]);

Left Join (BidTmp)
LOAD	
	[id_u11Txt] as IDTendererOrig,
	[__FK_identifier_u2] AS [__KEY_tenderers]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_identifier_u2]);

// Привязка лота к предложениям, у которых не указана ссылка на лот (tenderEU)
LotBidQualif:
LOAD	
	[bidID] as IDBidOrig,
	[lotID_u0] as IDLotOrigQualif,
	[__FK_qualifications] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_qualifications]);

Left Join (LotBidQualif)
LOAD	
	[id_u13] as IDTenderOrig,
	[__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_data]);

Left Join (LotBidQualif)
LOAD Distinct
	 IDBidOrig,
	 IDTenderOrig,
	 1 as NullLotFlag
Resident BidTmp
Where IsNull(IDLotOrig);	

Left Join (BidTmp)
LOAD Distinct	
	IDBidOrig,
	IDTenderOrig,
	IDLotOrigQualif
RESIDENT LotBidQualif
WHERE NullLotFlag=1; 

DROP Table LotBidQualif;

// Определение Bid из многолотовых тендеров
Left Join (BidTmp)
LOAD Distinct	
	1 as IsTenderLot,
	[__FK_lots] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_lots]);

// Добавление к Bid без привязки к лотам всех лотов из общего тендера
Bid_Tmp_NoLot:
NoConcatenate
LOAD
	ПлощадкаПредложения,
	ДатаПредложения,
	ВебАдресУчастия,
	IDBidOrig,
	IDTenderOrig&IDBidOrig as IDBidOrigFlag,
	СтатусПредложения,
	ВалютаПредложения,
	СуммаПредложения,
	НДСПредложения,
	СубподрядчикПредложения,
	ПодтверждениеСоответствия,
	ПодтверждениеУчастия,
//	IDLotOrig,
	IDTenderOrig,
	IDTenderOrig as IDTender,
	Year_Period,
	TestFlag,
	IDTendererOrig,
	[__KEY_data],
	0 as LotBidType,
	BidYearlyPaymentsPercentage, 
	BidAmountPerformance,
	BidAnnualCostsReduction,
	BidContractDurationDays,
	BidContractDurationYears
Resident BidTmp
Where IsTenderLot=1 AND IsNull(IDLotOrig) AND IsNull(IDLotOrigQualif);

Left Join (Bid_Tmp_NoLot)
LOAD 	
	[id_u20] as IDLotOrig,
	[__FK_lots] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_lots]);

Left Join (BidTmp)
LOAD Distinct
	 IDTenderOrig,
	 IDBidOrig,
	 IDTenderOrig&IDBidOrig as IDTenderBidOrig
Resident BidTmp;	 

Bid_Tmp:
NoConcatenate
LOAD
	ПлощадкаПредложения,
	ДатаПредложения,
	ДатаПредложенияЛот,
	ВебАдресУчастия&ВебАдресУчастияЛот as ВебАдресУчастия,
	IDBidOrig,
	СтатусПредложения,
	ВалютаПредложения&ВалютаПредложенияЛот as ВалютаПредложения,
	СуммаПредложения&СуммаПредложенияЛот as СуммаПредложения,
	НДСПредложения&НДСПредложенияЛот as НДСПредложения,
	СубподрядчикПредложения,
	СубподрядчикЛота,
	ПодтверждениеСоответствия,
	ПодтверждениеУчастия,
	if(IsNull(IDLotOrig) AND IsNull(IDLotOrigQualif), 'Lot'&IDTenderOrig, if(IsNull(IDLotOrig) AND NOT IsNull(IDLotOrigQualif), IDLotOrigQualif, IDLotOrig)) as IDLotOrig,
	IDTenderOrig,
	IDTenderOrig as IDTender,
	Year_Period,
	TestFlag,
	IDTendererOrig,
	1 as LotBidType,
	BidYearlyPaymentsPercentage&BidYearlyPaymentsPercentageLot as BidYearlyPaymentsPercentage, 
	BidAmountPerformance&BidAmountPerformanceLot as BidAmountPerformance,
	BidAnnualCostsReduction&BidAnnualCostsReductionLot as BidAnnualCostsReduction,
	BidContractDurationDays&BidContractDurationDaysLot as BidContractDurationDays,
	BidContractDurationYears&BidContractDurationYearsLot as BidContractDurationYears
Resident BidTmp
Where NOT Exists(IDBidOrigFlag, IDTenderBidOrig); // Загрузка Bid, у которых указана ссылка на лот

DROP Table BidTmp;

Concatenate (Bid_Tmp)
LOAD
	ПлощадкаПредложения,
	ДатаПредложения,
	ВебАдресУчастия,
	IDBidOrig,
	СтатусПредложения,
	ВалютаПредложения,
	СуммаПредложения,
	НДСПредложения,
	СубподрядчикПредложения,
	ПодтверждениеСоответствия,
	ПодтверждениеУчастия,
	IDLotOrig,
	IDTenderOrig,
	IDTender,
	Year_Period,
	TestFlag,
	IDTendererOrig,
	LotBidType,
	BidYearlyPaymentsPercentage, 
	BidAmountPerformance,
	BidAnnualCostsReduction,
	BidContractDurationDays,
	BidContractDurationYears
Resident Bid_Tmp_NoLot;

DROP Table Bid_Tmp_NoLot;

FOR Each vPeriod in FieldValueList('YearPeriod')
	
	Bid_:
	NoConcatenate
	LOAD
		*
	Resident Bid_Tmp
	Where Year_Period = $(vPeriod);	

	IF NOT IsNull(FileSize('$(TRN_QVD_PATH)Bid_$(vPeriod).qvd')) THEN
		Concatenate (Bid_)
		LOAD
		    ПлощадкаПредложения,
			ДатаПредложения,
			ДатаПредложенияЛот,
			ВебАдресУчастия,
			IDBidOrig,
			СтатусПредложения,
			ВалютаПредложения,
			СуммаПредложения,
			НДСПредложения,
			СубподрядчикПредложения, 
			СубподрядчикЛота,
			ПодтверждениеСоответствия, 
			ПодтверждениеУчастия,
			IDLotOrig,
			IDTenderOrig,
			IDTendererOrig,
			LotBidType,
			BidYearlyPaymentsPercentage, 
			BidAmountPerformance,
			BidAnnualCostsReduction,
			BidContractDurationDays,
			BidContractDurationYears 
		FROM $(TRN_QVD_PATH)Bid_$(vPeriod).qvd (qvd)
		WHERE NOT EXISTS(IDTender, IDTenderOrig);
	ENDIF
	
	Bid:
	LOAD      
	    ПлощадкаПредложения,
		ДатаПредложения,
		ДатаПредложенияЛот,
		ВебАдресУчастия,
		IDBidOrig,
		AutoNumber(IDTenderOrig&IDBidOrig, 'IDBid')+$(vPeriod)*$(MulKey) as IDBid,
		СтатусПредложения,
		ВалютаПредложения,
		СуммаПредложения,
		НДСПредложения,
		СубподрядчикПредложения,
		СубподрядчикЛота,
		ПодтверждениеСоответствия,
		ПодтверждениеУчастия,
		IDLotOrig,
		AutoNumber(IDTenderOrig&IDLotOrig, 'IDLot')+$(vPeriod)*$(MulKey) as IDLotKey,
		IDTenderOrig,
		AutoNumber(IDTenderOrig, 'IDTender')+$(vPeriod)*$(MulKey) as IDTenderKey,
		IDTendererOrig,
		AutoNumber(IDTendererOrig, 'IDTenderer')+$(vPeriod)*$(MulKey) as IDTendererKey,
		AutoNumber(IDTenderOrig&IDLotOrig&IDBidOrig, 'KeyLotBid')+$(vPeriod)*$(MulKey) as KeyLotBid,
		LotBidType,
		BidYearlyPaymentsPercentage, 
		BidAmountPerformance,
		BidAnnualCostsReduction,
		BidContractDurationDays,
		BidContractDurationYears 
	Resident  Bid_
	WHERE TestFlag <> 1;
	
	DROP Table Bid_;    
	
	STORE  Bid into $(TRN_QVD_PATH)Bid_$(vPeriod).qvd (qvd);
	DROP Table Bid;
	
NEXT	

DROP Table Bid_Tmp;

// Вопросы

Question_Tmp:
LOAD	
	[description] as Вопрос,
	[title] as ЗаголовокВопроса,
	[answer] as Ответ,
	$(vDateConvert([date])) as ДатаВремяВопроса,
	$(vDateConvert(dateAnswered_u2)) as ДатаВремяОтвета,
	[id_u1] as IDQuestionOrig,
	[questionOf],
	[relatedItem_u0],
	[__KEY_questions],
	[__FK_questions] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_questions]);

Left Join (Question_Tmp)
LOAD	[name_u2] as ВопросОтОрганизация,
	[__KEY_author],
	[__FK_author] AS [__KEY_questions]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_author]);

Left Join (Question_Tmp)
LOAD	[telephone_u0] as ВопросОтТелефон,
	[url_u0] as ВопросОтUrl,
	[name_u1] as ВопросОтИмя,
	[email_u0] as ВопросОтEmail,
	[__FK_contactPoint_u0] AS [__KEY_author]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_contactPoint_u0]);

Left Join (Question_Tmp)
LOAD	[scheme_u0] as ВопросОтСхема,
	[id_u0Txt] as ВопросОтIDOrg,
	[legalName_u0] as ВопросОтЮрНазваниеОрганизации,
	[__FK_identifier_u0] AS [__KEY_author]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_identifier_u0]);

Left Join (Question_Tmp)
LOAD	[postalCode_u0] as ВопросОтИндекс,
	[countryName_u0] as ВопросОтСтрана,
	[streetAddress_u0] as ВопросОтАдрес,
	[region_u0] as ВопросОтРегион,
	[locality_u0] as ВопросОтГород,
	[__FK_address_u0] AS [__KEY_author]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_address_u0]);

Left Join (Question_Tmp)
LOAD	
	[id_u13] as IDTenderOrig,
	[id_u13] as IDTender,
	Mid([tenderID], 4, 4) as Year_Period,
	if(Lower([mode])='test', 1, 0) as TestFlag,
	[__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_data]);

FOR Each vPeriod in FieldValueList('YearPeriod')

	QuestionTmp:
	LOAD
		Вопрос,
		ЗаголовокВопроса,
		Ответ,
		ДатаВремяВопроса,
		ДатаВремяОтвета,
		IDQuestionOrig,
		questionOf,
		if(questionOf = 'item', relatedItem_u0) as IDItemOrig,
	    if(questionOf = 'lot', relatedItem_u0) as IDLotOrig,
	    IDTenderOrig,
	    TestFlag,
	    IDTender,
		ВопросОтОрганизация,
		ВопросОтТелефон,
		ВопросОтUrl,
		ВопросОтИмя,
		ВопросОтEmail,
		ВопросОтСхема,
		ВопросОтIDOrg,
		ВопросОтЮрНазваниеОрганизации,
		ВопросОтИндекс,
		ВопросОтСтрана,
		ВопросОтАдрес,
		ВопросОтРегион,
		ВопросОтГород
	Resident Question_Tmp
	Where Year_Period = $(vPeriod);
	
	IF NOT IsNull(FileSize('$(TRN_QVD_PATH)Question_$(vPeriod).qvd')) THEN
		Concatenate (QuestionTmp)
		LOAD 
			IDTenderOrig,
			ДатаВремяВопроса,
			ДатаВремяОтвета,
			Вопрос,
			IDQuestionOrig,
			questionOf,
			IDItemOrig,
		    IDLotOrig,
			ЗаголовокВопроса,
			Ответ,
			ВопросОтEmail,
			ВопросОтИмя,
			ВопросОтТелефон,
			ВопросОтUrl, 
			ВопросОтIDOrg,
			ВопросОтОрганизация,
			ВопросОтСхема,
			ВопросОтЮрНазваниеОрганизации,
			ВопросОтСтрана,
			ВопросОтГород,
			ВопросОтИндекс,
			ВопросОтРегион,
			ВопросОтАдрес
		FROM $(TRN_QVD_PATH)Question_$(vPeriod).qvd (qvd)
		WHERE NOT EXISTS(IDTender, IDTenderOrig);
	ENDIF
	
	Question:
	NoConcatenate
	LOAD 
		IDTenderOrig,
		AutoNumber(IDTenderOrig, 'IDTender')+$(vPeriod)*$(MulKey) as IDTenderKey,
		ДатаВремяВопроса,
		ДатаВремяОтвета,
		Вопрос,
		IDQuestionOrig,
		AutoNumber(IDTenderOrig&IDQuestionOrig, 'IDQuestion')+$(vPeriod)*$(MulKey) as IDQuestion,
		questionOf,
		IDItemOrig,
		if(NOT IsNull(IDItemOrig), AutoNumber(IDTenderOrig&IDItemOrig, 'IDItem')+$(vPeriod)*$(MulKey)) as IDItemKey,
	    IDLotOrig, 
	    if(NOT IsNull(IDLotOrig), AutoNumber(IDTenderOrig&IDLotOrig, 'IDLot')+$(vPeriod)*$(MulKey)) as IDLotKey,
		ЗаголовокВопроса,
		Ответ,
		ВопросОтEmail,
		ВопросОтИмя,
		ВопросОтТелефон,
		ВопросОтUrl,
		ВопросОтIDOrg,
		ВопросОтОрганизация,
		ВопросОтСхема,
		ВопросОтЮрНазваниеОрганизации,
		ВопросОтСтрана,
		ВопросОтГород,
		ВопросОтИндекс,
		ВопросОтРегион,
		ВопросОтАдрес
	Resident QuestionTmp
	WHERE TestFlag <> 1;	
	
	DROP Table QuestionTmp;
	
	STORE  Question into $(TRN_QVD_PATH)Question_$(vPeriod).qvd (qvd);
	DROP Table Question;
	
NEXT	

DROP Table Question_Tmp;

// ================ Неценовые критерии (НЦК) ================

// Заголовки критериев
Features_Tmp:
LOAD	[code_u0] as IDFeatureOrig,
	[featureOf], // Обязательно
	[relatedItem],
	[description_u7] as [Описание критерия],
	[title_u10] as [Название критерия], // Обязательно
	[__KEY_features],
	[__FK_features] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_features]);

Left Join (Features_Tmp)
LOAD	
	[id_u13] as IDTenderOrig,
	[id_u13] as IDTender,
	Mid([tenderID], 4, 4) as Year_Period,
	if(Lower([mode])='test', 1, 0) as TestFlag,
	[__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_data]);

// Значения критериев
Left Join (Features_Tmp)
LOAD	[description_u8] as [Описание значения],
	[value] as [Значение критерия], // Обязательно
	[title_u11] as [Название значения], // Обязательно
	[__FK_enum] AS [__KEY_features]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_enum]);

// Значения НЦК в предложениях (IDFeatureOrig ключ в рамках тендера)
Parameters:
LOAD	[code_u5] as IDFeatureOrig,
	[value_u0] as [Значение критерия],
	[__FK_parameters] AS [__KEY_bids]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_parameters]);

Left Join (Parameters)
LOAD	
	[id_u12] as IDBidOrig,
	[__KEY_bids],
	[__FK_bids] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_bids]);

Left Join (Features_Tmp)
LOAD	
	 IDFeatureOrig,
	 [Значение критерия],
	 IDBidOrig,
	 [__KEY_data]
Resident Parameters;

DROP Table Parameters;	

FOR Each vPeriod in FieldValueList('YearPeriod')

	FeaturesTmp:
	LOAD 
	 	 IDTenderOrig,
	 	 IDTender,
	 	 TestFlag,
		 IDFeatureOrig,
		 if(featureOf = 'item', relatedItem) as IDItemOrig,
	     if(featureOf = 'lot', relatedItem) as IDLotOrig,
	     featureOf, 
	     [Описание критерия],
	     [Название критерия],
	     [Описание значения],
	     [Название значения],
	     [Значение критерия],
	     IDBidOrig
	Resident Features_Tmp;
	
	IF NOT IsNull(FileSize('$(TRN_QVD_PATH)Features_$(vPeriod).qvd')) THEN
		Concatenate (FeaturesTmp)
		LOAD 
		 	 IDTenderOrig,
			 IDFeatureOrig,
		     IDItemOrig,
		     IDLotOrig,
		     featureOf, 
		     [Описание критерия],
		     [Название критерия],
		     [Описание значения],
		     [Название значения],
		     [Значение критерия],
		     IDBidOrig
		FROM $(TRN_QVD_PATH)Features_$(vPeriod).qvd (qvd)
		Where NOT Exists(IDTender, IDTenderOrig);
	ENDIF
	
	Features:
	LOAD 
	 	 IDTenderOrig,
	 	 AutoNumber(IDTenderOrig, 'IDTender')+$(vPeriod)*$(MulKey) as IDTenderKey,
		 IDFeatureOrig,
	     IDItemOrig, 
	     if(NOT IsNull(IDItemOrig), AutoNumber(IDTenderOrig&IDItemOrig, 'IDItem')+$(vPeriod)*$(MulKey)) as IDItemKey,
	     IDLotOrig,
	     if(NOT IsNull(IDLotOrig), AutoNumber(IDTenderOrig&IDLotOrig, 'IDLot')+$(vPeriod)*$(MulKey)) as IDLotKey,
	     featureOf,
	     [Описание критерия],
	     [Название критерия],
	     [Описание значения],
	     [Название значения],
	     [Значение критерия],
	     IDBidOrig,
	     if(NOT IsNull(IDBidOrig), AutoNumber(IDTenderOrig&IDBidOrig, 'IDBid')+$(vPeriod)*$(MulKey)) as IDBidKey,
	     AutoNumber(IDTenderOrig&IDFeatureOrig, 'KeyFeature')+$(vPeriod)*$(MulKey) as KeyFeature
	Resident FeaturesTmp
	WHERE TestFlag <> 1;  
	
	DROP Table FeaturesTmp;   
	
	STORE  Features into $(TRN_QVD_PATH)Features_$(vPeriod).qvd (qvd);
	DROP Table Features;
	
NEXT	

DROP Table Features_Tmp;  

// Справочник Участники
//https://docs.google.com/document/d/1CE7N6JAQEkyxwHGm4uPol-FylyA6Ab7U_3KNTqPesiw/edit

Tenderer_Tmp:
LOAD	[name_u7] as ОрганизацияУчастника,
	[name_en_u2] as Tenderer,
	[scale],
	[__KEY_tenderers],
	[__FK_tenderers] AS [__KEY_bids]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_tenderers]);

Left Join (Tenderer_Tmp)
LOAD Distinct	
	[telephone_u2] as ТелефонУчастника,
	[url_u6] as СайтУчастника,
	[faxNumber_u0] as ФаксУчастника,
	[name_u6] as ИмяУчастника,
	[name_en_u3] as contactPointTenderer,
	[email_u2] as EmailУчастника,
	[__FK_contactPoint_u2] AS [__KEY_tenderers]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_contactPoint_u2]);

Left Join (Tenderer_Tmp)
LOAD Distinct
	[scheme_u4] as СхемаУчастника,
	[id_u11Txt] as IDTendererOrig,
	[legalName_u2] as ЮрНазваниеУчастника,
	[legalName_en_u1] as legalNameTenderer,
	[__FK_identifier_u2] AS [__KEY_tenderers]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_identifier_u2]);

Left Join (Tenderer_Tmp)
LOAD Distinct
	[postalCode_u3] as ИндексУчастника,
	[countryName_u3] as СтранаУчастника,
	[streetAddress_u3] as АдресУчастника,
	[region_u3] as РегионУчастника,
	[locality_u3] as ГородУчастника,
	[__FK_address_u2] AS [__KEY_tenderers]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_address_u2]);

Left Join (Tenderer_Tmp)
LOAD	
	$(vDateConvert([date_u1])) as DateTimeTenderer,
	[__KEY_bids],
	[__FK_bids] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_bids]);

Left Join (Tenderer_Tmp)
LOAD	
	[tenderID] as FromTenderId,
	[id_u13] as IDTenderOrig,
	if(Lower([mode])='test', 1, 0) as TestFlag,
	[__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_data]);

TendererTmp:
NoConcatenate
LOAD
	 DateTimeTenderer, 
     СтранаУчастника, 
     ГородУчастника, 
     ИндексУчастника, 
     РегионУчастника, 
     АдресУчастника, 
     EmailУчастника, 
     ИмяУчастника, 
     ТелефонУчастника,
     СайтУчастника, 
     ФаксУчастника, 
     IDTendererOrig, 
     ЮрНазваниеУчастника, 
     СхемаУчастника,
     Tenderer,
     contactPointTenderer,
     legalNameTenderer,
     if(IsNull(ОрганизацияУчастника), ИмяУчастника, ОрганизацияУчастника) as Участник,
     'competitive' as procedureType,
     FromTenderId,
     scale 
Resident Tenderer_Tmp
WHERE TestFlag <> 1;

DROP Table Tenderer_Tmp;	


IF NOT IsNull(FileSize('$(DIC_QVD_PATH)Tenderer.qvd')) THEN
	procedureTypeCompet:
	LOAD * Inline [
	procedureTypeCompet
	competitive
	];
	
	Concatenate (TendererTmp)
	LOAD DateTimeTenderer, 
	     СтранаУчастника, 
	     ГородУчастника, 
	     ИндексУчастника, 
	     РегионУчастника, 
	     АдресУчастника, 
	     EmailУчастника, 
	     ИмяУчастника, 
	     ТелефонУчастника,
	     СайтУчастника, 
	     ФаксУчастника, 
	     IDTendererOrig, 
	     ЮрНазваниеУчастника, 
	     СхемаУчастника, 
	     Участник,
	     Tenderer,
	     contactPointTenderer,
	     legalNameTenderer,
	     procedureType,
	     FromTenderId,
	     scale
	FROM $(DIC_QVD_PATH)Tenderer.qvd (qvd)
	Where Exists(procedureTypeCompet, procedureType);
	
	DROP Table procedureTypeCompet;
ENDIF

Tenderer:
NoConcatenate
LOAD 
	 LastValue(DateTimeTenderer) as DateTimeTenderer,
	 LastValue(СтранаУчастника) as СтранаУчастника, 
	 LastValue(ГородУчастника) as ГородУчастника, 
     LastValue(ИндексУчастника) as ИндексУчастника, 
     LastValue(РегионУчастника) as РегионУчастника, 
     LastValue(АдресУчастника) as АдресУчастника, 
     LastValue(EmailУчастника) as EmailУчастника,
     LastValue(ИмяУчастника) as ИмяУчастника, 
     LastValue(ТелефонУчастника) as ТелефонУчастника, 
     LastValue(ФаксУчастника) as ФаксУчастника,
     LastValue(СайтУчастника) as СайтУчастника,
     IDTendererOrig, 
     LastValue(ЮрНазваниеУчастника) as ЮрНазваниеУчастника, 
     LastValue(СхемаУчастника) as СхемаУчастника, 
     LastValue(Участник) as Участник,
     LastValue(Tenderer) as Tenderer,
     LastValue(contactPointTenderer) as contactPointTenderer,
     LastValue(legalNameTenderer) as legalNameTenderer,
     LastValue(procedureType) as procedureType,
     LastValue(FromTenderId) as FromTenderId,
     LastValue(scale) as scale
Resident  TendererTmp
Group By IDTendererOrig
Order By DateTimeTenderer;

DROP Table TendererTmp;

// Участники из Awards (переговорных процедур)

// Определение тендеров с переговорными процедурами

Limited_Awards:
LOAD	Distinct
	 [__KEY_data] as __KEY_data_Limited
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_data]) AND Lower(procurementMethod) = 'limited';

Suppliers_Tmp:
LOAD
	[__KEY_awards],
	$(vDateConvert([date_u0])) as DateTimeTenderer,
	[__FK_awards] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_awards]) AND EXISTS(__KEY_data_Limited, __FK_awards);	

DROP Table Limited_Awards;

Left Join (Suppliers_Tmp)
LOAD	[name_u10] as ОрганизацияУчастника,
	[name_en_u4] as Tenderer,
	[scale_u0] as scale,
	[__KEY_suppliers],
	[__FK_suppliers] AS [__KEY_awards]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_suppliers]);

Left Join (Suppliers_Tmp)
LOAD Distinct	
	[telephone_u4] as ТелефонУчастника,
	[url_u10] as СайтУчастника,
	[faxNumber_u1] as ФаксУчастника,
	[name_u11] as ИмяУчастника,
	[name_en_u5] as contactPointTenderer,
	[email_u4] as EmailУчастника,
	[__FK_contactPoint_u4] AS [__KEY_suppliers]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_contactPoint_u4]);

Left Join (Suppliers_Tmp)
LOAD Distinct
	[scheme_u6] as СхемаУчастника,
	[id_u23Txt] as IDTendererOrig,
	[legalName_u3] as ЮрНазваниеУчастника,
	[legalName_en_u2] as legalNameTenderer,
	[__FK_identifier_u4] AS [__KEY_suppliers]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_identifier_u4]);

Left Join (Suppliers_Tmp)
LOAD Distinct
	[postalCode_u5] as ИндексУчастника,
	[countryName_u5] as СтранаУчастника,
	[streetAddress_u5] as АдресУчастника,
	[region_u5] as РегионУчастника,
	[locality_u5] as ГородУчастника,
	[__FK_address_u4] AS [__KEY_suppliers]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_address_u4]);

Left Join (Suppliers_Tmp)
LOAD	
	[tenderID] as FromTenderId,
	[id_u13] as IDTenderOrig,
	if(Lower([mode])='test', 1, 0) as TestFlag,
	[__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_data]);

SuppliersTmp:
NoConcatenate
LOAD
	 DateTimeTenderer, 
     СтранаУчастника, 
     ГородУчастника, 
     ИндексУчастника, 
     РегионУчастника, 
     АдресУчастника, 
     EmailУчастника, 
     ИмяУчастника, 
     ТелефонУчастника,
     СайтУчастника, 
     ФаксУчастника, 
     IDTendererOrig, 
     ЮрНазваниеУчастника, 
     СхемаУчастника,
     Tenderer,
     contactPointTenderer,
     legalNameTenderer,
     if(IsNull(ОрганизацияУчастника), ИмяУчастника, ОрганизацияУчастника) as Участник,
     'noncompetitive' as procedureType,
     FromTenderId,
     scale
Resident 	Suppliers_Tmp
WHERE TestFlag <> 1;

DROP Table Suppliers_Tmp;

IF NOT IsNull(FileSize('$(DIC_QVD_PATH)Tenderer.qvd'))  THEN
	procedureTypeNotCompet:
	LOAD * Inline [
	procedureTypeNotCompet
	noncompetitive
	];
	
	Concatenate (SuppliersTmp)
	LOAD DateTimeTenderer, 
	     СтранаУчастника, 
	     ГородУчастника, 
	     ИндексУчастника, 
	     РегионУчастника, 
	     АдресУчастника, 
	     EmailУчастника, 
	     ИмяУчастника, 
	     ТелефонУчастника,
	     СайтУчастника, 
	     ФаксУчастника, 
	     IDTendererOrig, 
	     ЮрНазваниеУчастника, 
	     СхемаУчастника, 
	     Участник,
	     Tenderer,
	     contactPointTenderer,
	     legalNameTenderer,
	     procedureType,
	     FromTenderId,
	     scale
	FROM $(DIC_QVD_PATH)Tenderer.qvd (qvd)
	Where Exists(procedureTypeNotCompet, procedureType);
	
	DROP Table procedureTypeNotCompet;
ENDIF

SuppliersTmp1:
NoConcatenate
LOAD 
	 LastValue(DateTimeTenderer) as DateTimeTenderer,
	 LastValue(СтранаУчастника) as СтранаУчастника, 
	 LastValue(ГородУчастника) as ГородУчастника, 
     LastValue(ИндексУчастника) as ИндексУчастника, 
     LastValue(РегионУчастника) as РегионУчастника, 
     LastValue(АдресУчастника) as АдресУчастника, 
     LastValue(EmailУчастника) as EmailУчастника,
     LastValue(ИмяУчастника) as ИмяУчастника, 
     LastValue(ТелефонУчастника) as ТелефонУчастника, 
     LastValue(ФаксУчастника) as ФаксУчастника,
     LastValue(СайтУчастника) as СайтУчастника,
     IDTendererOrig, 
     LastValue(ЮрНазваниеУчастника) as ЮрНазваниеУчастника, 
     LastValue(СхемаУчастника) as СхемаУчастника, 
     LastValue(Участник) as Участник,
     LastValue(Tenderer) as Tenderer,
     LastValue(contactPointTenderer) as contactPointTenderer,
     LastValue(legalNameTenderer) as legalNameTenderer,
     LastValue(procedureType) as procedureType,
     LastValue(FromTenderId) as FromTenderId,
     LastValue(scale) as scale
Resident  SuppliersTmp
Group By IDTendererOrig
Order By DateTimeTenderer;

DROP Table SuppliersTmp;  

CompetTenderers:
LOAD
	IDTendererOrig as IDTendererOrigCompet
Resident Tenderer;	

Concatenate (Tenderer)
LOAD DateTimeTenderer, 
     СтранаУчастника, 
     ГородУчастника, 
     ИндексУчастника, 
     РегионУчастника, 
     АдресУчастника, 
     EmailУчастника, 
     ИмяУчастника, 
     ТелефонУчастника,
     СайтУчастника, 
     ФаксУчастника, 
     IDTendererOrig, 
     ЮрНазваниеУчастника, 
     СхемаУчастника, 
     Участник,
     Tenderer,
     contactPointTenderer,
     legalNameTenderer,
     procedureType,
     FromTenderId,
     scale
Resident   SuppliersTmp1
Where NOT Exists(IDTendererOrigCompet, IDTendererOrig);

DROP Tables SuppliersTmp1, CompetTenderers;   

// Добавление ранее переведенных участников, городов, регионов и стран; ссылок на профиль в YouControl
IF NOT IsNull(FileSize('$(DIC_QVD_PATH)Tenderer.qvd'))  THEN
	Left Join (Tenderer)
	LOAD
		 IDTendererOrig,
		 TendererEN,
	     [Tenderer city],
	     [Tenderer region],
	     [Tenderer country],
	     "Посилання на профіль в YouControl",
		 TendererYCResponseCode,
		 [Дата реєстрації юридичної особи],
		 RegDateStatus
	FROM $(DIC_QVD_PATH)Tenderer.qvd (qvd);	 
	
	ELSE
	
	Left Join (Tenderer)
	LOAD
		 Null() as TendererEN,
	     Null() as [Tenderer city],
	     Null() as [Tenderer region],
	     Null() as [Tenderer country],
	     Null() as "Посилання на профіль в YouControl",
		 Null() as TendererYCResponseCode,
		 Null() as [Дата реєстрації юридичної особи],
		 Null() as RegDateStatus
	AutoGenerate 1;     
ENDIF

STORE  Tenderer into $(DIC_QVD_PATH)Tenderer.qvd (qvd);
DROP Table Tenderer; 

// Справочник Дополнительный Классификатор

AdditionalClassification_Tmp:
LOAD	[scheme_u3] as СхемаДопКлас,
	[id_u9Txt] as ItemAddClasId,
	[description_u2] as ОписаниеКласс,
	[__FK_additionalClassifications] AS [__KEY_items] // As Товар, его код в рамках тендера
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_additionalClassifications]);

Left Join (AdditionalClassification_Tmp)
LOAD Distinct	
	[id_u8] as IDClassCPV,
	[__FK_classification] AS [__KEY_items]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_classification]);

Left Join (AdditionalClassification_Tmp)
LOAD	
	[__KEY_items],
	[__FK_items] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_items]);

Left Join (AdditionalClassification_Tmp)
LOAD	
	[id_u13] as IDTenderOrig,
	[id_u13] as IDTender,
	Mid([tenderID], 4, 4) as Year_Period,
	if(Lower([mode])='test', 1, 0) as TestFlag,
	[__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_data]);

Left Join (AdditionalClassification_Tmp)
LOAD	[id_u16] as IDItemOrig,
		[relatedLot] as IDLotOrig,
		[__KEY_items],
		[__FK_items] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_items]);

FOR Each vPeriod in FieldValueList('YearPeriod')

	AdditionalClassificationTmp:
	NoConcatenate
	LOAD
		IDItemOrig,
		СхемаДопКлас,
		ItemAddClasId,
		ОписаниеКласс,
		IDClassCPV,
		IDTenderOrig,
		IDTender,
		TestFlag,
		if(IsNull(IDLotOrig), 'Lot'&IDTenderOrig, IDLotOrig) as IDLotOrig
	Resident AdditionalClassification_Tmp
	Where Year_Period = $(vPeriod);	
	
	IF NOT IsNull(FileSize('$(TRN_QVD_PATH)AdditionalClassification_$(vPeriod).qvd')) THEN
		Concatenate (AdditionalClassificationTmp)
		LOAD 
			 IDTenderOrig,
			 IDClassCPV, 
		     ОписаниеКласс, 
		     ItemAddClasId, 
		     СхемаДопКлас,
		     IDItemOrig,
		     IDLotOrig
		FROM $(TRN_QVD_PATH)AdditionalClassification_$(vPeriod).qvd (qvd)
		Where NOT Exists(IDTender, IDTenderOrig);
	ENDIF
	
	AdditionalClassification:
	LOAD 
		 IDTenderOrig,
		 IDClassCPV,
//		 AutoNumber(ItemAddClasId, 'IDClassDKPPKey')+$(vPeriod)*$(MulKey) as IDClassDKPPKey,
		 AutoNumber(IDTenderOrig&IDLotOrig&IDClassCPV&IDItemOrig, 'IDClassItemDKPPKey')+$(vPeriod)*$(MulKey) as IDClassItemDKPPKey,
		 ОписаниеКласс,  
	     ItemAddClasId, 
	     СхемаДопКлас,
	     IDItemOrig,
	     IDLotOrig,
	     AutoNumber(IDTenderOrig, 'IDTender')+$(vPeriod)*$(MulKey) as IDTenderKey
	Resident AdditionalClassificationTmp
	WHERE TestFlag <> 1;
	
	DROP Table AdditionalClassificationTmp;
	
	STORE  AdditionalClassification into $(TRN_QVD_PATH)AdditionalClassification_$(vPeriod).qvd (qvd);
	DROP Table AdditionalClassification; 
	
NEXT	

DROP Table AdditionalClassification_Tmp;

// Товары Тендера

TenderItem_Tmp:
LOAD	[description_u3] as Товар,
	[quantity] as Количество,
	[id_u16] as IDItemOrig,
	[relatedLot] as IDLotOrig,
	[__KEY_items],
	[__FK_items] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_items]);

Left Join (TenderItem_Tmp)
LOAD	
	[id_u8] as IDClassCPV,
	[__FK_classification] AS [__KEY_items]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_classification]);

Left Join (TenderItem_Tmp)
LOAD	$(vDateConvert([startDate_u4])) as НачДатаПоставки,
	$(vDateConvert([endDate_u4])) as КонДатаПоставки,
	[__FK_deliveryDate] AS [__KEY_items]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_deliveryDate]);

Left Join (TenderItem_Tmp)
LOAD	[code] as ItemUnitCode,
	[name_u5] as ЕдИзмерения,
	[__FK_unit] AS [__KEY_items]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_unit]);

Left Join (TenderItem_Tmp)
LOAD	[postalCode_u2] as [Индекс поставки],
	[countryName_u2] as [Страна поставки],
	[streetAddress_u2] as [Адрес поставки],
	[region_u2] as [Регион поставки],
	[locality_u2] as [Город поставки],
	[__FK_deliveryAddress] AS [__KEY_items]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_deliveryAddress]);

Left Join (TenderItem_Tmp)
LOAD	[latitude] as Широта,
	[longitude] as Долгота,
	[__FK_deliveryLocation] AS [__KEY_items]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_deliveryLocation]);

Left Join (TenderItem_Tmp)
LOAD	
	[id_u13] as IDTenderOrig,
	[id_u13] as IDTender,
	Mid([tenderID], 4, 4) as Year_Period,
	if(Lower([mode])='test', 1, 0) as TestFlag,
	[__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_data]);

Left Join (TenderItem_Tmp)
LOAD Distinct	
	1 as IsMultiLot,
	[__FK_lots] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_lots]);

FOR Each vPeriod in FieldValueList('YearPeriod')

	TenderItemTmp:
	LOAD
		Товар,
		Количество,
		IDItemOrig,
		if(IsNull(IDLotOrig) AND IsMultiLot <> 1, 'Lot'&IDTenderOrig, IDLotOrig) as IDLotOrig,
		IDClassCPV,
		НачДатаПоставки,
		КонДатаПоставки,
		ItemUnitCode,
		ЕдИзмерения,
		[Индекс поставки],
		[Страна поставки],
		[Адрес поставки],
		[Регион поставки],
		[Город поставки],
		Широта,
		Долгота,
		IDTenderOrig,
		IDTender,
		TestFlag,
		IsMultiLot
	Resident TenderItem_Tmp
	Where Year_Period = $(vPeriod);
	
	IF NOT IsNull(FileSize('$(TRN_QVD_PATH)TenderItem_$(vPeriod).qvd')) THEN
		Concatenate (TenderItemTmp)
		LOAD IDTenderOrig, 
		     КонДатаПоставки, 
		     НачДатаПоставки, 
		     Товар, 
		     Количество, 
		     IDItemOrig, 
		     IDLotOrig,
		     IDClassCPV, 
		     ItemUnitCode, 
		     ЕдИзмерения,
		     [Страна поставки],
		     [Город поставки],
		     [Индекс поставки],
		     [Регион поставки],
		     [Адрес поставки],
		     Широта,
			 Долгота,
		     IsMultiLot
		FROM $(TRN_QVD_PATH)TenderItem_$(vPeriod).qvd (qvd)
		Where NOT Exists(IDTender, IDTenderOrig);
	ENDIF
	
	TenderItem:
	LOAD
		 IDTenderOrig, 
		 AutoNumber(IDTenderOrig, 'IDTender')+$(vPeriod)*$(MulKey) as IDTenderKey,
	     КонДатаПоставки, 
	     НачДатаПоставки, 
	     Товар, 
	     Количество, 
	     IDItemOrig,
	     AutoNumber(IDTenderOrig&IDItemOrig, 'IDItem')+$(vPeriod)*$(MulKey) as IDItem,
	     IDLotOrig,
	     if(NOT IsNull(IDLotOrig), AutoNumber(IDTenderOrig&IDLotOrig, 'IDLot')+$(vPeriod)*$(MulKey)) as IDLotKey,
	     IDClassCPV, 
//	     AutoNumber(IDClassCPV, 'IDClassCPVKey') as IDClassCPVKey,
	     AutoNumber(IDTenderOrig&IDLotOrig&IDClassCPV&IDItemOrig, 'IDClassItemDKPPKey')+$(vPeriod)*$(MulKey) as IDClassItemDKPPKey,
	     ItemUnitCode, 
	     ЕдИзмерения,
	     if(Peek(IDTenderOrig)&Peek(IDLotOrig)=IDTenderOrig&IDLotOrig, Rangesum(Peek('LineNo'), 1), 1) as LineNo,
	     [Страна поставки],
	     [Город поставки],
	     [Индекс поставки],
	     [Регион поставки],
	     [Адрес поставки],
	     Широта,
		 Долгота,
	     IsMultiLot
	Resident   TenderItemTmp
	WHERE TestFlag <> 1
	Order By IDTenderOrig, IDLotOrig //, Товар
	;
	
	DROP Table TenderItemTmp;
	
	STORE  TenderItem into $(TRN_QVD_PATH)TenderItem_$(vPeriod).qvd (qvd);
	
	IF vPlanSave THEN
		STORE IDTenderOrig, IDClassCPV FROM TenderItem into $(TRN_QVD_PATH)TenderItem_P_$(vPeriod).qvd (qvd);
	ENDIF
	
	DROP Table TenderItem;
	
NEXT	

DROP Table 	TenderItem_Tmp;

// Справочник Организатор

Organizator_Tmp:
LOAD	[name_u0] as Организатор,
	[name_en] as Organizer,
//	[kind],
	[__KEY_procuringEntity],
	[__FK_procuringEntity] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_procuringEntity]);

Left Join (Organizator_Tmp)
LOAD Distinct	
	[scheme] as СхемаОрганизатора,
	[idTxt] as IDOrganizatorOrig,
	[legalName] as ЮрНазваниеОрганизатора,
	[legalName_en],
	[__FK_identifier] AS [__KEY_procuringEntity]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_identifier]);

Left Join (Organizator_Tmp)
LOAD Distinct	
	[telephone] as ТелефонОрганизатора,
	[availableLanguage],
	[url] as СайтОрганизатора,
	[faxNumber] as ФаксОрганизатора,
	[name] as ПредставительОрганизатора,
	[name_en_u0] as contactPointName,
	[name_ru] as ПредставительОрганизатораРу,
	[email] as EmailОрганизатора,
	[__FK_contactPoint] AS [__KEY_procuringEntity]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_contactPoint]);

Left Join (Organizator_Tmp)
LOAD Distinct	
	[postalCode] as ИндексОрганизатора,
	[countryName] as СтранаОрганизатора,
	[streetAddress] as АдресОрганизатора,
	[region] as РегионОрганизатора,
	[locality] as ГородОрганизатора,
	[__FK_address] AS [__KEY_procuringEntity]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_address]);

Left Join (Organizator_Tmp)
LOAD	
	$(vDateConvert([endDate_u1])) as DateTimeOrganizator,
	[__FK_tenderPeriod] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_tenderPeriod]);

Left Join (Organizator_Tmp)
LOAD	
	[id_u13] as IDTenderOrig,
	if(Lower([mode])='test', 1, 0) as TestFlag,
	[__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_data]);

OrganizatorTmp:
NoConcatenate
LOAD 
	 Alt(DateTimeOrganizator, Now(1)) as DateTimeOrganizator,
	 availableLanguage, 
	 ИндексОрганизатора, 
     СтранаОрганизатора, 
     ГородОрганизатора, 
     РегионОрганизатора, 
     АдресОрганизатора, 
     EmailОрганизатора, 
     ПредставительОрганизатора, 
     ПредставительОрганизатораРу,
     contactPointName, 
     ТелефонОрганизатора, 
     IDOrganizatorOrig, 
     ЮрНазваниеОрганизатора, 
     legalName_en, 
//   kind,
     СхемаОрганизатора, 
     Организатор,
     Organizer, 
     СайтОрганизатора,
     ФаксОрганизатора
Resident  Organizator_Tmp
WHERE TestFlag <> 1;    

DROP Table Organizator_Tmp;

IF NOT IsNull(FileSize('$(DIC_QVD_PATH)Organizator.qvd')) THEN
	Concatenate (OrganizatorTmp)
	LOAD DateTimeOrganizator,
		 availableLanguage, 
		 ИндексОрганизатора, 
	     СтранаОрганизатора, 
	     ГородОрганизатора, 
	     РегионОрганизатора, 
	     АдресОрганизатора, 
	     EmailОрганизатора, 
	     ПредставительОрганизатора, 
	     ПредставительОрганизатораРу,
	     contactPointName, 
	     ТелефонОрганизатора, 
	     IDOrganizatorOrig, 
	     ЮрНазваниеОрганизатора, 
	     legalName_en, 
	//   kind,
	     СхемаОрганизатора, 
	     Организатор,
	     Organizer, 
	     СайтОрганизатора,
	     ФаксОрганизатора
	FROM $(DIC_QVD_PATH)Organizator.qvd (qvd);
ENDIF

Organizator:
NoConcatenate
LOAD 
	 LastValue(DateTimeOrganizator) as DateTimeOrganizator,
	 LastValue(availableLanguage) as availableLanguage,
	 LastValue(СтранаОрганизатора) as СтранаОрганизатора, 
	 LastValue(ИндексОрганизатора) as ИндексОрганизатора,
	 LastValue(ГородОрганизатора) as ГородОрганизатора, 
	 LastValue(РегионОрганизатора) as РегионОрганизатора, 
	 LastValue(АдресОрганизатора) as АдресОрганизатора, 
     LastValue(EmailОрганизатора) as EmailОрганизатора, 
     LastValue(ПредставительОрганизатора) as ПредставительОрганизатора,
     LastValue(ПредставительОрганизатораРу) as ПредставительОрганизатораРу, 
     LastValue(contactPointName) as contactPointName,
     LastValue(ТелефонОрганизатора) as ТелефонОрганизатора, 
     IDOrganizatorOrig, 
     LastValue(ЮрНазваниеОрганизатора) as ЮрНазваниеОрганизатора, 
     LastValue(legalName_en) as legalName_en,
//   LastValue(kind) as kind,
     LastValue(СхемаОрганизатора) as СхемаОрганизатора, 
     LastValue(Организатор) as Организатор,
     LastValue(Organizer) as Organizer,
     LastValue(СайтОрганизатора) as СайтОрганизатора,
     LastValue(ФаксОрганизатора) as ФаксОрганизатора
Resident OrganizatorTmp
Group By IDOrganizatorOrig
Order By DateTimeOrganizator;

DROP Table OrganizatorTmp; 

//Organizator:
//NoConcatenate
//LOAD DateTimeOrganizator, 
//	 availableLanguage,
//	 ИндексОрганизатора,
//     СтранаОрганизатора, 
//     ГородОрганизатора, 
//     РегионОрганизатора, 
//     АдресОрганизатора, 
//     EmailОрганизатора, 
//     ПредставительОрганизатора, 
//     ПредставительОрганизатораРу,
//     contactPointName,
//     ТелефонОрганизатора, 
//     IDOrganizatorOrig, 
//     AutoNumber(IDOrganizatorOrig, 'IDOrganizator') as IDOrganizator,
//     ЮрНазваниеОрганизатора, 
//     legalName_en,
////   kind,
//     СхемаОрганизатора, 
//     Организатор,
//     Organizer,
//     СайтОрганизатора,
//     ФаксОрганизатора
//Resident OrganizatorTmp1;     
//     
//DROP Table OrganizatorTmp1; 

// Добавление ранее переведенных организаторов и городов
IF NOT IsNull(FileSize('$(DIC_QVD_PATH)Organizator.qvd')) THEN
	Left Join (Organizator)
	LOAD
		 IDOrganizatorOrig,
		 Organiser,
	     [Organiser city]
	FROM $(DIC_QVD_PATH)Organizator.qvd (qvd);	 
	
	ELSE
	
	Left Join (Organizator)
	LOAD
		 Null() as Organiser,
	     Null() as [Organiser city]
	AutoGenerate 1;     
ENDIF

STORE  Organizator into $(DIC_QVD_PATH)Organizator.qvd (qvd);

IF vPlanSave THEN
	STORE IDOrganizatorOrig, ГородОрганизатора, РегионОрганизатора, Организатор, Organiser, ТелефонОрганизатора, ИндексОрганизатора, EmailОрганизатора, ПредставительОрганизатора, АдресОрганизатора  FROM Organizator into $(DIC_QVD_PATH)Organizator_P.qvd (qvd);
ENDIF

DROP Table Organizator;

// Дополнительные контакты Организатора
AddOrgContactPoints_Tmp:
LOAD	
	[telephone_u6] as ТелефонОрганизатораДоп,
	[name_en_u1] as contactPointNameAdd,
	[name_u14] as ПредставительОрганизатораДоп,
	[availableLanguage_u0] as availableLanguageAdd,
	[email_u6] as EmailОрганизатораДоп,
	[url_u16] as СайтОрганизатораДоп,
	[faxNumber_u2] as ФаксОрганизатораДоп,
	[__FK_additionalContactPoints]  AS [__KEY_procuringEntity]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_additionalContactPoints]);

Left Join (AddOrgContactPoints_Tmp)
LOAD Distinct	
	[idTxt] as IDOrganizatorOrig,
	[__FK_identifier] AS [__KEY_procuringEntity]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_identifier]);

Left Join (AddOrgContactPoints_Tmp)
LOAD Distinct	
	[__KEY_procuringEntity],
	[__FK_procuringEntity] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_procuringEntity]);

Left Join (AddOrgContactPoints_Tmp)
LOAD	
//	[id_u13] as IDTenderOrig,
	if(Lower([mode])='test', 1, 0) as TestFlag,
	[__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_data]);

AddOrgContactPointsTmp:
LOAD 
	 ТелефонОрганизатораДоп,
	 contactPointNameAdd,
	 ПредставительОрганизатораДоп,
	 availableLanguageAdd,
	 EmailОрганизатораДоп,
	 СайтОрганизатораДоп,
	 ФаксОрганизатораДоп,
	 IDOrganizatorOrig
Resident 	AddOrgContactPoints_Tmp
WHERE TestFlag <> 1;

DROP Table  AddOrgContactPoints_Tmp;

IF NOT IsNull(FileSize('$(DIC_QVD_PATH)AddOrgContactPoints.qvd')) THEN
	Concatenate (AddOrgContactPointsTmp)
	LOAD 
		 ТелефонОрганизатораДоп,
		 contactPointNameAdd,
		 ПредставительОрганизатораДоп,
		 availableLanguageAdd,
		 EmailОрганизатораДоп,
		 СайтОрганизатораДоп,
		 ФаксОрганизатораДоп,
		 IDOrganizatorOrig
	FROM $(DIC_QVD_PATH)AddOrgContactPoints.qvd (qvd);
ENDIF

AddOrgContactPoints:
NoConcatenate
LOAD Distinct
	 ТелефонОрганизатораДоп,
	 contactPointNameAdd,
	 ПредставительОрганизатораДоп,
	 availableLanguageAdd,
	 EmailОрганизатораДоп,
	 СайтОрганизатораДоп,
	 ФаксОрганизатораДоп,
	 IDOrganizatorOrig
//	 AutoNumber(IDOrganizatorOrig, 'IDOrganizator') as IDOrganizatorKey
Resident AddOrgContactPointsTmp;

DROP Table AddOrgContactPointsTmp;	 

STORE  AddOrgContactPoints into $(DIC_QVD_PATH)AddOrgContactPoints.qvd (qvd);
DROP Table AddOrgContactPoints;

// Дополнительные идентификаторы Организатора

//AddOrgIdentifiers_Tmp:
//LOAD 	
//	[scheme_u8] as СхемаОрганизатораДоп,
//	[id_u32Txt] as IDOrganizatorAddOrig,
//	[legalName_u4] as ЮрНазваниеОрганизатораДоп,
//	[legalName_en_u0] as legalName_enAdd,
//	[__FK_additionalIdentifiers] AS [__KEY_procuringEntity]
//RESIDENT RestConnectorMasterTable
//WHERE NOT IsNull([__FK_additionalIdentifiers]);
//
//Left Join (AddOrgIdentifiers_Tmp)
//LOAD Distinct	
//	[idTxt] as IDOrganizatorOrig,
//	[__FK_identifier] AS [__KEY_procuringEntity]
//RESIDENT RestConnectorMasterTable
//WHERE NOT IsNull([__FK_identifier]);
//
//IF FileSize('$(DIC_QVD_PATH)AddOrgIdentifiers.qvd') > 0 THEN
//Concatenate (AddOrgIdentifiers_Tmp)
//LOAD 
//	 СхемаОрганизатораДоп,
//	 IDOrganizatorAddOrig,
//	 ЮрНазваниеОрганизатораДоп,
//	 legalName_enAdd,
//	 IDOrganizatorOrig
//FROM $(DIC_QVD_PATH)AddOrgIdentifiers.qvd (qvd);
//ENDIF;
//
//AddOrgIdentifiers:
//NoConcatenate
//LOAD Distinct
//	 СхемаОрганизатораДоп,
//	 IDOrganizatorAddOrig,
//	 ЮрНазваниеОрганизатораДоп,
//	 legalName_enAdd,
//	 IDOrganizatorOrig,
//	 AutoNumber(IDOrganizatorOrig, 'IDOrganizator') as IDOrganizatorKey
//Resident AddOrgIdentifiers_Tmp;
//
//DROP Table AddOrgIdentifiers_Tmp;	 
//
//STORE  AddOrgIdentifiers into $(DIC_QVD_PATH)AddOrgIdentifiers.qvd (qvd);
//DROP Table AddOrgIdentifiers;

// Отмены 

Cancellation_Tmp:
LOAD	
	$(vDateConvert([date_u5])) as ДатаОтмены,
	[id_u17] as IDCancellationOrig,
	[reason] as ПричинаОтмены,
	[status_u4] as СтатусОтмены,
	[relatedLot_u1] as IDLotOrig, 
	[cancellationOf],
	[reasonType],
	[__KEY_cancellations],
	[__FK_cancellations] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_cancellations]);

Left Join (Cancellation_Tmp)
LOAD	
	[id_u13] as IDTenderOrig,
	[id_u13] as IDTender,
	Mid([tenderID], 4, 4) as Year_Period,
	if(Lower([mode])='test', 1, 0) as TestFlag,
	[__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_data]);

DROP Fields __KEY_cancellations, __KEY_data From Cancellation_Tmp;

FOR Each vPeriod in FieldValueList('YearPeriod')

	Cancellation_:
	NoConcatenate
	LOAD
		*
	Resident Cancellation_Tmp
	Where Year_Period = $(vPeriod);

	IF NOT IsNull(FileSize('$(TRN_QVD_PATH)Cancellation_$(vPeriod).qvd')) THEN
		Concatenate (Cancellation_)
		LOAD IDTenderOrig, 
		     IDCancellationOrig, 
		     IDLotOrig, 
			 cancellationOf,
		     СтатусОтмены, 
		     ПричинаОтмены, 
		     ДатаОтмены,
		     reasonType 
		FROM $(TRN_QVD_PATH)Cancellation_$(vPeriod).qvd (qvd)
		WHERE NOT EXISTS(IDTender, IDTenderOrig);
	ENDIF
	
	Cancellation:
	LOAD IDTenderOrig, 
		 AutoNumber(IDTenderOrig, 'IDTender')+$(vPeriod)*$(MulKey) as IDTenderKey,
	     IDCancellationOrig,
	     AutoNumber(IDTenderOrig&IDCancellationOrig, 'IDCancellation')+$(vPeriod)*$(MulKey) as IDCancellation,
	     cancellationOf,
	     IDLotOrig, 
	     if(NOT IsNull(IDLotOrig), AutoNumber(IDTenderOrig&IDLotOrig, 'IDLot')+$(vPeriod)*$(MulKey)) as IDLotKey,
	     СтатусОтмены, 
	     ПричинаОтмены, 
	     ДатаОтмены,
	     reasonType
	Resident Cancellation_
	WHERE TestFlag <> 1;
	
	DROP Table Cancellation_;     
	
	STORE  Cancellation into $(TRN_QVD_PATH)Cancellation_$(vPeriod).qvd (qvd);
	DROP Table Cancellation;

NEXT

DROP Table Cancellation_Tmp;

// Жалобы на Оценки

ComplaintAward_Tmp:
LOAD	
	[status_u8] as ComplaintAwardStatus,
	[description_u23] as ОписаниеЖалобыОценки,
	[title_u20] as ЖалобаОценки,
	$(vDateConvert([date_u10])) as ДатаЖалобыОценки,
	$(vDateConvert([dateSubmitted_u0])) as ДатаПодачиТребованияЖалобыОценки,
	$(vDateConvert([dateAnswered_u0])) as ДатаОтветаЗаказчикаНаТребованиеЖалобыОценки,
	$(vDateConvert([dateEscalated_u0])) as ДатаЭскалацииТребованияЖалобыОценки,
	$(vDateConvert([dateDecision_u0])) as ДатаПринятияРешенияПоТребованиюЖалобыОценки,
	$(vDateConvert([dateCanceled_u0])) as ДатаОтклоненияЖалобыОценки,
	[id_u29] as IDComplaintAwardOrig,
	[complaintID_u0] as ИдентификаторЖалобыОценки,
	[resolution_u0] as РешениеЗаказчикаЖалобыОценки,
	[resolutionType_u0] as resolutionTypeAward, // Тип Решения
	[type_u0] as [Complaint award type], // Тип Обращения
	if(Lower([satisfied_u0])='true', 1, if(Lower([satisfied_u0])='false', 0, [satisfied_u0])) as УдовлетвореноЖалобыОценки,
	[decision_u0] as РешениеОрганаОбжалованияЖалобыОценки,
	[cancellationReason_u0] as ПричиныОтклоненияЖалобыОценки,
	relatedLot_u3 as IDLotOrig,
	[tendererAction_u0] as ДействиеУчастникаЖалобыОценки,
	$(vDateConvert([tendererActionDate_u0])) as ДатаДействияУчастникаЖалобыОценки,
	if(Lower([acceptance_u0])='true', 1, if(Lower([acceptance_u0])='false', 0, [acceptance_u0])) as ПретензияУдовлетворенаЖалобыОценки,
	$(vDateConvert([dateAccepted_u0])) as ДатаАкцептаЖалобыОценки,
	[rejectReason_u0] as rejectReasonAward,
	[rejectReasonDescription_u0] as ОписаниеПричиныОтклоненияЖалобыОценки,
	$(vDateConvert([reviewDate_u0])) as ДатаРассмотренияЖалобыОценки,
	[reviewPlace_u0] as МестоРассмотренияЖалобыОценки,
	[__KEY_complaints_u0],
	[__FK_complaints_u0] AS [__KEY_awards]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_complaints_u0]);

Left Join (ComplaintAward_Tmp)
LOAD	[name_u12] as ОрганизацияЖалобыОценки,
	[__KEY_author_u1],
	[__FK_author_u1] AS [__KEY_complaints_u0]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_author_u1]);

Left Join (ComplaintAward_Tmp)
LOAD	[postalCode_u6] as ИндексЖалобыОценки,
	[countryName_u6] as СтранаЖалобыОценки,
	[streetAddress_u6] as АдресЖалобыОценки,
	[region_u6] as РегионЖалобыОценки,
	[locality_u6] as ГородЖалобыОценки,
	[__FK_address_u5] AS [__KEY_author_u1]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_address_u5]);

Left Join (ComplaintAward_Tmp)
LOAD	[scheme_u7] as СхемаЖалобыОценки,
	[id_u31Txt] as КодОргЖалобыОценки,
	[__FK_identifier_u5] AS [__KEY_author_u1]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_identifier_u5]);

Left Join (ComplaintAward_Tmp)
LOAD	[telephone_u5] as ТелефонЖалобыОценки,
	[name_u13] as ИмяЖалобыОценки,
	[email_u5] as ЭлАдресЖалобыОценки,
	[__FK_contactPoint_u5] AS [__KEY_author_u1]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_contactPoint_u5]);

Left Join (ComplaintAward_Tmp)
LOAD	
	[id_u7] as IDAwardOrig,
	[__KEY_awards],
	[__FK_awards] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_awards]);

Left Join (ComplaintAward_Tmp)
LOAD	
	[id_u13] as IDTenderOrig,
	[id_u13] as IDTender,
	Mid([tenderID], 4, 4) as Year_Period,
	if(Lower([mode])='test', 1, 0) as TestFlag,
	[__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_data]);

FOR Each vPeriod in FieldValueList('YearPeriod')

	ComplaintAward_:
	NoConcatenate
	LOAD
		*
	Resident ComplaintAward_Tmp
	Where Year_Period = $(vPeriod);

	IF NOT IsNull(FileSize('$(TRN_QVD_PATH)ComplaintAward_$(vPeriod).qvd')) THEN
		Concatenate (ComplaintAward_)
		LOAD 
			ComplaintAwardStatus,
			ОписаниеЖалобыОценки,
			ЖалобаОценки,
			ДатаЖалобыОценки,
			ДатаПодачиТребованияЖалобыОценки,
			ДатаОтветаЗаказчикаНаТребованиеЖалобыОценки,
			ДатаЭскалацииТребованияЖалобыОценки,
			ДатаПринятияРешенияПоТребованиюЖалобыОценки,
			ДатаОтклоненияЖалобыОценки,
			IDComplaintAwardOrig,
			ИдентификаторЖалобыОценки,
			РешениеЗаказчикаЖалобыОценки,
			resolutionTypeAward, 
			[Complaint award type], 
			УдовлетвореноЖалобыОценки,
			РешениеОрганаОбжалованияЖалобыОценки,
			ПричиныОтклоненияЖалобыОценки,
			IDLotOrig,
			ДействиеУчастникаЖалобыОценки,
			ДатаДействияУчастникаЖалобыОценки,
			ОрганизацияЖалобыОценки,
			ИндексЖалобыОценки,
			СтранаЖалобыОценки,
			АдресЖалобыОценки,
			РегионЖалобыОценки,
			ГородЖалобыОценки,
			СхемаЖалобыОценки,
			КодОргЖалобыОценки,
			ТелефонЖалобыОценки,
			ИмяЖалобыОценки,
			ЭлАдресЖалобыОценки,
			ПретензияУдовлетворенаЖалобыОценки,
			ДатаАкцептаЖалобыОценки,
			rejectReasonAward,
			ОписаниеПричиныОтклоненияЖалобыОценки,
			ДатаРассмотренияЖалобыОценки,
			МестоРассмотренияЖалобыОценки,
			IDTenderOrig,
			IDAwardOrig
		FROM $(TRN_QVD_PATH)ComplaintAward_$(vPeriod).qvd (qvd)
		WHERE NOT EXISTS(IDTender, IDTenderOrig);
	ENDIF
	
	ComplaintAward:
	LOAD      
	    ComplaintAwardStatus,
		ОписаниеЖалобыОценки,
		ЖалобаОценки,
		ДатаЖалобыОценки,
		ДатаПодачиТребованияЖалобыОценки,
		ДатаОтветаЗаказчикаНаТребованиеЖалобыОценки,
		ДатаЭскалацииТребованияЖалобыОценки,
		ДатаПринятияРешенияПоТребованиюЖалобыОценки,
		ДатаОтклоненияЖалобыОценки,
		IDComplaintAwardOrig,
		AutoNumber(IDTenderOrig&IDComplaintAwardOrig&'A', 'IDComplaintTender')+$(vPeriod)*$(MulKey) as IDComplaintTender, // Продолжение генерации ключа таблицы Жалоб тендера
		ИдентификаторЖалобыОценки,
		РешениеЗаказчикаЖалобыОценки,
		resolutionTypeAward, 
		[Complaint award type], 
		УдовлетвореноЖалобыОценки,
		РешениеОрганаОбжалованияЖалобыОценки,
		ПричиныОтклоненияЖалобыОценки,
		IDLotOrig,
		if(NOT IsNull(IDLotOrig), AutoNumber(IDTenderOrig&IDLotOrig, 'IDLot')+$(vPeriod)*$(MulKey)) as IDLotKey,
		ДействиеУчастникаЖалобыОценки,
		ДатаДействияУчастникаЖалобыОценки,
		ОрганизацияЖалобыОценки,
		ИндексЖалобыОценки,
		СтранаЖалобыОценки,
		АдресЖалобыОценки,
		РегионЖалобыОценки,
		ГородЖалобыОценки,
		СхемаЖалобыОценки,
		КодОргЖалобыОценки,
		ТелефонЖалобыОценки,
		ИмяЖалобыОценки,
		ЭлАдресЖалобыОценки,
		ПретензияУдовлетворенаЖалобыОценки,
		ДатаАкцептаЖалобыОценки,
		rejectReasonAward,
		ОписаниеПричиныОтклоненияЖалобыОценки,
		ДатаРассмотренияЖалобыОценки,
		МестоРассмотренияЖалобыОценки,
		IDTenderOrig,
		AutoNumber(IDTenderOrig, 'IDTender')+$(vPeriod)*$(MulKey) as IDTenderKey,
		IDAwardOrig,
	 	AutoNumber(IDTenderOrig&IDAwardOrig, 'IDAward')+$(vPeriod)*$(MulKey) as IDAwardKey,
	 	'decision' as ComplaintLevel,
	 	if(isNull(ОрганизацияЖалобыОценки), ИмяЖалобыОценки, ОрганизацияЖалобыОценки) as ПодавшийЖалобу,
	 	Date(floor(ДатаЖалобыОценки)) as [ДатаЖалобы]
	Resident   ComplaintAward_
	WHERE TestFlag <> 1;
	
	DROP Table ComplaintAward_;   
	
	// Добавление ранее переведенных ПодавшихЖалобу
	IF NOT IsNull(FileSize('$(TRN_QVD_PATH)ComplaintAward_$(vPeriod).qvd')) THEN
		Left Join (ComplaintAward)
		LOAD
			 IDTenderOrig,
			 IDAwardOrig,
		     IDComplaintAwardOrig,
		     Complainant
		FROM $(TRN_QVD_PATH)ComplaintAward_$(vPeriod).qvd (qvd);	 
		
		ELSE
		
		Left Join (ComplaintAward)
		LOAD
			 Null() as Complainant
		AutoGenerate 1;     
	ENDIF
	
	STORE  ComplaintAward into $(TRN_QVD_PATH)ComplaintAward_$(vPeriod).qvd (qvd);
	DROP Table ComplaintAward;

NEXT

DROP Table ComplaintAward_Tmp;

// Жалобы на Квалификации

ComplaintQualification_Tmp:
LOAD	
	[status_u9] as ComplaintQualifStatus,
	[description_u25] as ОписаниеЖалобыКвалификации,
	[title_u22] as ЖалобаКвалификации,
	$(vDateConvert([date_u12])) as ДатаЖалобыКвалификации,
	$(vDateConvert([dateSubmitted_u1])) as ДатаПодачиТребованияЖалобыКвалификации,
	$(vDateConvert([dateAnswered_u1])) as ДатаОтветаЗаказчикаНаТребованиеЖалобыКвалификации,
	$(vDateConvert([dateEscalated_u1])) as ДатаЭскалацииТребованияЖалобыКвалификации,
	$(vDateConvert([dateDecision_u1])) as ДатаПринятияРешенияПоТребованиюЖалобыКвалификации,
	$(vDateConvert([dateCanceled_u1])) as ДатаОтклоненияЖалобыКвалификации,
	[id_u33] as IDComplaintQualifOrig,
	[complaintID_u1] as ИдентификаторЖалобыКвалификации,
	[resolution_u1] as РешениеЗаказчикаЖалобыКвалификации,
	[resolutionType_u1] as resolutionTypeQualif, // Тип Решения
	[type_u1] as [Complaint qualif type], // Тип Обращения
	if(Lower([satisfied_u1])='true', 1, if(Lower([satisfied_u1])='false', 0, [satisfied_u1])) as УдовлетвореноЖалобыКвалификации,
	[decision_u1] as РешениеОрганаОбжалованияЖалобыКвалификации,
	[cancellationReason_u1] as ПричиныОтклоненияЖалобыКвалификации,
	[relatedLot_u4] as IDLotOrig,
	[tendererAction_u1] as ДействиеУчастникаЖалобыКвалификации,
	$(vDateConvert([tendererActionDate_u1])) as ДатаДействияУчастникаЖалобыКвалификации,
	if(Lower([acceptance_u1])='true', 1, if(Lower([acceptance_u1])='false', 0, [acceptance_u1])) as ПретензияУдовлетворенаЖалобыКвалификации,
	$(vDateConvert([dateAccepted_u0])) as ДатаАкцептаЖалобыКвалификации,
	[rejectReason_u1] as rejectReasonQualif,
	[rejectReasonDescription_u1] as ОписаниеПричиныОтклоненияЖалобыКвалификации,
	$(vDateConvert([reviewDate_u1])) as ДатаРассмотренияЖалобыКвалификации,
	[reviewPlace_u1] as МестоРассмотренияЖалобыКвалификации,
	[__KEY_complaints_u1],
	[__FK_complaints_u1] AS [__KEY_qualifications]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_complaints_u1]);

Left Join (ComplaintQualification_Tmp)
LOAD	[name_u15] as ОрганизацияЖалобыКвалификации,
	[__KEY_author_u2],
	[__FK_author_u2] AS [__KEY_complaints_u1]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_author_u2]);

Left Join (ComplaintQualification_Tmp)
LOAD	[postalCode_u7] as ИндексЖалобыКвалификации,
	[countryName_u7] as СтранаЖалобыКвалификации,
	[streetAddress_u7] as АдресЖалобыКвалификации,
	[region_u7] as РегионЖалобыКвалификации,
	[locality_u7] as ГородЖалобыКвалификации,
	[__FK_address_u6] AS [__KEY_author_u2]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_address_u6]);

Left Join (ComplaintQualification_Tmp)
LOAD	[scheme_u9] as СхемаЖалобыКвалификации,
	[id_u35Txt] as КодОргЖалобыКвалификации,
	[__FK_identifier_u6] AS [__KEY_author_u2]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_identifier_u6]);

Left Join (ComplaintQualification_Tmp)
LOAD	[telephone_u7] as ТелефонЖалобыКвалификации,
	[name_u16] as ИмяЖалобыКвалификации,
	[email_u7] as ЭлАдресЖалобыКвалификации,
	[__FK_contactPoint_u6] AS [__KEY_author_u2]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_contactPoint_u6]);

Left Join (ComplaintQualification_Tmp)
LOAD	
	[id_u27] as IDQualificationOrig,
	[bidID] as IDBidOrig,
	[lotID_u0] as IDLotQualifOrig,
	[__KEY_qualifications],
	[__FK_qualifications] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_qualifications]);

Left Join (ComplaintQualification_Tmp)
LOAD	
	[id_u13] as IDTenderOrig,
	[id_u13] as IDTender,
	Mid([tenderID], 4, 4) as Year_Period,
	if(Lower([mode])='test', 1, 0) as TestFlag,
	[__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_data]);

FOR Each vPeriod in FieldValueList('YearPeriod')

	ComplaintQualification_:
	NoConcatenate
	LOAD
		*
	Resident ComplaintQualification_Tmp
	Where Year_Period = $(vPeriod);

	IF NOT IsNull(FileSize('$(TRN_QVD_PATH)ComplaintQualification_$(vPeriod).qvd')) THEN
		Concatenate (ComplaintQualification_)
		LOAD 
			ComplaintQualifStatus,
			ОписаниеЖалобыКвалификации,
			ЖалобаКвалификации,
			ДатаЖалобыКвалификации,
			ДатаПодачиТребованияЖалобыКвалификации,
			ДатаОтветаЗаказчикаНаТребованиеЖалобыКвалификации,
			ДатаЭскалацииТребованияЖалобыКвалификации,
			ДатаПринятияРешенияПоТребованиюЖалобыКвалификации,
			ДатаОтклоненияЖалобыКвалификации,
			IDComplaintQualifOrig,
			ИдентификаторЖалобыКвалификации,
			РешениеЗаказчикаЖалобыКвалификации,
			resolutionTypeQualif, 
			[Complaint qualif type], 
			УдовлетвореноЖалобыКвалификации,
			РешениеОрганаОбжалованияЖалобыКвалификации,
			ПричиныОтклоненияЖалобыКвалификации,
			IDLotOrig,
			ДействиеУчастникаЖалобыКвалификации,
			ДатаДействияУчастникаЖалобыКвалификации,
			ОрганизацияЖалобыКвалификации,
			ИндексЖалобыКвалификации,
			СтранаЖалобыКвалификации,
			АдресЖалобыКвалификации,
			РегионЖалобыКвалификации,
			ГородЖалобыКвалификации,
			СхемаЖалобыКвалификации,
			КодОргЖалобыКвалификации,
			ТелефонЖалобыКвалификации,
			ИмяЖалобыКвалификации,
			ЭлАдресЖалобыКвалификации,
			ПретензияУдовлетворенаЖалобыКвалификации,
			ДатаАкцептаЖалобыКвалификации,
			rejectReasonQualif,
			ОписаниеПричиныОтклоненияЖалобыКвалификации,
			ДатаРассмотренияЖалобыКвалификации,
			МестоРассмотренияЖалобыКвалификации,
			IDTenderOrig,
			IDQualificationOrig,
			IDBidOrig,
			IDLotQualifOrig
		FROM $(TRN_QVD_PATH)ComplaintQualification_$(vPeriod).qvd (qvd)
		WHERE NOT EXISTS(IDTender, IDTenderOrig);
	ENDIF
	
	ComplaintQualification:
	LOAD      
	    ComplaintQualifStatus,
		ОписаниеЖалобыКвалификации,
		ЖалобаКвалификации,
		ДатаЖалобыКвалификации,
		ДатаПодачиТребованияЖалобыКвалификации,
		ДатаОтветаЗаказчикаНаТребованиеЖалобыКвалификации,
		ДатаЭскалацииТребованияЖалобыКвалификации,
		ДатаПринятияРешенияПоТребованиюЖалобыКвалификации,
		ДатаОтклоненияЖалобыКвалификации,
		IDComplaintQualifOrig,
		AutoNumber(IDTenderOrig&IDComplaintQualifOrig&'Q', 'IDComplaintTender')+$(vPeriod)*$(MulKey) as IDComplaintTender, // Продолжение генерации ключа таблицы Жалоб тендера
		ИдентификаторЖалобыКвалификации,
		РешениеЗаказчикаЖалобыКвалификации,
		resolutionTypeQualif, 
		[Complaint qualif type], 
		УдовлетвореноЖалобыКвалификации,
		РешениеОрганаОбжалованияЖалобыКвалификации,
		ПричиныОтклоненияЖалобыКвалификации,
		IDLotOrig,
		if(NOT IsNull(IDLotOrig), AutoNumber(IDTenderOrig&IDLotOrig, 'IDLot')+$(vPeriod)*$(MulKey)) as IDLotKey,
		ДействиеУчастникаЖалобыКвалификации,
		ДатаДействияУчастникаЖалобыКвалификации,
		ОрганизацияЖалобыКвалификации,
		ИндексЖалобыКвалификации,
		СтранаЖалобыКвалификации,
		АдресЖалобыКвалификации,
		РегионЖалобыКвалификации,
		ГородЖалобыКвалификации,
		СхемаЖалобыКвалификации,
		КодОргЖалобыКвалификации,
		ТелефонЖалобыКвалификации,
		ИмяЖалобыКвалификации,
		ЭлАдресЖалобыКвалификации,
		ПретензияУдовлетворенаЖалобыКвалификации,
		ДатаАкцептаЖалобыКвалификации,
		rejectReasonQualif,
		ОписаниеПричиныОтклоненияЖалобыКвалификации,
		ДатаРассмотренияЖалобыКвалификации,
		МестоРассмотренияЖалобыКвалификации,
		IDTenderOrig,
		IDBidOrig,
		IDLotQualifOrig,
		AutoNumber(IDTenderOrig, 'IDTender')+$(vPeriod)*$(MulKey) as IDTenderKey,
		IDQualificationOrig,
	 	AutoNumber(IDTenderOrig&if(IsNull(IDLotQualifOrig), 'Lot'&IDTenderOrig, IDLotQualifOrig)&IDBidOrig, 'KeyLotBid')+$(vPeriod)*$(MulKey) as KeyLotBid,
	 	'decision' as ComplaintLevel,
	 	if(isNull(ОрганизацияЖалобыКвалификации), ИмяЖалобыКвалификации, ОрганизацияЖалобыКвалификации) as ПодавшийЖалобу,
	 	Date(Floor(ДатаЖалобыКвалификации)) as [ДатаЖалобы]
	Resident   ComplaintQualification_
	WHERE TestFlag <> 1;
	
	DROP Table ComplaintQualification_;   
	
	// Добавление ранее переведенных ПодавшихЖалобу
	IF NOT IsNull(FileSize('$(TRN_QVD_PATH)ComplaintQualification_$(vPeriod).qvd')) THEN
		Left Join (ComplaintQualification)
		LOAD
			 IDTenderOrig,
			 IDQualificationOrig,
		     IDComplaintQualifOrig,
		     Complainant
		FROM $(TRN_QVD_PATH)ComplaintQualification_$(vPeriod).qvd (qvd);	 
		
		ELSE
		
		Left Join (ComplaintQualification)
		LOAD
			 Null() as Complainant
		AutoGenerate 1;     
	ENDIF
	
	STORE  ComplaintQualification into $(TRN_QVD_PATH)ComplaintQualification_$(vPeriod).qvd (qvd);
	DROP Table ComplaintQualification;

NEXT

DROP Table ComplaintQualification_Tmp;

// ============== Загрузка ссылок на документы тендера ==============
// Список ссылок на документы тендера

TenderDocuments_Tmp:
LOAD	[format] as [Формат файла тендера],
	[url_u1] as [Ссылка на файл тендера],
	[title_u0] as [Файл тендера],
	[description_u11] as [Описание файла тендера],
	$(vDateConvert([datePublished])) as [Дата публ. файла тендера],
	$(vDateConvert([dateModified])) as [Дата изм. файла тендера],
	[id_u2] as IDTenderDocOrig,
	[documentOf] as TenderDocumentOf,
	[documentType] as TenderDocumentType,
	[language] as TenderDocLanguage,
	if(documentOf = 'item', relatedItem_u1) as IDItemOrig,
    if(documentOf = 'lot', relatedItem_u1) as IDLotOrig,
	[__FK_documents] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_documents]);

Left Join (TenderDocuments_Tmp)
LOAD	
	[id_u13] as IDTenderOrig,
	[id_u13] as IDTender,
	Mid([tenderID], 4, 4) as Year_Period,
	if(Lower([mode])='test', 1, 0) as TestFlag,
	[__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_data]);

DROP Field __KEY_data From TenderDocuments_Tmp;

FOR Each vPeriod in FieldValueList('YearPeriod')

	TenderDocuments_:
	NoConcatenate
	LOAD
		*
	Resident TenderDocuments_Tmp
	Where Year_Period = $(vPeriod);

	IF NOT IsNull(FileSize('$(TRN_QVD_PATH)TenderDocuments_$(vPeriod).qvd')) THEN
		Concatenate (TenderDocuments_)
		LOAD 
		 	 IDTenderOrig,
			 [Дата изм. файла тендера], 
		     [Дата публ. файла тендера], 
		     IDTenderDocOrig, 
		     [Файл тендера], 
		     [Описание файла тендера],
			 [Формат файла тендера], 
		     [Ссылка на файл тендера],
		     TenderDocumentOf,
		     TenderDocumentType,
		     TenderDocLanguage,
		     IDItemOrig,
		     IDLotOrig
		FROM $(TRN_QVD_PATH)TenderDocuments_$(vPeriod).qvd (qvd)
		Where NOT Exists(IDTender, IDTenderOrig);
	ENDIF
	
	TenderDocuments:
	LOAD 
	 	 IDTenderOrig,
	     AutoNumber(IDTenderOrig, 'IDTender')+$(vPeriod)*$(MulKey) as IDTenderKey,
		 [Дата изм. файла тендера], 
	     [Дата публ. файла тендера], 
	     IDTenderDocOrig, 
	     AutoNumber(IDTenderOrig&IDTenderDocOrig, 'IDTenderDoc')+$(vPeriod)*$(MulKey) as IDTenderDoc,
	     [Файл тендера], 
	     [Описание файла тендера],
		 [Формат файла тендера], 
	     [Ссылка на файл тендера],
	     TenderDocumentOf,
	     TenderDocumentType,
	     TenderDocLanguage,
	     IDItemOrig, 
	     if(NOT IsNull(IDItemOrig), AutoNumber(IDTenderOrig&IDItemOrig, 'IDItem')+$(vPeriod)*$(MulKey)) as IDItemKey,
	     IDLotOrig,
	     if(NOT IsNull(IDLotOrig), AutoNumber(IDTenderOrig&IDLotOrig, 'IDLot')+$(vPeriod)*$(MulKey)) as IDLotKey
	Resident TenderDocuments_
	WHERE TestFlag <> 1;  
	
	DROP Table TenderDocuments_;   
	
	STORE  TenderDocuments into $(TRN_QVD_PATH)TenderDocuments_$(vPeriod).qvd (qvd);
	DROP Table TenderDocuments;

NEXT

DROP Table TenderDocuments_Tmp;  

// Список ссылок на документы оценки

AwardDocuments_Tmp:
LOAD	[format_u0] as [Формат файла оценки],
	[url_u2] as [Ссылка на файл оценки],
	[title_u1] as [Файл оценки],
	[description_u12] as [Описание файла оценки],
	$(vDateConvert([datePublished_u0])) as [Дата публ. файла оценки],
	$(vDateConvert([dateModified_u0])) as [Дата изм. файла оценки],
	[id_u3] as IDAwardDocOrig,
	[documentOf_u0] as AwardDocumentOf,
	[documentType_u0] as AwardDocumentType,
	[language_u0] as AwardDocLanguage,
	if(documentOf_u0 = 'item', relatedItem_u2) as IDItemOrig,
    if(documentOf_u0 = 'lot', relatedItem_u2) as IDLotOrig,
	[__FK_documents_u0] AS [__KEY_awards]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_documents_u0]);

Left Join (AwardDocuments_Tmp)
LOAD	
	[id_u7] as IDAwardOrig,
	[__KEY_awards],
	[__FK_awards] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_awards]);

Left Join (AwardDocuments_Tmp)
LOAD	
	[id_u13] as IDTenderOrig,
	[id_u13] as IDTender,
	Mid([tenderID], 4, 4) as Year_Period,
	if(Lower([mode])='test', 1, 0) as TestFlag,
	[__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_data]);

DROP Fields __KEY_data, __KEY_awards  From AwardDocuments_Tmp;

FOR Each vPeriod in FieldValueList('YearPeriod')

	AwardDocuments_:
	NoConcatenate
	LOAD
		*
	Resident AwardDocuments_Tmp
	Where Year_Period = $(vPeriod);

	IF NOT IsNull(FileSize('$(TRN_QVD_PATH)AwardDocuments_$(vPeriod).qvd')) THEN
		Concatenate (AwardDocuments_) 
		LOAD 
		 	 IDTenderOrig,
		 	 IDAwardOrig,
			 [Дата изм. файла оценки], 
		     [Дата публ. файла оценки], 
		     IDAwardDocOrig, 
		     [Файл оценки], 
		     [Формат файла оценки], 
		     [Ссылка на файл оценки],
		     [Описание файла оценки],
		     AwardDocumentOf,
			 AwardDocumentType,
			 AwardDocLanguage,
			 IDItemOrig,
		     IDLotOrig
		FROM $(TRN_QVD_PATH)AwardDocuments_$(vPeriod).qvd (qvd)
		Where NOT Exists(IDTender, IDTenderOrig);
	ENDIF
	
	AwardDocuments:
	LOAD 
	 	 IDTenderOrig,
	 	 AutoNumber(IDTenderOrig, 'IDTender')+$(vPeriod)*$(MulKey) as IDTenderKey,
	 	 IDAwardOrig,
	 	 AutoNumber(IDTenderOrig&IDAwardOrig, 'IDAward')+$(vPeriod)*$(MulKey) as IDAwardKey,
		 [Дата изм. файла оценки], 
	     [Дата публ. файла оценки], 
	     IDAwardDocOrig, 
	     AutoNumber(IDTenderOrig&IDAwardDocOrig, 'IDAwardDoc')+$(vPeriod)*$(MulKey) as IDAwardDoc,
	     [Файл оценки], 
	     [Формат файла оценки], 
	     [Ссылка на файл оценки],
	     [Описание файла оценки],
	     AwardDocumentOf,
		 AwardDocumentType,
		 AwardDocLanguage,
		 IDItemOrig, 
	     if(NOT IsNull(IDItemOrig), AutoNumber(IDTenderOrig&IDItemOrig, 'IDItem')+$(vPeriod)*$(MulKey)) as IDItemKey,
	     IDLotOrig,
	     if(NOT IsNull(IDLotOrig), AutoNumber(IDTenderOrig&IDLotOrig, 'IDLot')+$(vPeriod)*$(MulKey)) as IDLotKey
	Resident AwardDocuments_
	WHERE TestFlag <> 1;  
	
	DROP Table AwardDocuments_;
	
	STORE  AwardDocuments into $(TRN_QVD_PATH)AwardDocuments_$(vPeriod).qvd (qvd);
	DROP Table AwardDocuments;

NEXT

DROP Table AwardDocuments_Tmp; 
 
// Список ссылок на документы квалификации

QualificationDocuments_Tmp:
LOAD	[format_u9] as [Формат файла квалификации],
	[url_u14] as [Ссылка на файл квалификации],
	[title_u19] as [Файл квалификации],
	[description_u22] as [Описание файла квалификации],
	$(vDateConvert([datePublished_u9])) as [Дата публ. файла квалификации],
	$(vDateConvert([dateModified_u10])) as [Дата изм. файла квалификации],
	[id_u28] as IDQualificationDocOrig,
	[documentOf_u9] as QualificationDocumentOf,
	[documentType_u9] as QualificationDocumentType,
	[language_u9] as QualificationDocLanguage,
	if(documentOf_u9 = 'item', relatedItem_u11) as IDItemOrig,
    if(documentOf_u9 = 'lot', relatedItem_u11) as IDLotOrig,
	[__FK_documents_u6] AS [__KEY_qualifications]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_documents_u6]);

Left Join (QualificationDocuments_Tmp)
LOAD	
	[id_u27] as IDQualificationOrig,
	[__KEY_qualifications],
	[__FK_qualifications] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_qualifications]);

Left Join (QualificationDocuments_Tmp)
LOAD	
	[id_u13] as IDTenderOrig,
	[id_u13] as IDTender,
	Mid([tenderID], 4, 4) as Year_Period,
	if(Lower([mode])='test', 1, 0) as TestFlag,
	[__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_data]);

DROP Fields __KEY_data, __KEY_qualifications  From QualificationDocuments_Tmp;

FOR Each vPeriod in FieldValueList('YearPeriod')

	QualificationDocuments_:
	NoConcatenate
	LOAD
		*
	Resident QualificationDocuments_Tmp
	Where Year_Period = $(vPeriod);

	IF NOT IsNull(FileSize('$(TRN_QVD_PATH)QualificationDocuments_$(vPeriod).qvd')) THEN
		Concatenate (QualificationDocuments_) 
		LOAD 
		 	 IDTenderOrig,
		     IDQualificationOrig,
		     [Формат файла квалификации],
			 [Ссылка на файл квалификации],
			 [Файл квалификации],
			 [Описание файла квалификации],
			 [Дата публ. файла квалификации],
			 [Дата изм. файла квалификации],
			 IDQualificationDocOrig,
			 QualificationDocumentOf,
			 QualificationDocumentType,
			 QualificationDocLanguage,
			 IDItemOrig,
		     IDLotOrig
		FROM $(TRN_QVD_PATH)QualificationDocuments_$(vPeriod).qvd (qvd)
		Where NOT Exists(IDTender, IDTenderOrig);
	ENDIF
	
	QualificationDocuments:
	LOAD 
	 	 IDTenderOrig,
	     AutoNumber(IDTenderOrig, 'IDTender')+$(vPeriod)*$(MulKey) as IDTenderKey,
	     IDQualificationOrig,
	     AutoNumber(IDTenderOrig&IDQualificationOrig, 'IDQualification')+$(vPeriod)*$(MulKey) as IDQualificationKey,
	     [Формат файла квалификации],
		 [Ссылка на файл квалификации],
		 [Файл квалификации],
		 [Описание файла квалификации],
		 [Дата публ. файла квалификации],
		 [Дата изм. файла квалификации],
		 IDQualificationDocOrig,
		 AutoNumber(IDTenderOrig&IDQualificationDocOrig, 'IDQualificationDoc')+$(vPeriod)*$(MulKey) as IDQualificationDoc,
		 QualificationDocumentOf,
		 QualificationDocumentType,
		 QualificationDocLanguage,
		 IDItemOrig,
		 if(NOT IsNull(IDItemOrig), AutoNumber(IDTenderOrig&IDItemOrig, 'IDItem')+$(vPeriod)*$(MulKey)) as IDItemKey,
	     IDLotOrig,
	     if(NOT IsNull(IDLotOrig), AutoNumber(IDTenderOrig&IDLotOrig, 'IDLot')+$(vPeriod)*$(MulKey)) as IDLotKey
	Resident QualificationDocuments_
	WHERE TestFlag <> 1;  
	
	DROP Table QualificationDocuments_;   
	
	STORE  QualificationDocuments into $(TRN_QVD_PATH)QualificationDocuments_$(vPeriod).qvd (qvd);
	DROP Table QualificationDocuments;
	
NEXT	

DROP Table QualificationDocuments_Tmp; 

// Список ссылок на документы предложений

// documents
BidDocuments_Tmp:
LOAD	
	[format_u2] as [Формат файла предложения],
	[url_u5] as [Ссылка на файл предложения],
	[confidentiality],
	[confidentialityRationale] as [Причины конфиденциальности],
	[title_u3] as [Файл предложения],
	[description_u13] as [Описание файла предложения],
	$(vDateConvert([datePublished_u2])) as [Дата публ. файла предложения],
	$(vDateConvert([dateModified_u2])) as [Дата изм. файла предложения],
	[id_u10] as IDBidDocOrig,
	[documentOf_u1] as BidDocumentOf,
	[documentType_u1] as BidDocumentType,
	[language_u1] as BidDocLanguage,
	if(documentOf_u1 = 'item', relatedItem_u3) as IDItemOrig,
    if(documentOf_u1 = 'lot', relatedItem_u3) as IDLotOrig,
	[__FK_documents_u2] AS [__KEY_bids],
	'documents' as envelopeType
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_documents_u2]);

// financialDocuments
Concatenate (BidDocuments_Tmp)
LOAD	
	[format_u7] as [Формат файла предложения],
	[url_u12] as [Ссылка на файл предложения],
	[confidentiality_u1] as confidentiality,
	[confidentialityRationale_u1] as [Причины конфиденциальности],
	[title_u16] as [Файл предложения],
	[description_u19] as [Описание файла предложения],
	$(vDateConvert([datePublished_u7])) as [Дата публ. файла предложения],
	$(vDateConvert([dateModified_u8])) as [Дата изм. файла предложения],
	[id_u25] as IDBidDocOrig,
	[documentOf_u7] as BidDocumentOf,
	[documentType_u7] as BidDocumentType,
	[language_u7] as BidDocLanguage,
	if(documentOf_u7 = 'item', relatedItem_u9) as IDItemOrig,
    if(documentOf_u7 = 'lot', relatedItem_u9) as IDLotOrig,
	[__FK_financialDocuments] AS [__KEY_bids],
	'financialDocuments' as envelopeType
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_financialDocuments]);

// eligibilityDocuments
Concatenate (BidDocuments_Tmp)
LOAD	
	[format_u6] as [Формат файла предложения],
	[url_u11] as [Ссылка на файл предложения],
	[confidentiality_u0] as confidentiality,
	[confidentialityRationale_u0] as [Причины конфиденциальности],
	[title_u15] as [Файл предложения],
	[description_u18] as [Описание файла предложения],
	$(vDateConvert([datePublished_u6])) as [Дата публ. файла предложения],
	$(vDateConvert([dateModified_u7])) as [Дата изм. файла предложения],
	[id_u24] as IDBidDocOrig,
	[documentOf_u6] as BidDocumentOf,
	[documentType_u6] as BidDocumentType,
	[language_u6] as BidDocLanguage,
	if(documentOf_u6 = 'item', relatedItem_u8) as IDItemOrig,
    if(documentOf_u6 = 'lot', relatedItem_u8) as IDLotOrig,
	[__FK_eligibilityDocuments] AS [__KEY_bids],
	'eligibilityDocuments' as envelopeType
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_eligibilityDocuments]);

// qualificationDocuments
Concatenate (BidDocuments_Tmp)
LOAD	
	[format_u8] as [Формат файла предложения],
	[url_u13] as [Ссылка на файл предложения],
	[confidentiality_u2] as confidentiality,
	[confidentialityRationale_u2] as [Причины конфиденциальности],
	[title_u17] as [Файл предложения],
	[description_u20] as [Описание файла предложения],
	$(vDateConvert([datePublished_u8])) as [Дата публ. файла предложения],
	$(vDateConvert([dateModified_u9])) as [Дата изм. файла предложения],
	[id_u26] as IDBidDocOrig,
	[documentOf_u8] as BidDocumentOf,
	[documentType_u8] as BidDocumentType,
	[language_u8] as BidDocLanguage,
	if(documentOf_u8 = 'item', relatedItem_u10) as IDItemOrig,
    if(documentOf_u8 = 'lot', relatedItem_u10) as IDLotOrig,
	[__FK_qualificationDocuments] AS [__KEY_bids],
	'qualificationDocuments' as envelopeType
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_qualificationDocuments]);

Left Join (BidDocuments_Tmp)
LOAD	
	[id_u12] as IDBidOrig,
	[__KEY_bids],
	[__FK_bids] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_bids]);

Left Join (BidDocuments_Tmp)
LOAD	
	[id_u13] as IDTenderOrig,
	[id_u13] as IDTender,
	Mid([tenderID], 4, 4) as Year_Period,
	if(Lower([mode])='test', 1, 0) as TestFlag,
	[__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_data]);

DROP Fields __KEY_data, __KEY_bids  From BidDocuments_Tmp;

FOR Each vPeriod in FieldValueList('YearPeriod')

	BidDocuments_:
	NoConcatenate
	LOAD
		*
	Resident BidDocuments_Tmp
	Where Year_Period = $(vPeriod);

	IF NOT IsNull(FileSize('$(TRN_QVD_PATH)BidDocuments_$(vPeriod).qvd')) THEN
		Concatenate (BidDocuments_)
		LOAD 
		 	 IDTenderOrig,
		 	 IDBidOrig,
		 	 [Описание файла предложения],
			 [Дата изм. файла предложения], 
		     [Дата публ. файла предложения], 
		     IDBidDocOrig, 
		     [Файл предложения], 
		     [Формат файла предложения],   
		     [Ссылка на файл предложения],
		     confidentiality, 
			 [Причины конфиденциальности],
			 envelopeType,
		     BidDocumentOf,
			 BidDocumentType,
			 BidDocLanguage,
			 IDItemOrig,
		     IDLotOrig
		FROM $(TRN_QVD_PATH)BidDocuments_$(vPeriod).qvd (qvd)
		Where NOT Exists(IDTender, IDTenderOrig);
	ENDIF
	
	BidDocuments:
	LOAD 
	 	 IDTenderOrig,
	 	 AutoNumber(IDTenderOrig, 'IDTender')+$(vPeriod)*$(MulKey) as IDTenderKey,
	 	 IDBidOrig,
	 	 AutoNumber(IDTenderOrig&IDBidOrig, 'IDBid')+$(vPeriod)*$(MulKey) as IDBidKey,
		 [Дата изм. файла предложения], 
	     [Дата публ. файла предложения], 
	     IDBidDocOrig, 
	     AutoNumber(IDTenderOrig&IDBidDocOrig, 'IDBidDoc')+$(vPeriod)*$(MulKey) as IDBidDoc,
	     [Файл предложения], 
	     [Формат файла предложения],
	     [Ссылка на файл предложения],
		 confidentiality, 
		 [Причины конфиденциальности],
		 envelopeType,
	     [Описание файла предложения],
	     BidDocumentOf,
		 BidDocumentType,
		 BidDocLanguage,
		 IDItemOrig, 
	     if(NOT IsNull(IDItemOrig), AutoNumber(IDTenderOrig&IDItemOrig, 'IDItem')+$(vPeriod)*$(MulKey)) as IDItemKey,
	     IDLotOrig,
	     if(NOT IsNull(IDLotOrig), AutoNumber(IDTenderOrig&IDLotOrig, 'IDLot')+$(vPeriod)*$(MulKey)) as IDLotKey
	Resident BidDocuments_
	WHERE TestFlag <> 1;  
	
	DROP Table BidDocuments_;   
	
	STORE  BidDocuments into $(TRN_QVD_PATH)BidDocuments_$(vPeriod).qvd (qvd);
	DROP Table BidDocuments;

NEXT

DROP Table BidDocuments_Tmp; 

// Ссылки на документы Контрактов
ContractDocumentsTmp:
LOAD	
	[format_u5] as [Формат файла контракта],
	[url_u9] as [Ссылка на файл контракта],
	[title_u14] as [Файл контракта],
	[description_u15] as [Описание файла контракта],
	$(vDateConvert([datePublished_u5])) as [Дата публ. файла контракта],
	$(vDateConvert([dateModified_u6])) as [Дата изм. файла контракта],
	[id_u22] as IDContractDocOrig,
	[documentOf_u3] as ContractDocumentOf,
	[documentType_u3] as ContractDocumentType,
	[language_u3] as ContractDocLanguage,
	if(documentOf_u3 = 'item', relatedItem_u5) as IDItemOrig,
    if(documentOf_u3 = 'lot', relatedItem_u5) as IDLotOrig,
	[__FK_documents_u5] AS [__KEY_contracts_u0]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_documents_u5]);

Left Join (ContractDocumentsTmp)
LOAD	
	[id_u21] as IDContractOrig,
	[__KEY_contracts_u0],
	[__FK_contracts_u0] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_contracts_u0]);

Left Join (ContractDocumentsTmp)
LOAD	
	[id_u13] as IDTenderOrig,
	[id_u13] as IDTender,
	Mid([tenderID], 4, 4) as Year_Period,
	if(Lower([mode])='test', 1, 0) as TestFlag,
	[__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_data]);

DROP Fields __KEY_data, __KEY_contracts_u0  From ContractDocumentsTmp;

FOR Each vPeriod in FieldValueList('YearPeriod')

	ContractDocuments_:
	NoConcatenate
	LOAD
		*
	Resident ContractDocumentsTmp
	Where Year_Period = $(vPeriod);
	
	IF NOT IsNull(FileSize('$(TRN_QVD_PATH)ContractDocuments_$(vPeriod).qvd')) THEN
		Concatenate (ContractDocuments_)
		LOAD 
		 	 IDTenderOrig,
		 	 IDContractOrig,
			 [Дата изм. файла контракта], 
		     [Дата публ. файла контракта], 
		     IDContractDocOrig, 
		     [Файл контракта], 
		     [Описание файла контракта],
		     [Формат файла контракта],      
		     [Ссылка на файл контракта],
		     ContractDocumentOf,
			 ContractDocumentType,
			 ContractDocLanguage,
			 IDItemOrig,
		     IDLotOrig
		FROM $(TRN_QVD_PATH)ContractDocuments_$(vPeriod).qvd (qvd)
		Where NOT Exists(IDTender, IDTenderOrig);
	ENDIF
	
	ContractDocuments:
	LOAD 
	 	 IDTenderOrig,
	 	 AutoNumber(IDTenderOrig, 'IDTender')+$(vPeriod)*$(MulKey) as IDTenderKey,
	 	 IDContractOrig,
	 	 AutoNumber(IDContractOrig, 'IDContract')+$(vPeriod)*$(MulKey) as IDContractKey,
	 	 [Дата изм. файла контракта], 
	     [Дата публ. файла контракта], 
	     IDContractDocOrig, 
	     AutoNumber(IDTenderOrig&IDContractDocOrig, 'IDContractDoc')+$(vPeriod)*$(MulKey) as IDContractDoc,
	     [Файл контракта], 
	     [Описание файла контракта],
	     [Формат файла контракта],
	     [Ссылка на файл контракта],
	     ContractDocumentOf,
		 ContractDocumentType,
		 ContractDocLanguage,
		 IDItemOrig, 
	     if(NOT IsNull(IDItemOrig), AutoNumber(IDTenderOrig&IDItemOrig, 'IDItem')+$(vPeriod)*$(MulKey)) as IDItemKey,
	     IDLotOrig,
	     if(NOT IsNull(IDLotOrig), AutoNumber(IDTenderOrig&IDLotOrig, 'IDLot')+$(vPeriod)*$(MulKey)) as IDLotKey
	Resident ContractDocuments_
	WHERE TestFlag <> 1;  
	
	DROP Table ContractDocuments_;   
	
	STORE  ContractDocuments into $(TRN_QVD_PATH)ContractDocuments_$(vPeriod).qvd (qvd);
	DROP Table ContractDocuments;
	
NEXT	

DROP Table ContractDocumentsTmp;  

// Список ссылок на документы жалоб тендера

ComplaintTenderDocuments_Tmp:
LOAD	
	[format_u3] as [Формат файла жалобы тендера],
	[url_u7] as [Ссылка на файл жалобы тендера],
	[title_u8] as [Файл жалобы тендера],
	[description_u16] as [Описание файла жалобы тендера],
	$(vDateConvert([datePublished_u3])) as [Дата публ. файла жалобы тендера],
	$(vDateConvert([dateModified_u4])) as [Дата изм. файла жалобы тендера],
	[id_u18] as IDComplaintTenderDocOrig,
	[documentOf_u4] as ComplaintTenderDocumentOf,
	[documentType_u4] as ComplaintTenderDocumentType,
	[language_u4] as ComplaintTenderDocLanguage,
	if(documentOf_u4 = 'item', relatedItem_u6) as IDItemOrigComplaintTender,
    if(documentOf_u4 = 'lot', relatedItem_u6) as IDLotOrigComplaintTender,
	[__FK_documents_u3] AS [__KEY_complaints]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_documents_u3]);

Left Join (ComplaintTenderDocuments_Tmp)
LOAD	
	[id_u14] as IDComplaintTenderOrig,
	[__KEY_complaints],
	[__FK_complaints] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_complaints]);

Left Join (ComplaintTenderDocuments_Tmp)
LOAD	
	[id_u13] as IDTenderOrig,
	[id_u13] as IDTender,
	Mid([tenderID], 4, 4) as Year_Period,
	if(Lower([mode])='test', 1, 0) as TestFlag,
	[__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_data]);

DROP Fields __KEY_data, __KEY_complaints  From ComplaintTenderDocuments_Tmp;

FOR Each vPeriod in FieldValueList('YearPeriod')

	ComplaintTenderDocuments_:
	NoConcatenate
	LOAD
		*
	Resident ComplaintTenderDocuments_Tmp
	Where Year_Period = $(vPeriod);
	
	IF NOT IsNull(FileSize('$(TRN_QVD_PATH)ComplaintTenderDocuments_$(vPeriod).qvd')) THEN
		Concatenate (ComplaintTenderDocuments_)
		LOAD 
		 	 IDTenderOrig,
		 	 IDComplaintTenderOrig,
		 	 [Описание файла жалобы тендера],
			 [Дата изм. файла жалобы тендера], 
		     [Дата публ. файла жалобы тендера], 
		     IDComplaintTenderDocOrig, 
		     [Файл жалобы тендера], 
		     [Формат файла жалобы тендера],      
		     [Ссылка на файл жалобы тендера],
		     ComplaintTenderDocumentOf,
			 ComplaintTenderDocumentType,
			 ComplaintTenderDocLanguage,
			 IDItemOrigComplaintTender,
		     IDLotOrigComplaintTender
		FROM $(TRN_QVD_PATH)ComplaintTenderDocuments_$(vPeriod).qvd (qvd)
		Where NOT Exists(IDTender, IDTenderOrig);
	ENDIF
	
	ComplaintTenderDocuments:
	NoConcatenate
	LOAD 
	 	 IDTenderOrig,
	 	 AutoNumber(IDTenderOrig, 'IDTender')+$(vPeriod)*$(MulKey) as IDTenderKey,
	 	 IDComplaintTenderOrig,
	 	 AutoNumber(IDTenderOrig&IDComplaintTenderOrig, 'IDComplaintTender')+$(vPeriod)*$(MulKey) as IDComplaintTenderKey,
	 	 [Дата изм. файла жалобы тендера], 
	     [Дата публ. файла жалобы тендера], 
	     IDComplaintTenderDocOrig, 
	     AutoNumber(IDTenderOrig&IDComplaintTenderDocOrig, 'IDComplaintTenderDoc')+$(vPeriod)*$(MulKey) as IDComplaintTenderDoc,
	     [Файл жалобы тендера], 
	     [Формат файла жалобы тендера],
	     [Ссылка на файл жалобы тендера],
	     [Описание файла жалобы тендера],
	     ComplaintTenderDocumentOf,
		 ComplaintTenderDocumentType,
		 ComplaintTenderDocLanguage,
		 IDItemOrigComplaintTender, 
	     if(NOT IsNull(IDItemOrigComplaintTender), AutoNumber(IDTenderOrig&IDItemOrigComplaintTender, 'IDItem')+$(vPeriod)*$(MulKey)) as IDItemKeyComplaintTender,
	     IDLotOrigComplaintTender,
	     if(NOT IsNull(IDLotOrigComplaintTender), AutoNumber(IDTenderOrig&IDLotOrigComplaintTender, 'IDLot')+$(vPeriod)*$(MulKey)) as IDLotKeyComplaintTender
	Resident ComplaintTenderDocuments_
	WHERE TestFlag <> 1;  
	
	DROP Table ComplaintTenderDocuments_;   
	
	STORE  ComplaintTenderDocuments into $(TRN_QVD_PATH)ComplaintTenderDocuments_$(vPeriod).qvd (qvd);
	DROP Table ComplaintTenderDocuments;
	
NEXT

DROP Table ComplaintTenderDocuments_Tmp;   	

// Список ссылок на документы жалоб оценки

ComplaintAwardDocuments_Tmp:
LOAD	
	[format_u10] as [Формат файла жалобы оценки],
	[url_u15] as [Ссылка на файл жалобы оценки],
	[title_u21] as [Файл жалобы оценки],
	[description_u24] as [Описание файла жалобы оценки],
	$(vDateConvert([datePublished_u10])) as [Дата публ. файла жалобы оценки],
	$(vDateConvert([dateModified_u11])) as [Дата изм. файла жалобы оценки],
	[id_u30] as IDComplaintAwardDocOrig,
	[documentOf_u10] as ComplaintAwardDocumentOf,
	[documentType_u10] as ComplaintAwardDocumentType,
	[language_u10] as ComplaintAwardDocLanguage,
	if(documentOf_u10 = 'item', relatedItem_u12) as IDItemOrigComplaintAward,
    if(documentOf_u10 = 'lot', relatedItem_u12) as IDLotOrigComplaintAward,
	[__FK_documents_u7] AS [__KEY_complaints_u0]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_documents_u7]);

Left Join (ComplaintAwardDocuments_Tmp)
LOAD	
	[id_u29] as IDComplaintAwardOrig,
	[__KEY_complaints_u0],
	[__FK_complaints_u0] AS [__KEY_awards]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_complaints_u0]);

Left Join (ComplaintAwardDocuments_Tmp)
LOAD	
	[__KEY_awards],
	[__FK_awards] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_awards]);

Left Join (ComplaintAwardDocuments_Tmp)
LOAD	
	[id_u13] as IDTenderOrig,
	[id_u13] as IDTender,
	Mid([tenderID], 4, 4) as Year_Period,
	if(Lower([mode])='test', 1, 0) as TestFlag,
	[__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_data]);

DROP Fields __KEY_awards, __KEY_data, __KEY_complaints_u0  From ComplaintAwardDocuments_Tmp;

FOR Each vPeriod in FieldValueList('YearPeriod')

	ComplaintAwardDocuments_:
	NoConcatenate
	LOAD
		*
	Resident ComplaintAwardDocuments_Tmp
	Where Year_Period = $(vPeriod);

	IF NOT IsNull(FileSize('$(TRN_QVD_PATH)ComplaintAwardDocuments_$(vPeriod).qvd')) THEN
		Concatenate (ComplaintAwardDocuments_) 
		LOAD 
			 IDTenderOrig,
		 	 IDComplaintAwardOrig,
		 	 [Описание файла жалобы оценки],
			 [Дата изм. файла жалобы оценки], 
		     [Дата публ. файла жалобы оценки], 
		     IDComplaintAwardDocOrig, 
		     [Файл жалобы оценки], 
		     [Формат файла жалобы оценки],      
		     [Ссылка на файл жалобы оценки],
		     ComplaintAwardDocumentOf,
			 ComplaintAwardDocumentType,
			 ComplaintAwardDocLanguage,
			 IDItemOrigComplaintAward,
		     IDLotOrigComplaintAward
		FROM $(TRN_QVD_PATH)ComplaintAwardDocuments_$(vPeriod).qvd (qvd)
		Where NOT Exists(IDTender, IDTenderOrig);
	ENDIF
	
	ComplaintAwardDocuments:
	LOAD 
		 IDTenderOrig,
	 	 AutoNumber(IDTenderOrig, 'IDTender')+$(vPeriod)*$(MulKey) as IDTenderKey,
	 	 IDComplaintAwardOrig,
	 	 AutoNumber(IDTenderOrig&IDComplaintAwardOrig&'A', 'IDComplaintTender')+$(vPeriod)*$(MulKey) as IDComplaintTenderKey, // Продожение генерации ключа таблиц жалоб
	 	 [Дата изм. файла жалобы оценки], 
	     [Дата публ. файла жалобы оценки], 
	     IDComplaintAwardDocOrig, 
	     AutoNumber(IDTenderOrig&IDComplaintAwardDocOrig, 'IDComplaintAwardDoc')+$(vPeriod)*$(MulKey) as IDComplaintAwardDoc,
	     [Файл жалобы оценки], 
	     [Формат файла жалобы оценки],
	     [Ссылка на файл жалобы оценки],
	     [Описание файла жалобы оценки],
	     ComplaintAwardDocumentOf,
		 ComplaintAwardDocumentType,
		 ComplaintAwardDocLanguage,
		 IDItemOrigComplaintAward, 
	     if(NOT IsNull(IDItemOrigComplaintAward), AutoNumber(IDTenderOrig&IDItemOrigComplaintAward, 'IDItem')+$(vPeriod)*$(MulKey)) as IDItemKeyComplaintAward,
	     IDLotOrigComplaintAward,
	     if(NOT IsNull(IDLotOrigComplaintAward), AutoNumber(IDTenderOrig&IDLotOrigComplaintAward, 'IDLot')+$(vPeriod)*$(MulKey)) as IDLotKeyComplaintAward
	Resident ComplaintAwardDocuments_
	WHERE TestFlag <> 1;  
	
	DROP Table ComplaintAwardDocuments_;   
	
	STORE  ComplaintAwardDocuments into $(TRN_QVD_PATH)ComplaintAwardDocuments_$(vPeriod).qvd (qvd);
	DROP Table ComplaintAwardDocuments;

NEXT

DROP Table ComplaintAwardDocuments_Tmp;  

// Список ссылок на документы жалоб квалификации

ComplaintQualificationDocuments_Tmp:
LOAD	
	[format_u11] as [Формат файла жалобы квалификации],
	[url_u17] as [Ссылка на файл жалобы квалификации],
	[title_u23] as [Файл жалобы квалификации],
	[description_u26] as [Описание файла жалобы квалификации],
	$(vDateConvert([datePublished_u11])) as [Дата публ. файла жалобы квалификации],
	$(vDateConvert([dateModified_u12])) as [Дата изм. файла жалобы квалификации],
	[id_u34] as IDComplaintQualifDocOrig,
	[documentOf_u11] as ComplaintQualifDocumentOf,
	[documentType_u11] as ComplaintQualifDocumentType,
	[language_u11] as ComplaintQualifDocLanguage,
	if(documentOf_u11 = 'item', relatedItem_u13) as IDItemOrigComplaintQualif,
    if(documentOf_u11 = 'lot', relatedItem_u13) as IDLotOrigComplaintQualif,
	[__FK_documents_u8] AS [__KEY_complaints_u1]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_documents_u8]);

Left Join (ComplaintQualificationDocuments_Tmp)
LOAD	
	[id_u33] as IDComplaintQualifOrig,
	[__KEY_complaints_u1],
	[__FK_complaints_u1] AS [__KEY_qualifications]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_complaints_u1]);

Left Join (ComplaintQualificationDocuments_Tmp)
LOAD	
	[__KEY_qualifications],
	[__FK_qualifications] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_qualifications]);

Left Join (ComplaintQualificationDocuments_Tmp)
LOAD	
	[id_u13] as IDTenderOrig,
	[id_u13] as IDTender,
	Mid([tenderID], 4, 4) as Year_Period,
	if(Lower([mode])='test', 1, 0) as TestFlag,
	[__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_data]);

DROP Fields __KEY_qualifications, __KEY_data, __KEY_complaints_u1  From ComplaintQualificationDocuments_Tmp;

FOR Each vPeriod in FieldValueList('YearPeriod')

	ComplaintQualificationDocuments_:
	NoConcatenate
	LOAD
		*
	Resident ComplaintQualificationDocuments_Tmp
	Where Year_Period = $(vPeriod);

	IF NOT IsNull(FileSize('$(TRN_QVD_PATH)ComplaintQualificationDocuments_$(vPeriod).qvd')) THEN
		Concatenate (ComplaintQualificationDocuments_) 
		LOAD 
			 IDTenderOrig,
		 	 IDComplaintQualifOrig,
		 	 [Описание файла жалобы квалификации],
			 [Дата изм. файла жалобы квалификации], 
		     [Дата публ. файла жалобы квалификации], 
		     IDComplaintQualifDocOrig, 
		     [Файл жалобы квалификации], 
		     [Формат файла жалобы квалификации],      
		     [Ссылка на файл жалобы квалификации],
		     ComplaintQualifDocumentOf,
			 ComplaintQualifDocumentType,
			 ComplaintQualifDocLanguage,
			 IDItemOrigComplaintQualif,
		     IDLotOrigComplaintQualif
		FROM $(TRN_QVD_PATH)ComplaintQualificationDocuments_$(vPeriod).qvd (qvd)
		Where NOT Exists(IDTender, IDTenderOrig);
	ENDIF
	
	ComplaintQualificationDocuments:
	LOAD 
		 IDTenderOrig,
	 	 AutoNumber(IDTenderOrig, 'IDTender')+$(vPeriod)*$(MulKey) as IDTenderKey,
	 	 IDComplaintQualifOrig,
	 	 AutoNumber(IDTenderOrig&IDComplaintQualifOrig&'Q', 'IDComplaintTender')+$(vPeriod)*$(MulKey) as IDComplaintTenderKey, // Продожение генерации ключа таблиц жалоб
	 	 [Дата изм. файла жалобы квалификации], 
	     [Дата публ. файла жалобы квалификации], 
	     IDComplaintQualifDocOrig, 
	     AutoNumber(IDTenderOrig&IDComplaintQualifDocOrig, 'IDComplaintQualifDoc')+$(vPeriod)*$(MulKey) as IDComplaintQualifDoc,
	     [Файл жалобы квалификации], 
	     [Формат файла жалобы квалификации],
	     [Ссылка на файл жалобы квалификации],
	     [Описание файла жалобы квалификации],
	     ComplaintQualifDocumentOf,
		 ComplaintQualifDocumentType,
		 ComplaintQualifDocLanguage,
		 IDItemOrigComplaintQualif, 
	     if(NOT IsNull(IDItemOrigComplaintQualif), AutoNumber(IDTenderOrig&IDItemOrigComplaintQualif, 'IDItem')+$(vPeriod)*$(MulKey)) as IDItemKeyComplaintQualif,
	     IDLotOrigComplaintQualif,
	     if(NOT IsNull(IDLotOrigComplaintQualif), AutoNumber(IDTenderOrig&IDLotOrigComplaintQualif, 'IDLot')+$(vPeriod)*$(MulKey)) as IDLotKeyComplaintQualif
	Resident ComplaintQualificationDocuments_
	WHERE TestFlag <> 1;  
	
	DROP Table ComplaintQualificationDocuments_;   
	
	STORE  ComplaintQualificationDocuments into $(TRN_QVD_PATH)ComplaintQualificationDocuments_$(vPeriod).qvd (qvd);
	DROP Table ComplaintQualificationDocuments;

NEXT

DROP Table ComplaintQualificationDocuments_Tmp; 

// Список ссылок на документы отмен

CancellationDocuments_Tmp:
LOAD	
	[format_u4] as [Формат файла отмены],
	[url_u8] as [Ссылка на файл отмены],
	[title_u9] as [Файл отмены],
	[description_u17] as [Описание файла отмены],
	$(vDateConvert([datePublished_u4])) as [Дата публ. файла отмены],
	$(vDateConvert([dateModified_u5])) as [Дата изм. файла отмены],
	[id_u19] as IDCancellationDocOrig,
	[documentOf_u5] as CancellationDocumentOf,
	[documentType_u5] as CancellationDocumentType,
	[language_u5] as CancellationDocLanguage,
	if(documentOf_u5 = 'item', relatedItem_u7) as IDItemOrig,
    if(documentOf_u5 = 'lot', relatedItem_u7) as IDLotOrig,
	[__FK_documents_u4] AS [__KEY_cancellations]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_documents_u4]);

Left Join (CancellationDocuments_Tmp)
LOAD	
	[id_u17] as IDCancellationOrig,
	[__KEY_cancellations],
	[__FK_cancellations] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_cancellations]);

Left Join (CancellationDocuments_Tmp)
LOAD	
	[id_u13] as IDTenderOrig,
	[id_u13] as IDTender,
	Mid([tenderID], 4, 4) as Year_Period,
	if(Lower([mode])='test', 1, 0) as TestFlag,
	[__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_data]);

DROP Fields __KEY_data, __KEY_cancellations  From CancellationDocuments_Tmp;

FOR Each vPeriod in FieldValueList('YearPeriod')

	CancellationDocuments_:
	NoConcatenate
	LOAD
		*
	Resident CancellationDocuments_Tmp
	Where Year_Period = $(vPeriod);

	IF NOT IsNull(FileSize('$(TRN_QVD_PATH)CancellationDocuments_$(vPeriod).qvd')) THEN
		Concatenate (CancellationDocuments_) 
		LOAD 
		 	 IDTenderOrig,
		 	 IDCancellationOrig,
		 	 [Описание файла отмены],
			 [Дата изм. файла отмены], 
		     [Дата публ. файла отмены], 
		     IDCancellationDocOrig, 
		     [Файл отмены], 
		     [Формат файла отмены],      
		     [Ссылка на файл отмены],
		     CancellationDocumentOf,
			 CancellationDocumentType,
			 CancellationDocLanguage,
			 IDItemOrig,
		     IDLotOrig
		FROM $(TRN_QVD_PATH)CancellationDocuments_$(vPeriod).qvd (qvd)
		Where NOT Exists(IDTender, IDTenderOrig);
	ENDIF
	
	CancellationDocuments:
	LOAD 
	 	 IDTenderOrig,
	 	 AutoNumber(IDTenderOrig, 'IDTender')+$(vPeriod)*$(MulKey) as IDTenderKey,
	 	 IDCancellationOrig,
	 	 AutoNumber(IDTenderOrig&IDCancellationOrig, 'IDCancellation')+$(vPeriod)*$(MulKey) as IDCancellationKey,
	 	 [Дата изм. файла отмены], 
	     [Дата публ. файла отмены], 
	     IDCancellationDocOrig, 
	     AutoNumber(IDTenderOrig&IDCancellationDocOrig, 'IDCancellationDoc')+$(vPeriod)*$(MulKey) as IDCancellationDoc,
	     [Файл отмены], 
	     [Формат файла отмены],
	     [Ссылка на файл отмены],
	     [Описание файла отмены],
	     CancellationDocumentOf,
		 CancellationDocumentType,
		 CancellationDocLanguage,
		 IDItemOrig, 
	     if(NOT IsNull(IDItemOrig), AutoNumber(IDTenderOrig&IDItemOrig, 'IDItem')+$(vPeriod)*$(MulKey)) as IDItemKey,
	     IDLotOrig,
	     if(NOT IsNull(IDLotOrig), AutoNumber(IDTenderOrig&IDLotOrig, 'IDLot')+$(vPeriod)*$(MulKey)) as IDLotKey
	Resident CancellationDocuments_
	WHERE TestFlag <> 1;  
	
	DROP Table CancellationDocuments_;   
	
	STORE  CancellationDocuments into $(TRN_QVD_PATH)CancellationDocuments_$(vPeriod).qvd (qvd);
	DROP Table CancellationDocuments;
	
NEXT	

DROP Table CancellationDocuments_Tmp;  

// Справочник ДКПП
//
//IF vLoadCPVDKPP THEN
//ClassificationDKPP:
//LOAD
//	 ItemAddClasId,
//	 Класс,
//	 AutoNumber(ItemAddClasId, 'IDClassDKPPKey') as IDClassDKPPKey;
//
//LOAD Text(@1) as ItemAddClasId, 
//     @1&' '&@2 as Класс
//FROM
//[http://standards.openprocurement.org/classifiers/dkpp/uk_pretty.yaml]
//(txt, utf8, no labels, delimiter is ': ', msq, no eof);
//
//ELSE
//
//ClassificationDKPP:
//LOAD ItemAddClasId, 
//     Класс, 
//     AutoNumber(ItemAddClasId, 'IDClassDKPPKey') as IDClassDKPPKey
//FROM $(DIC_QVD_PATH)ClassificationDKPP.qvd (qvd);
//
//ENDIF;
//
//STORE  ClassificationDKPP into $(DIC_QVD_PATH)ClassificationDKPP.qvd (qvd);
//DROP Table ClassificationDKPP;



//// Справочник CPV
//IF vLoadCPVDKPP THEN
//ItemCPV:
//LOAD
//	IDClassCPV,
//	ГруппаТовара,
//	AutoNumber(IDClassCPV, 'IDClassCPVKey') as IDClassCPVKey;
//
//LOAD @1 as IDClassCPV, 
//     @1&' '&@2 as ГруппаТовара     
//FROM
////[http://standards.openprocurement.org/classifiers/cpv/uk_pretty.yaml]
////[http://standards.openprocurement.org/classifiers/cpv/custom-2016-04-01/uk_pretty.yaml]
//[http://standards.openprocurement.org/classifiers/dk021/uk_pretty.yaml]
//(txt, utf8, no labels, delimiter is ': ', msq, no eof);
//
//Left Join (ItemCPV)
//LOAD @1 as IDClassCPV, 
////     @1&' '&Replace(Replace(if(Right(@2, 1)=chr(39), Left(@2, Len(@2)-1), @2), '!!python/unicode ''', ''), chr(39)&chr(39), chr(39)) as ItemGroup
//	 @1&' '&@2 as ItemGroup 
//FROM
////[http://standards.openprocurement.org/classifiers/cpv/en_pretty.yaml] 
////[http://standards.openprocurement.org/classifiers/cpv/custom-2016-04-01/en_pretty.yaml]
//[http://standards.openprocurement.org/classifiers/dk021/uk_pretty.yaml] //Їх немає. Поки доведеться всюди українську добавляти С. Павлюк 01.06.2017
//(txt, utf8, no labels, delimiter is ': ', msq, no eof);
//
//ELSE
//
//ItemCPV:
//Directory;
//LOAD IDClassCPV, 
//     ГруппаТовара, 
//     AutoNumber(IDClassCPV, 'IDClassCPVKey') as IDClassCPVKey, 
//     ItemGroup
//FROM $(DIC_QVD_PATH)ItemCPV.qvd (qvd);
//
//ENDIF;
//
//STORE  ItemCPV into $(DIC_QVD_PATH)ItemCPV.qvd (qvd);
//DROP Table ItemCPV;  
///$tab 6 Auctions
// Загрузка данных по аукционам из audit*.yaml файлов

TRACE ;
TRACE Auctions;

TenderDocuments_Tmp:
LOAD	
	[url_u1] as [Ссылка на файл тендера],
	[title_u0] as [Файл тендера],
	$(vDateConvert([datePublished])) as [Дата публ. файла тендера],
	$(vDateConvert([dateModified])) as [Дата изм. файла тендера],
	[id_u2] as IDTenderDocOrig,
	[__FK_documents] AS [__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_documents]);

Left Join (TenderDocuments_Tmp)
LOAD	
	[id_u13] as IDTenderOrig,
	Mid([tenderID], 4, 4) as Year_Period,
	if(Lower([mode])='test', 1, 0) as TestFlag,
	[__KEY_data]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_data]);

//DROP Table RestConnectorMasterTable;

TenderDocumentsTmp:
LOAD
	 [Ссылка на файл тендера],
	 [Файл тендера],
	 [Дата публ. файла тендера],
	 [Дата изм. файла тендера],
	 Year_Period,
	 IDTenderDocOrig,
	 IDTenderOrig
Resident 	TenderDocuments_Tmp
WHERE TestFlag <> 1;

DROP Table  TenderDocuments_Tmp;

LET QtyUrls = RangeMax(NoOfRows('TenderDocumentsTmp'), 0);

IF $(QtyUrls)>0 THEN
	TableDocUrls:
	LOAD 
		 IDTenderOrig,
	     [Файл тендера],
	     FirstValue([Ссылка на файл тендера]) as FileUrl
	Resident 	TenderDocumentsTmp
	Where [Файл тендера] like 'audit*.yaml'
	Group By IDTenderOrig, [Файл тендера]
	Order By IDTenderOrig, [Дата изм. файла тендера];
	
	Left Join (TableDocUrls)
	LOAD Distinct
		 IDTenderOrig,
		 Year_Period
	Resident TenderDocumentsTmp;
	
	DROP Table TenderDocumentsTmp;
ENDIF

LET AuditRowsQty = RangeMax(NoOfRows('TableDocUrls'), 0); 

// Переименование названий полей
MapTable:
mapping
LOAD * Inline [
F1, F2
- amount, Сумма раунда
amount, Сумма раунда
amount_features, Приведенная цена
bidder, IDBid
coeficient, Коэффициент коррекции
date, Дата предложения раунда
time, Дата предложения раунда
bid_time, Дата предложения раунда доп
days, contractDurationDays
years, contractDurationYears
];

IF $(AuditRowsQty) > 0 THEN

//	AuctionTmp1:
//	LOAD * Inline [
//	IDTender, IDBid, Начальная сумма аукциона, Дата начального предложения, Конечная сумма аукциона, Дата конечного предложения, Сумма 3 раунда, Дата предложения 3 раунда, Сумма 1 раунда, Дата предложения 1 раунда, Сумма 2 раунда, Дата предложения 2 раунда, Приведенная цена, Коэффициент коррекции
//	];
	
	AuctionTmp1:
	LOAD 
		0 as Dummy
	Autogenerate 0;
	
	FOR Each vAuditFileURL in FieldValueList('FileUrl')
	
		//AuctionControl:
		//LOAD
		//'$(vAuditFileURL)' as Heartbeating
		//AutoGenerate(1);
		//
		//STORE AuctionControl INTO  $(FILES_PATH)AuctionControl.txt (txt); // For Debug
		//DROP Table AuctionControl;
		
		Auction_Tmp:
		LOAD @1, 
		     @2,
		     if(@1='initial_bids' OR @1='results', RecNo()) as Flaginitial_bids,
		     if(@1='bids' OR @1='round_1', RecNo()) as Flag_bids,
		     if(@1='round_1' OR @1='round_2', RecNo()) as Flaground_1,
		     if(@1='round_2' OR @1='round_3', RecNo()) as Flaground_2,
		     if(@1='round_3', RecNo()) as Flaground_3,
		     if(@1 like 'turn_*', 1) as Flagturn,
		     RecNo() as AuditLineNo
		FROM $(vAuditFileURL)
		(txt, utf8, no labels, delimiter is ': ')
		WHERE ((@1 = 'id' AND RecNo() = 1) OR @1 = 'lot_id' OR @1 = 'tender_id' OR  @1 = 'initial_bids' OR @1 = '- amount' OR @1 = 'amount_features' OR @1 = 'coeficient' 
		OR @1 = 'bidder' OR @1 = 'date' OR @1 = 'results' OR @1 = 'bids' OR @1 = 'time' OR @1 = 'amount' OR @1 Like 'round_*' OR @1 Like 'turn_*' OR @1 = 'bid_time'
		OR @1 = 'days' OR @1 = 'years' OR @1 = 'yearlyPaymentsPercentage' OR @1 = 'contractDurationDays' OR @1 = 'contractDurationYears');
		
		// Определение диапазонов Начальных ставок, Конечных ставок, 1, 2, 3 Раундов в переменных
		TmpTable:
		LOAD
			Flaginitial_bids
		Resident Auction_Tmp
		Where NOT IsNull(Flaginitial_bids);	
		
		LET vStartRinitial_bids = Peek('Flaginitial_bids', 0, 'TmpTable')+1;
		LET vEndRinitial_bids = Peek('Flaginitial_bids', 1, 'TmpTable')-2;
		
		DROP Table TmpTable;
		
		TmpTable:
		LOAD
			Flag_bids
		Resident Auction_Tmp
		Where NOT IsNull(Flag_bids);	
		
		LET vStartRresults = Peek('Flag_bids', 0, 'TmpTable')+1;
		LET vEndRresults = Peek('Flag_bids', 1, 'TmpTable')-2;
		
		DROP Table TmpTable;
		
		TmpTable:
		LOAD
			Flaground_1
		Resident Auction_Tmp
		Where NOT IsNull(Flaground_1);	
		
		LET vStartRround_1 = Peek('Flaground_1', 0, 'TmpTable')+1;
		LET vEndRround_1 = Peek('Flaground_1', 1, 'TmpTable')-1;
		
		DROP Table TmpTable;
		
		TmpTable:
		LOAD
			Flaground_2
		Resident Auction_Tmp
		Where NOT IsNull(Flaground_2);	
		
		LET vStartRround_2 = Peek('Flaground_2', 0, 'TmpTable')+1;
		LET vEndRround_2 = Peek('Flaground_2', 1, 'TmpTable')-1;
		
		DROP Table TmpTable;
		
		TmpTable:
		LOAD
			Flaground_3
		Resident Auction_Tmp
		Where NOT IsNull(Flaground_3);	
		
		LET vStartRround_3 = Peek('Flaground_3', 0, 'TmpTable')+1;
		LET vEndRround_3 = Peek('AuditLineNo', -1, 'Auction_Tmp');
		
		DROP Table TmpTable;
		
		// Начальные ставки
		CALL LoadRound(vStartRinitial_bids, vEndRinitial_bids);
		
		AuctionTmp:
		NoConcatenate
		LOAD
			Evaluate([Сумма раунда]) as [Начальная сумма аукциона], 
		    IDBid, 
		    $(vDateConvert([Дата предложения раунда])) as [Дата начального предложения],
		    if(IsNull([Приведенная цена]),[Приведенная цена], Evaluate([Приведенная цена])) as [Приведенная цена], 
		    if(IsNull([Коэффициент коррекции]), [Коэффициент коррекции], Evaluate([Коэффициент коррекции])) as [Коэффициент коррекции],
		    contractDurationDays as InitialContractDurationDays,
		    contractDurationYears as InitialContractDurationYears,
		    yearlyPaymentsPercentage as InitialYearlyPaymentsPercentage
		Resident round;	
		
		DROP Table round;
		
		// Кoнечные результаты
		CALL LoadRound(vStartRresults, vEndRresults);
		
		Left Join (AuctionTmp)
		LOAD 
			Evaluate([Сумма раунда]) as [Конечная сумма аукциона], 
		    IDBid, 
		    $(vDateConvert([Дата предложения раунда])) as [Дата конечного предложения],
		    contractDurationDays as ResultContractDurationDays,
		    contractDurationYears as ResultContractDurationYears,
		    yearlyPaymentsPercentage as ResultYearlyPaymentsPercentage
		Resident round;
		
		DROP Table round;	
		
		// Round 1
		CALL LoadRound(vStartRround_1, vEndRround_1);
		
		Left Join (AuctionTmp)
		LOAD 
			Evaluate([Сумма раунда]) as [Сумма 1 раунда], 
		    IDBid, 
		    $(vDateConvert([Дата предложения раунда])) as [Дата предложения 1 раунда],
		    contractDurationDays as Round1ContractDurationDays,
		    contractDurationYears as Round1ContractDurationYears,
		    yearlyPaymentsPercentage as Round1YearlyPaymentsPercentage
		Resident round;
		
		DROP Table round;
		
		// Round 2
		CALL LoadRound(vStartRround_2, vEndRround_2);
		
		Left Join (AuctionTmp)
		LOAD 
			Evaluate([Сумма раунда]) as [Сумма 2 раунда], 
		    IDBid, 
		    $(vDateConvert([Дата предложения раунда])) as [Дата предложения 2 раунда],
		    contractDurationDays as Round2ContractDurationDays,
		    contractDurationYears as Round2ContractDurationYears,
		    yearlyPaymentsPercentage as Round2YearlyPaymentsPercentage
		Resident round;
		
		DROP Table round;
		
		// Round 3
		IF vStartRround_3 < vEndRround_3 THEN // Для обработки ситуации, когда ломается структура audit*.yaml файлов (в 3 раунде нет записей)
			CALL LoadRound(vStartRround_3, vEndRround_3);
		
			Left Join (AuctionTmp)
			LOAD 
				Evaluate([Сумма раунда]) as [Сумма 3 раунда], 
		    	IDBid, 
		    	$(vDateConvert([Дата предложения раунда])) as [Дата предложения 3 раунда],
		    	contractDurationDays as Round3ContractDurationDays,
		    	contractDurationYears as Round3ContractDurationYears,
		    	yearlyPaymentsPercentage as Round3YearlyPaymentsPercentage
			Resident round;
		
			DROP Table round;
		ELSE
			Left Join (AuctionTmp)
			LOAD * Inline [
			Сумма 3 раунда, IDBid, Дата предложения 3 раунда, Round3ContractDurationDays, Round3ContractDurationYears, Round3YearlyPaymentsPercentage
			];
		ENDIF
	
		Left Join (AuctionTmp)
		LOAD
			@2 as IDTenderTmp1
		Resident Auction_Tmp
		Where @1 = 'id';	
		
		Left Join (AuctionTmp)
		LOAD
			@2 as IDTenderTmp2
		Resident Auction_Tmp
		Where @1 = 'tender_id';
		
		Left Join (AuctionTmp)
		LOAD
			@2 as IDLotTmp
		Resident Auction_Tmp
		Where @1 = 'lot_id';
		
		DROP Table Auction_Tmp;
		
		Concatenate (AuctionTmp1)
		LOAD 
			if(IsNull(IDTenderTmp2), IDTenderTmp1, IDTenderTmp2) as IDTender,
			if(IsNull(IDLotTmp), 'Lot'&if(IsNull(IDTenderTmp2), IDTenderTmp1, IDTenderTmp2), IDLotTmp) as IDLot, 
			IDBid,
			[Начальная сумма аукциона], 
		    [Дата начального предложения],
		    [Приведенная цена], 
		    [Коэффициент коррекции],
		    InitialContractDurationDays,
		    InitialContractDurationYears,
		    InitialYearlyPaymentsPercentage,
		    [Конечная сумма аукциона], 
		    [Дата конечного предложения],
		    ResultContractDurationDays,
		    ResultContractDurationYears,
		    ResultYearlyPaymentsPercentage,
		    [Сумма 3 раунда], 
		    [Дата предложения 3 раунда],
		    Round3ContractDurationDays,
		    Round3ContractDurationYears,
		    Round3YearlyPaymentsPercentage,
		    [Сумма 1 раунда], 
		    [Дата предложения 1 раунда],
		    Round1ContractDurationDays,
		    Round1ContractDurationYears,
		    Round1YearlyPaymentsPercentage,
		    [Сумма 2 раунда], 
		    [Дата предложения 2 раунда],
		    Round2ContractDurationDays,
		    Round2ContractDurationYears,
		    Round2YearlyPaymentsPercentage
		Resident AuctionTmp;
		
		DROP Table 	AuctionTmp;
	
	NEXT vAuditFileURL;
	
	// =========================================
	AuctionTmp2:
	LOAD Distinct
		IDTender,
		IDTender as IDTenderOrig, 
		IDLot as IDLotOrig,
		IDBid as IDBidOrig,
	    [Начальная сумма аукциона], 
	    [Дата начального предложения],
	    [Приведенная цена], 
	    [Коэффициент коррекции],
	    InitialContractDurationDays,
	    InitialContractDurationYears,
	    InitialYearlyPaymentsPercentage,
	    [Конечная сумма аукциона], 
	    [Дата конечного предложения],
	    ResultContractDurationDays,
	    ResultContractDurationYears,
	    ResultYearlyPaymentsPercentage,
	    Alt([Сумма 3 раунда], [Сумма 2 раунда], [Сумма 1 раунда], [Начальная сумма аукциона]) as [Сумма 3 раунда], 
	    [Дата предложения 3 раунда],
	    Alt(Round3ContractDurationDays, Round2ContractDurationDays, Round1ContractDurationDays, InitialContractDurationDays) as Round3ContractDurationDays,
	    Alt(Round3ContractDurationYears, Round2ContractDurationYears, Round1ContractDurationYears, InitialContractDurationYears) as Round3ContractDurationYears,
	    Alt(Round3YearlyPaymentsPercentage, Round2YearlyPaymentsPercentage, Round1YearlyPaymentsPercentage, InitialYearlyPaymentsPercentage) as Round3YearlyPaymentsPercentage,
	    Alt([Сумма 1 раунда], [Начальная сумма аукциона]) as [Сумма 1 раунда], 
	    [Дата предложения 1 раунда],
	    Alt(Round1ContractDurationDays, InitialContractDurationDays) as Round1ContractDurationDays,
	    Alt(Round1ContractDurationYears, InitialContractDurationYears) as Round1ContractDurationYears,
	    Alt(Round1YearlyPaymentsPercentage, InitialYearlyPaymentsPercentage) as Round1YearlyPaymentsPercentage,
	    Alt([Сумма 2 раунда], [Сумма 1 раунда], [Начальная сумма аукциона]) as [Сумма 2 раунда], 
	    [Дата предложения 2 раунда],
	    Alt(Round2ContractDurationDays, Round1ContractDurationDays, InitialContractDurationDays) as Round2ContractDurationDays,
	    Alt(Round2ContractDurationYears, Round1ContractDurationYears, InitialContractDurationYears) as Round2ContractDurationYears,
	    Alt(Round2YearlyPaymentsPercentage, Round1YearlyPaymentsPercentage, InitialYearlyPaymentsPercentage) as Round2YearlyPaymentsPercentage
	Resident AuctionTmp1;
	
	DROP Table AuctionTmp1;
	
	Left Join (AuctionTmp2)
	LOAD Distinct
		IDTenderOrig,
		Year_Period
	Resident TableDocUrls;	
	
	// Store for DeBug
	STORE AuctionTmp2 into $(FILES_PATH)Auctions.qvd (qvd);

ENDIF

IF $(QtyUrls)>0 THEN
	DROP Table TableDocUrls;
ENDIF


// =================== Store to QVD ===================

IF $(AuditRowsQty) > 0 THEN

	FOR Each vPeriod in FieldValueList('YearPeriod')
	
		Auction_:
		NoConcatenate
		LOAD
			*
		Resident AuctionTmp2
		Where Year_Period = $(vPeriod);

		IF NOT IsNull(FileSize('$(TRN_QVD_PATH)Auction_$(vPeriod).qvd')) THEN
			AuctionTmp3:
			NoConcatenate
			LOAD 
			 	IDTenderOrig, 
			 	IDLotOrig,
				IDBidOrig,
				[Начальная сумма аукциона], 
			    [Дата начального предложения],
			    [Приведенная цена], 
			    [Коэффициент коррекции],
			    [Конечная сумма аукциона], 
			    [Дата конечного предложения],
			    [Сумма 3 раунда], 
			    [Дата предложения 3 раунда],
			    [Сумма 1 раунда], 
			    [Дата предложения 1 раунда],
			    [Сумма 2 раунда], 
			    [Дата предложения 2 раунда],
			    InitialContractDurationDays, 
			    InitialContractDurationYears, 
			    InitialYearlyPaymentsPercentage, 
			    ResultContractDurationDays, 
			    ResultContractDurationYears, 
			    ResultYearlyPaymentsPercentage, 
			    Round3ContractDurationDays, 
			    Round3ContractDurationYears, 
			    Round3YearlyPaymentsPercentage, 
			    Round2ContractDurationDays, 
			    Round2ContractDurationYears, 
			    Round2YearlyPaymentsPercentage, 
			    Round1ContractDurationDays, 
			    Round1ContractDurationYears, 
			    Round1YearlyPaymentsPercentage
			FROM $(TRN_QVD_PATH)Auction_$(vPeriod).qvd (qvd)
			WHERE NOT EXISTS(IDTender, IDTenderOrig);
			
			Left Join (AuctionTmp3)
			LOAD	
				[id_u13] as IDTenderOrig,
				if(Lower([mode])='test', 1, 0) as TestFlag,
				[__KEY_data]
			RESIDENT RestConnectorMasterTable
			WHERE NOT IsNull([__KEY_data]);	 
			
			Concatenate (Auction_)
			LOAD 
			 	IDTenderOrig, 
			 	IDLotOrig,
				IDBidOrig,
				[Начальная сумма аукциона], 
			    [Дата начального предложения],
			    [Приведенная цена], 
			    [Коэффициент коррекции],
			    [Конечная сумма аукциона], 
			    [Дата конечного предложения],
			    [Сумма 3 раунда], 
			    [Дата предложения 3 раунда],
			    [Сумма 1 раунда], 
			    [Дата предложения 1 раунда],
			    [Сумма 2 раунда], 
			    [Дата предложения 2 раунда],
			    InitialContractDurationDays, 
			    InitialContractDurationYears, 
			    InitialYearlyPaymentsPercentage, 
			    ResultContractDurationDays, 
			    ResultContractDurationYears, 
			    ResultYearlyPaymentsPercentage, 
			    Round3ContractDurationDays, 
			    Round3ContractDurationYears, 
			    Round3YearlyPaymentsPercentage, 
			    Round2ContractDurationDays, 
			    Round2ContractDurationYears, 
			    Round2YearlyPaymentsPercentage, 
			    Round1ContractDurationDays, 
			    Round1ContractDurationYears, 
			    Round1YearlyPaymentsPercentage
			Resident   AuctionTmp3
			WHERE TestFlag <> 1;
			
			DROP Table AuctionTmp3;  
		ENDIF
		
		Auction:
		LOAD AutoNumber(IDTenderOrig, 'IDTender')+$(vPeriod)*$(MulKey) as IDTender,
			 IDTenderOrig, 
			 IDLotOrig,
			 AutoNumber(IDTenderOrig&IDLotOrig, 'IDLot')+$(vPeriod)*$(MulKey) as IDLotKey,
		     IDBidOrig,
		     AutoNumber(IDTenderOrig&IDBidOrig, 'IDBid')+$(vPeriod)*$(MulKey) as IDBidKey,
		     AutoNumber(IDTenderOrig&IDLotOrig&IDBidOrig, 'KeyLotBid')+$(vPeriod)*$(MulKey) as KeyLotBid,
		     [Начальная сумма аукциона], 
		     [Дата начального предложения],
		     [Приведенная цена], 
		     [Коэффициент коррекции],
		     [Конечная сумма аукциона], 
		     [Дата конечного предложения],
		     [Сумма 3 раунда], 
		     [Дата предложения 3 раунда],
		     [Сумма 1 раунда], 
		     [Дата предложения 1 раунда],
		     [Сумма 2 раунда], 
		     [Дата предложения 2 раунда],
		     InitialContractDurationDays, 
		     InitialContractDurationYears, 
		     InitialYearlyPaymentsPercentage, 
		     ResultContractDurationDays, 
		     ResultContractDurationYears, 
		     ResultYearlyPaymentsPercentage, 
		     Round3ContractDurationDays, 
		     Round3ContractDurationYears, 
		     Round3YearlyPaymentsPercentage, 
		     Round2ContractDurationDays, 
		     Round2ContractDurationYears, 
		     Round2YearlyPaymentsPercentage, 
		     Round1ContractDurationDays, 
		     Round1ContractDurationYears, 
		     Round1YearlyPaymentsPercentage
		Resident  Auction_;
		
		DROP Table Auction_;    
		
		STORE  Auction into $(TRN_QVD_PATH)Auction_$(vPeriod).qvd (qvd);
		DROP Table Auction;
		
	NEXT
	
	DROP Table AuctionTmp2;	

ENDIF

IF $(AuditRowsQty) = 0 THEN

	FOR Each vPeriod in FieldValueList('YearPeriod')

		IF NOT IsNull(FileSize('$(TRN_QVD_PATH)Auction_$(vPeriod).qvd')) THEN
			Auction_:
			LOAD 
			 	IDTenderOrig, 
			 	IDLotOrig,
				IDBidOrig,
				[Начальная сумма аукциона], 
			    [Дата начального предложения],
			    [Приведенная цена], 
			    [Коэффициент коррекции],
			    [Конечная сумма аукциона], 
			    [Дата конечного предложения],
			    [Сумма 3 раунда], 
			    [Дата предложения 3 раунда],
			    [Сумма 1 раунда], 
			    [Дата предложения 1 раунда],
			    [Сумма 2 раунда], 
			    [Дата предложения 2 раунда],
			    InitialContractDurationDays, 
			    InitialContractDurationYears, 
			    InitialYearlyPaymentsPercentage, 
			    ResultContractDurationDays, 
			    ResultContractDurationYears, 
			    ResultYearlyPaymentsPercentage, 
			    Round3ContractDurationDays, 
			    Round3ContractDurationYears, 
			    Round3YearlyPaymentsPercentage, 
			    Round2ContractDurationDays, 
			    Round2ContractDurationYears, 
			    Round2YearlyPaymentsPercentage, 
			    Round1ContractDurationDays, 
			    Round1ContractDurationYears, 
			    Round1YearlyPaymentsPercentage
			FROM $(TRN_QVD_PATH)Auction_$(vPeriod).qvd (qvd);
			
			Left Join (Auction_)
			LOAD	
				[id_u13] as IDTenderOrig,
				if(Lower([mode])='test', 1, 0) as TestFlag,
				[__KEY_data]
			RESIDENT RestConnectorMasterTable
			WHERE NOT IsNull([__KEY_data]);	 
			
			Auction:
			LOAD 
			 	 AutoNumber(IDTenderOrig, 'IDTender')+$(vPeriod)*$(MulKey) as IDTender,
				 IDTenderOrig,
				 IDLotOrig,
				 AutoNumber(IDTenderOrig&IDLotOrig, 'IDLot')+$(vPeriod)*$(MulKey) as IDLotKey, 
			     IDBidOrig,
			     AutoNumber(IDTenderOrig&IDBidOrig, 'IDBid')+$(vPeriod)*$(MulKey) as IDBidKey,
			     AutoNumber(IDTenderOrig&IDLotOrig&IDBidOrig, 'KeyLotBid')+$(vPeriod)*$(MulKey) as KeyLotBid,
			     [Начальная сумма аукциона], 
			     [Приведенная цена], 
			     [Коэффициент коррекции],
			     [Дата начального предложения],
			     [Конечная сумма аукциона], 
			     [Дата конечного предложения],
			     [Сумма 3 раунда], 
			     [Дата предложения 3 раунда],
			     [Сумма 1 раунда], 
			     [Дата предложения 1 раунда],
			     [Сумма 2 раунда], 
			     [Дата предложения 2 раунда],
			     InitialContractDurationDays, 
			     InitialContractDurationYears, 
			     InitialYearlyPaymentsPercentage,
			     ResultContractDurationDays, 
			     ResultContractDurationYears, 
			     ResultYearlyPaymentsPercentage, 
			     Round3ContractDurationDays, 
			     Round3ContractDurationYears, 
			     Round3YearlyPaymentsPercentage, 
			     Round2ContractDurationDays, 
			     Round2ContractDurationYears, 
			     Round2YearlyPaymentsPercentage, 
			     Round1ContractDurationDays, 
			     Round1ContractDurationYears, 
			     Round1YearlyPaymentsPercentage
			Resident Auction_
			WHERE TestFlag <> 1;
		ENDIF
		
		DROP Table Auction_;
		
		STORE  Auction into $(TRN_QVD_PATH)Auction_$(vPeriod).qvd (qvd);
		DROP Table Auction;
	
	NEXT

ENDIF 
// =================== Аукционы ===================

///$tab 7 Offset Clean

DROP TABLE RestConnectorMasterTable;
// Если обновление данных без ошибок - сохранить новый Offset,
// иначе при следующей перезагрузке обновлять данные со старого Offseta

OffsetTable:
LOAD Distinct
	 LastValue(THUri) as uri
Resident TenderHeaders;	 

STORE OffsetTable INTO  $(DIC_QVD_PATH)OffsetTable.txt (txt); 
DROP Table OffsetTable;

DROP Table TenderHeaders;

IF NOT IsNull(FileSize('$(FILES_PATH)YearList.txt')) THEN
	Concatenate (YearList)
	LOAD YearPeriod
	FROM $(FILES_PATH)YearList.txt
	(txt, utf8, embedded labels, delimiter is '\t', msq)
	Where NOT Exists(YearPeriod);
ENDIF

STORE YearList into $(FILES_PATH)YearList.txt (txt);

DROP Table YearList;


//
NEXT vBatchNo;
//

DROP Table BatchTable;

// Настройка дополнительной повторной перезагрузки данных за прошедшие сутки с 05:00
CALL ADD_TENDER_RELOAD;
///$tab 8 Contract ID
// Периоды измененных тендеров
YearList:
LOAD YearPeriod
FROM $(FILES_PATH)YearList.txt
(txt, utf8, embedded labels, delimiter is '\t', msq);

// Очистка периодов во внешнем файле для возможности его использования в договорах и в др. загрузчиках
YearList_C:
NoConcatenate
LOAD * Inline [
YearPeriod
];

STORE YearList_C into $(FILES_PATH)YearList_C.txt (txt);
DROP Table YearList_C;

// Безусловная перезагрузка файлов договоров после измнения тендеров
FOR Each vPeriod in FieldValueList('YearPeriod')

	IF NOT IsNull(FileSize('$(TRN_QVD_PATH)Contract_C_$(vPeriod).qvd')) THEN
		Contract_C_:
		LOAD IDAwardOrig, 
			 IDTenderOrig,
			 IDContractOrig,
		     ИдентификаторКонтракта, 
			 НомерКонтракта, 
		     СтатусКонтракта, 
		     ОписаниеКонтракта, 
		     Контракт, 
		     ПлощадкаКонтракта,
		 	 НачДатаКонтракта,
			 КонДатаКонтракта,
			 ВалютаКонтракта,
			 ВалютаПлатежа,
			 СуммаКонтракта,
			 СуммаКонтрактаБезНДС,
			 СуммаПлатежа,
			 НДСКонтракта,
			 НДСПлатежа,
		     ДатаВремяПодписания,
		     ДатаПодписания,
			 ДатаИзмененияКонтракта,
			 terminationDetails,
			 IDSupplierOrig,
			 IDOrganizatorOrig,
			 isFromContracting,
			 [Причина розірвання договору], 
		     [Причина разрыва договора], 
		     [Cause of contract termination],
		     [Ініціатор розірвання договору], 
		     Initiator
		FROM $(TRN_QVD_PATH)Contract_C_$(vPeriod).qvd (qvd);
		
		Contract_C:
		LOAD IDAwardOrig, 
			 IDTenderOrig,
			 AutoNumber(IDTenderOrig, 'IDTender')+$(vPeriod)*$(MulKey) as IDTenderKey,
			 AutoNumber(IDTenderOrig&IDAwardOrig, 'IDAward')+$(vPeriod)*$(MulKey) as IDAwardKey,
		     IDContractOrig,
		     AutoNumber(IDContractOrig, 'IDContract')+$(vPeriod)*$(MulKey) as IDContractKey,
		     AutoNumber(IDContractOrig, 'IDContract')+$(vPeriod)*$(MulKey) as IDContract,
		     ИдентификаторКонтракта, 
			 НомерКонтракта, 
		     СтатусКонтракта, 
		     ОписаниеКонтракта, 
		     Контракт, 
		     ПлощадкаКонтракта,
		 	 НачДатаКонтракта,
			 КонДатаКонтракта,
			 ВалютаКонтракта,
			 ВалютаПлатежа,
			 СуммаКонтракта,
			 СуммаКонтрактаБезНДС,
			 СуммаПлатежа,
			 НДСКонтракта,
			 НДСПлатежа,
		     ДатаВремяПодписания,
		     ДатаПодписания,
			 ДатаИзмененияКонтракта,
			 terminationDetails,
			 IDSupplierOrig,
			 IDOrganizatorOrig,
			 isFromContracting,
			 [Причина розірвання договору], 
		     [Причина разрыва договора], 
		     [Cause of contract termination],
		     [Ініціатор розірвання договору], 
		     Initiator
		Resident Contract_C_;
		
		DROP Table Contract_C_;
		
		STORE  Contract_C into $(TRN_QVD_PATH)Contract_C_$(vPeriod).qvd (qvd);
		DROP Table Contract_C;
	ENDIF
	
	//Документы контракта
	IF NOT IsNull(FileSize('$(TRN_QVD_PATH)ContractDocuments_C_$(vPeriod).qvd')) THEN
		ContractDocuments_C_:
		LOAD 
		 	 IDContractOrig,
		 	 IDTenderOrig,
		 	 [Дата изм. файла контракта], 
		     [Дата публ. файла контракта], 
		     IDContractDocOrig, 
		     [Файл контракта], 
		     [Описание файла контракта],
		     [Формат файла контракта],      
		     [Ссылка на файл контракта],
		     ContractDocumentOf,
			 ContractDocumentType,
			 ContractDocLanguage,
			 IDItemOrig_C,
		     IDLotOrig,
		     IDContractOrig_DOC,
		     IDContractChange     
		FROM $(TRN_QVD_PATH)ContractDocuments_C_$(vPeriod).qvd (qvd);
		
		ContractDocuments_C:
		LOAD 
		 	 IDContractOrig,
		 	 IDTenderOrig,
		 	 AutoNumber(IDContractOrig, 'IDContract')+$(vPeriod)*$(MulKey) as IDContractKey,
		 	 AutoNumber(IDContractOrig, 'IDContract')+$(vPeriod)*$(MulKey) as IDContract,
		 	 AutoNumber(IDTenderOrig, 'IDTender')+$(vPeriod)*$(MulKey) as IDTenderKey,
		 	 AutoNumber(IDTenderOrig&IDContractDocOrig, 'IDContractDoc')+$(vPeriod)*$(MulKey) as IDContractDoc,
			 [Дата изм. файла контракта], 
		     [Дата публ. файла контракта], 
		     IDContractDocOrig, 
		     [Файл контракта], 
		     [Описание файла контракта],
		     [Формат файла контракта],      
		     [Ссылка на файл контракта],
		     ContractDocumentOf,
			 ContractDocumentType,
			 ContractDocLanguage,
			 IDItemOrig_C,
		     if(NOT IsNull(IDItemOrig_C), AutoNumber(IDTenderOrig&IDItemOrig_C, 'IDItem')+$(vPeriod)*$(MulKey)) as IDItemKey,
		     IDLotOrig,
		     if(NOT IsNull(IDLotOrig), AutoNumber(IDTenderOrig&IDLotOrig, 'IDLot')+$(vPeriod)*$(MulKey)) as IDLotKey,
		     IDContractOrig_DOC,
		     IDContractChange,     
		     if(NOT IsNull(IDContractChange), AutoNumber(IDContractOrig&IDContractChange, 'IDContractChange')+$(vPeriod)*$(MulKey)) as IDContractChangeKey
		Resident ContractDocuments_C_;
		
		DROP Table ContractDocuments_C_;
		
		STORE  ContractDocuments_C into $(TRN_QVD_PATH)ContractDocuments_C_$(vPeriod).qvd (qvd);
		DROP Table ContractDocuments_C;
	ENDIF
	
	//Товары контрактов
	IF NOT IsNull(FileSize('$(TRN_QVD_PATH)ContractItem_C_$(vPeriod).qvd')) THEN
		ContractItem_C_:
		LOAD
			 IDContractOrig,
			 IDTenderOrig,
			 КонДатаПоставки, 
		     НачДатаПоставки, 
		     Товар, 
		     Количество, 
		     IDItemOrig,
		     IDClassCPV, 
		     ItemAddClasId,
		     ItemUnitCode, 
		     ЕдИзмерения,
		     LineNo,
		     [Страна поставки],
		     [Город поставки],
		     [Индекс поставки],
		     [Регион поставки],
		     [Адрес поставки],
			 IDLotOrig,
			 Широта,
			 Долгота
		FROM $(TRN_QVD_PATH)ContractItem_C_$(vPeriod).qvd (qvd);
		
		ContractItem_C:
		LOAD
			 IDContractOrig,
			 IDTenderOrig,
			 AutoNumber(IDTenderOrig, 'IDTender')+$(vPeriod)*$(MulKey) as IDTenderKey,
			 Autonumber(IDContractOrig, 'IDContract')+$(vPeriod)*$(MulKey) as IDContractKey,
		     КонДатаПоставки, 
		     НачДатаПоставки, 
		     Товар, 
		     Количество, 
		     IDItemOrig,
		     AutoNumber(IDTenderOrig&IDItemOrig, 'IDItem')+$(vPeriod)*$(MulKey) as IDItem,
		     if(NOT IsNull(IDLotOrig), AutoNumber(IDTenderOrig&IDLotOrig, 'IDLot')+$(vPeriod)*$(MulKey)) as IDLotKey,
		     IDClassCPV, 
		     AutoNumber(IDClassCPV, 'IDClassCPVKey')+$(vPeriod)*$(MulKey) as IDClassCPVKey,
		     ItemAddClasId,
		     AutoNumber(IDTenderOrig&IDLotOrig&IDClassCPV&IDItemOrig, 'IDClassItemDKPPKey')+$(vPeriod)*$(MulKey) as IDClassItemDKPPKey,
		     ItemUnitCode, 
		     ЕдИзмерения,
		     LineNo,
		     [Страна поставки],
		     [Город поставки],
		     [Индекс поставки],
		     [Регион поставки],
		     [Адрес поставки],
			 IDLotOrig,
			 Широта,
			 Долгота
		Resident ContractItem_C_;
		
		DROP Table ContractItem_C_;
		
		STORE  ContractItem_C into $(TRN_QVD_PATH)ContractItem_C_$(vPeriod).qvd (qvd);
		DROP Table ContractItem_C;
	ENDIF
	
	
	//Изменения контракта
	IF NOT IsNull(FileSize('$(TRN_QVD_PATH)ContractChange_C_$(vPeriod).qvd')) THEN
		ContractChanges_:
		LOAD IDContractOrig, 
			 IDTenderOrig,
			 СтатусИзмененияКонтракта,
			 ДопНомерКонтракта,
			 Обоснование,
			 ДатаВнесенияИзмененияКонтракта,
			 ДатаВремяВнесенияИзмененияКонтракта,
			 [Дата внесення змін до договору],
			 IDContractChange
		FROM $(TRN_QVD_PATH)ContractChange_C_$(vPeriod).qvd (qvd);
		
		ContractChanges:
		LOAD IDContractOrig, 
			 AutoNumber(IDContractOrig, 'IDContract')+$(vPeriod)*$(MulKey) as IDContractKey,
			 IDTenderOrig,
			 Autonumber(IDTenderOrig, 'IDTender')+$(vPeriod)*$(MulKey) as IDTenderKey,
			 СтатусИзмененияКонтракта,
			 ДопНомерКонтракта,
			 Обоснование,
			 ДатаВнесенияИзмененияКонтракта,
			 ДатаВремяВнесенияИзмененияКонтракта,
			 [Дата внесення змін до договору],
			 IDContractChange,
			 AutoNumber(IDContractOrig&IDContractChange, 'IDContractChange')+$(vPeriod)*$(MulKey) as IDContractChangeKey
		Resident ContractChanges_;
		
		DROP Table ContractChanges_;
		
		STORE  ContractChanges into $(TRN_QVD_PATH)ContractChange_C_$(vPeriod).qvd (qvd);
		DROP Table ContractChanges;
	ENDIF
	
	// Изменения контракта rationale types
	IF NOT IsNull(FileSize('$(TRN_QVD_PATH)ContractChangeRationaleType_C_$(vPeriod).qvd')) THEN
		ContractChangeRationaleType_:
		LOAD IDContractChangeOrig,
			 rationaleType,
			 IDContractOrig
		FROM $(TRN_QVD_PATH)ContractChangeRationaleType_C_$(vPeriod).qvd (qvd);
		
		ContractChangeRationaleType:
		LOAD IDContractChangeOrig,
			 AutoNumber(IDContractOrig&IDContractChangeOrig, 'IDContractChange')+$(vPeriod)*$(MulKey) as IDContractChangeKey,
			 rationaleType,
			 IDContractOrig,
			 AutoNumber(IDContractOrig, 'IDContract')+$(vPeriod)*$(MulKey) as IDContractKey
		Resident ContractChangeRationaleType_;
		
		DROP Table ContractChangeRationaleType_;
		
		STORE ContractChangeRationaleType into $(TRN_QVD_PATH)ContractChangeRationaleType_C_$(vPeriod).qvd (qvd);
		DROP Table ContractChangeRationaleType;
	ENDIF

NEXT

DROP Table YearList;

//
TRACE Data loading from CONTRACTING;

IF FileSize('$(DIC_QVD_PATH)OffsetTableContracts.txt') > 0 THEN
	OffsetTableContracts:
	LOAD uri
	FROM
	$(DIC_QVD_PATH)OffsetTableContracts.txt
	(txt, utf8, embedded labels, delimiter is ',', msq);
	
	LET vURL_C = Peek('uri', -1, 'OffsetTableContracts');
	DROP Table OffsetTableContracts;

ELSE

	LET vURL_C = vBaseURL_C&vBatchLimit_C&vMode;
ENDIF

SET RowsQtyContractsHeaders = 0;


ContractHeadersAll:
LOAD * Inline [
ContractId, ContractModificateDateTime, THUri_C
];

CUSTOM CONNECT TO "Provider=QvRestConnector.exe;url=$(vBaseURL_C);sendExpect100Continue=True;checkResponseTypeOnTestConnection=true;authSchema=anonymous;skipServerCertificateValidation=1;timeout=100;method=$(vMethod);autoDetectResponseType=true;keyGenerationStrategy=3;useWindowsAuthentication=false;useCertificate=No;certificateStoreLocation=CurrentUser;certificateStoreName=My;PaginationType=Custom;XUserId=***;XPassword=***;";

DO

	TRACE;
	TRACE $(vURL_C);
	
	RestConnectorMasterTable:
	SQL SELECT 
		"__KEY_root",
		(SELECT 
			"path",
			"uri",
			"offset",
			"__FK_next_page"
		FROM "next_page" FK "__FK_next_page"),
		(SELECT 
			"id",
			"dateModified",
			"__FK_data"
		FROM "data" FK "__FK_data")
	FROM JSON (wrap on) "root" PK "__KEY_root"
	WITH CONNECTION(URL "$(vURL_C)");
	
	//
	OffsetTableContracts:
	LOAD [path],
		 [uri],
		 [offset]
	RESIDENT RestConnectorMasterTable
	WHERE NOT IsNull([__FK_next_page]);
	//
	//
	ContractHeadersTmp:
	LOAD [id],
		 [dateModified]
	RESIDENT RestConnectorMasterTable
	WHERE NOT IsNull([__FK_data]);
	//
	DROP TABLE RestConnectorMasterTable;
	
	
	//
	LET vURL_C = Peek('uri', -1, 'OffsetTableContracts');
	LET RowsQtyContractHeaders = NoOfRows('ContractHeadersTmp');
	//
	IF $(RowsQtyContractHeaders) > 0 THEN
		Concatenate (ContractHeadersAll)
		LOAD
			[id] as ContractId,
			Timestamp($(vDateConvert(dateModified))) as ContractModificateDateTime,
			'$(vURL_C)' as THUri_C
		Resident ContractHeadersTmp;	
	ENDIF;
	//
	IF $(RowsQtyContractHeaders) <> 0 THEN
		DROP Table OffsetTableContracts;
	ENDIF;
	//
	DROP Table ContractHeadersTmp;

LOOP WHILE $(RowsQtyContractHeaders) > 0;
//

//Исключение записей с одинковыми идентификаторами контрактов
ContractHeaders:
NoConcatenate
LOAD
	ContractId,
	LastValue(ContractModificateDateTime) as ContractModificateDateTime,
	LastValue(THUri_C) as THUri_C
Resident ContractHeadersAll	
Group by ContractId
Order By ContractModificateDateTime;
//
DROP Table ContractHeadersAll;
//
STORE ContractHeaders into $(FILES_PATH)ContractHeaders.qvd (qvd); // For Debug
//
LET AllRowsQty_C = NoOfRows('ContractHeaders');
//
STORE OffsetTableContracts INTO  $(FILES_PATH)OffsetTableContracts.txt (txt); // For Debug
DROP Table OffsetTableContracts;


IF $(AllRowsQty_C) = 0 THEN
	TRACE WARNING! No CONTRACTS changed;
	
	CALL ADD_CONTRACT_RELOAD;
ENDIF

//
//Если не было новых идентификаторов - выход
IF $(AllRowsQty_C) > 0 THEN
//

// Разбивка на порции для сохранения в QVD
ContractHeadersBase:
LOAD ContractId as ContractIdBase, 
     ContractModificateDateTime as ContractModificateDateTimeBase,
     THUri_C as THUri_CBase,
     if(IsNull(Previous(THUri_C)), 1, if(Previous(THUri_C)=THUri_C, Peek('BatchNo_C', -1, 'ContractHeadersBase'),  RangeSum(Peek('BatchNo_C', -1, 'ContractHeadersBase'), 1) )) as BatchNo_C
Resident  ContractHeaders
Order by ContractModificateDateTime;    
//
DROP Table ContractHeaders;
//
BatchTable_C:
LOAD 	 
	 Only(BatchNo_C) as Batch_C
Resident ContractHeadersBase
Group By BatchNo_C
Order By BatchNo_C;
//

// Для получения периода, где отсутствует идентификатор договора
Tender:
LOAD  
     IDTenderOrig, 
     Идентификатор
FROM $(TRN_QVD_PATH)Tender_????.qvd (qvd);
 
//FOR Each vBatchNo_C in FieldValueList('Batch_C') 

LET vLastBatch_C = Peek('Batch_C', -1, 'BatchTable_C');
LET vFirstBatch_C = Peek('Batch_C', 0, 'BatchTable_C');

//
FOR vBatchNo_C =  $(vFirstBatch_C) to  $(vLastBatch_C) step vStep 
//

LET vBatchNoStep_C = $(vBatchNo_C) + vStep - 1;

TRACE BatchNo_C $(vBatchNo_C) - $(vBatchNoStep_C);

ContractHeaders:
NoConcatenate
LOAD ContractIdBase as ContractId, 
     THUri_CBase as THUri_C
Resident  ContractHeadersBase
Where BatchNo_C >= $(vBatchNo_C) AND BatchNo_C <= $(vBatchNoStep_C);   

LET RowsQty_C = NoOfRows('ContractHeaders'); 
///$tab 9 ContractMasterTable
CUSTOM CONNECT TO "Provider=QvRestConnector.exe;url=$(vBaseURL_C);sendExpect100Continue=True;checkResponseTypeOnTestConnection=true;authSchema=anonymous;skipServerCertificateValidation=1;timeout=300;method=$(vMethod);autoDetectResponseType=true;keyGenerationStrategy=3;useWindowsAuthentication=false;useCertificate=No;certificateStoreLocation=CurrentUser;certificateStoreName=My;PaginationType=None;XUserId=***;XPassword=***;";

FOR Each vContractId in FieldValueList('ContractId') 

	LET vURL_C = vBaseURL_C&'/'&vContractId; 
	
	RestConnectorMasterTable_C:
	load *,
		 text([id_u3]) as [id_u3TXT],
		 text([id_u4]) as [id_u4TXT],
		 text([id_u0]) as [id_u0TXT],
		 text([id_u1]) as [id_u1TXT]
	;
	SQL SELECT 
		"status" AS "status_u0",
		"tender_id",
		"mode",
		"description" AS "description_u2",
		"title" AS "title_u0",
		"contractNumber" AS "contractNumber_u0",
		"dateModified" AS "dateModified_u0",
		"dateSigned",
		"owner",
		"awardID",
		"id" AS "id_u6",
		"contractID",
		"terminationDetails",
		"__KEY_data",
		(SELECT 
			"format",
			"url",
			"title",
			"documentOf",
			"datePublished",
			"documentType",
			"dateModified",
			"id",
			"language",
			"relatedItem",
			"description" as "description_u1999",
			"__FK_documents"
		FROM "documents" FK "__FK_documents"),
		(SELECT
			"amount" AS "amount_u100",
			"currency" AS "currency_u100",
			"valueAddedTaxIncluded" as "VAT_u100",
			"__FK_amountPaid"
		FROM "amountPaid" FK "__FK_amountPaid"),
		(SELECT 
			"description" AS "description_u1",
			"id" AS "id_u2",
			"quantity",
			"relatedLot" AS "relatedLot_u100",
			"__KEY_items",
			"__FK_items",
			(SELECT 
				"scheme",
				"description",
				"id" AS "id_u0",
				"__FK_classification"
			FROM "classification" FK "__FK_classification"),
			(SELECT 
				"scheme" AS "scheme_u0",
				"id" AS "id_u1",
				"description" AS "description_u0",
				"__FK_additionalClassifications"
			FROM "additionalClassifications" FK "__FK_additionalClassifications"),
			(SELECT 
				"postalCode",
				"countryName",
				"streetAddress",
				"region",
				"locality",
				"__FK_deliveryAddress"
			FROM "deliveryAddress" FK "__FK_deliveryAddress"),
			(SELECT
				"latitude" as "latitude_u77",
				"longitude" as "longitude_u77",
				"elevation" as "elevation_u77",
				"__FK_deliveryLocation"
			FROM "deliveryLocation" FK "__FK_deliveryLocation"),
			(SELECT 
				"startDate",
				"endDate",
				"__FK_deliveryDate"
			FROM "deliveryDate" FK "__FK_deliveryDate"),
			(SELECT 
				"code",
				"name",
				"__FK_unit"
			FROM "unit" FK "__FK_unit")
		FROM "items" PK "__KEY_items" FK "__FK_items"),
		(SELECT 
			"name" AS "name_u1",
			"__KEY_suppliers",
			"__FK_suppliers",
			(SELECT 
				"name" AS "name_u0",
				"email" AS "email_u200",
				"telephone" as "telephone_u200",
				"url" as "url_u200",
				"faxNumber" as "faxNumber_u200",
				"__FK_contactPoint"
			FROM "contactPoint" FK "__FK_contactPoint"),
			(SELECT 
				"scheme" AS "scheme_u1",
				"id" AS "id_u3",
				"legalName",
				"__FK_identifier"
			FROM "identifier" FK "__FK_identifier"),
			(SELECT 
				"postalCode" AS "postalCode_u0",
				"countryName" AS "countryName_u0",
				"streetAddress" AS "streetAddress_u0",
				"region" AS "region_u0",
				"locality" AS "locality_u0",
				"__FK_address"
			FROM "address" FK "__FK_address")
		FROM "suppliers" PK "__KEY_suppliers" FK "__FK_suppliers"),
		(SELECT 
			"startDate" AS "startDate_u0",
			"endDate" AS "endDate_u0",
			"__FK_period"
		FROM "period" FK "__FK_period"),
		(SELECT 
			"currency",
			"amount",
			"amountNet",
			"valueAddedTaxIncluded",
			"__FK_value"
		FROM "value" FK "__FK_value"),
		(SELECT 
			"name" AS "name_u3",
			"kind",
			"__KEY_procuringEntity",
			"__FK_procuringEntity",
			(SELECT 
				"telephone",
				"name" AS "name_u2",
				"email" AS "email_u0",
				"url" AS "url_3000",
				"availableLanguage" as "availableLanguage_3000",
				"faxNumber" as "faxNumber_3000",
				"__FK_contactPoint_u0"
			FROM "contactPoint" FK "__FK_contactPoint_u0"),
			(SELECT 
				"scheme" AS "scheme_u2",
				"id" AS "id_u4",
				"legalName" AS "legalName_u0",
				"__FK_identifier_u0"
			FROM "identifier" FK "__FK_identifier_u0"),
			(SELECT 
				"postalCode" AS "postalCode_u1",
				"countryName" AS "countryName_u1",
				"streetAddress" AS "streetAddress_u1",
				"region" AS "region_u1",
				"locality" AS "locality_u1",
				"__FK_address_u0"
			FROM "address" FK "__FK_address_u0")
		FROM "procuringEntity" PK "__KEY_procuringEntity" FK "__FK_procuringEntity"),
		(SELECT 
			"status",
			"contractNumber",
			"rationale",
			"date",
			"dateSigned" as "dateSigned_u0",
			"id" AS "id_u5",
			"__KEY_changes",
			"__FK_changes",
			(SELECT 
				"@Value",
				"__FK_rationaleTypes"
			FROM "rationaleTypes" FK "__FK_rationaleTypes" ArrayValueAlias "@Value")
		FROM "changes" PK "__KEY_changes" FK "__FK_changes")
	FROM JSON (wrap off) "data" PK "__KEY_data"
	WITH CONNECTION(URL "$(vURL_C)");

NEXT vContractId;

STORE RestConnectorMasterTable_C into $(FILES_PATH)RestConnectorMasterTable_C.qvd (qvd); 
///$tab 10 Contract StoreToQVD
//Контракты

Contract_TMP:
LOAD	[status_u0] as СтатусКонтракта,
	[tender_id] as IDTenderOrig,
	[description_u2] as ОписаниеКонтракта,
	if(Lower([mode])='test', 1, 0) as TestFlag,
	[title_u0] as Контракт,
	[contractNumber_u0] as НомерКонтракта,
	$(vDateConvert([dateModified_u0])) as ДатаИзмененияКонтракта,
	$(vDateConvert([dateSigned])) as ДатаВремяПодписания,
	Date(Floor($(vDateConvert([dateSigned])))) as ДатаПодписания,
	[owner] as ПлощадкаКонтракта,
	[awardID] as IDAwardOrig,
	[id_u6] as IDContractOrig,
	[contractID] as ИдентификаторКонтракта,
	terminationDetails,
	[__KEY_data]
RESIDENT RestConnectorMasterTable_C
WHERE NOT IsNull([__KEY_data]);

left join (Contract_TMP)
LOAD	$(vDateConvert([startDate_u0])) as НачДатаКонтракта,
	$(vDateConvert([endDate_u0])) as КонДатаКонтракта,
	[__FK_period] AS [__KEY_data]
RESIDENT RestConnectorMasterTable_C
WHERE NOT IsNull([__FK_period]);

Left Join (Contract_TMP)
LOAD	[currency] as ВалютаКонтракта,
	[amount] as СуммаКонтракта,
	[amountNet] as СуммаКонтрактаБезНДС,
	if(Lower([valueAddedTaxIncluded])='true', 1, if(Lower([valueAddedTaxIncluded])='false', 0, [valueAddedTaxIncluded])) as НДСКонтракта,
	[__FK_value] AS [__KEY_data]
RESIDENT RestConnectorMasterTable_C
WHERE NOT IsNull([__FK_value]);

left join (Contract_TMP)
load 	[amount_u100] as СуммаПлатежа,
		[currency_u100] AS ВалютаПлатежа,
		if(Lower([VAT_u100])='true', 1, if(Lower([VAT_u100])='false', 0, [VAT_u100])) as НДСПлатежа,
		[__FK_amountPaid] as [__KEY_data]
RESIDENT RestConnectorMasterTable_C
WHERE NOT IsNull([__FK_amountPaid]);

left join (Contract_TMP)
load	[__KEY_suppliers],
	 	[__FK_suppliers] as [__KEY_data]
RESIDENT RestConnectorMasterTable_C
WHERE NOT IsNull([__FK_suppliers]);

left join (Contract_TMP)
load 	[id_u3TXT] as IDSupplierOrig,
		[__FK_identifier] AS [__KEY_suppliers]
RESIDENT RestConnectorMasterTable_C
WHERE NOT IsNull([__FK_identifier]);

left join (Contract_TMP)
load 	[__KEY_procuringEntity],
		[__FK_procuringEntity] as [__KEY_data]
RESIDENT RestConnectorMasterTable_C
WHERE NOT IsNull([__FK_procuringEntity]);

left join (Contract_TMP)
LOAD 	[id_u4TXT] as IDOrganizatorOrig,
		[__FK_identifier_u0] AS [__KEY_procuringEntity]
RESIDENT RestConnectorMasterTable_C
WHERE NOT IsNull([__FK_identifier_u0]);

drop Fields [__KEY_data], [__KEY_suppliers], [__KEY_procuringEntity] from Contract_TMP;

// Проверка на полноту загруженных данных по контрактам 
IF NoOfRows('Contract_TMP')<>$(RowsQty_C) THEN 
	TRACE ERROR of Load full data from web [Contracts];
	EXIT Script;
ENDIF

Left Join (Contract_TMP)
LOAD 
     IDTenderOrig, 
     Идентификатор
Resident Tender;

YearList_C:
LOAD Distinct
	 Alt(Num(Mid(Идентификатор, 4, 4)), Num(Mid(ИдентификаторКонтракта, 4, 4)), Year('$(vCurrentDate)')) as YearPeriod
Resident Contract_TMP;

FOR Each vPeriod in FieldValueList('YearPeriod') 

	Contract_C_:
	NoConcatenate
	LOAD
		 *
	Resident Contract_TMP
	Where Alt(Num(Mid(Идентификатор, 4, 4)), Num(Mid(ИдентификаторКонтракта, 4, 4)), Year('$(vCurrentDate)')) = $(vPeriod);	 
	
	DROP Field  Идентификатор From Contract_C_;

	IF NOT Isnull(FileSize('$(TRN_QVD_PATH)Contract_C_$(vPeriod).qvd')) THEN
		Concatenate (Contract_C_)
		LOAD 
			СтатусКонтракта,
			IDTenderOrig,
			ОписаниеКонтракта,
			Контракт,
			НомерКонтракта,
			ДатаИзмененияКонтракта,
			ДатаВремяПодписания,
			ДатаПодписания,
			ПлощадкаКонтракта,
			IDAwardOrig,
			IDContractOrig,
			ИдентификаторКонтракта,
			НачДатаКонтракта,
			КонДатаКонтракта,
			ВалютаКонтракта,
			ВалютаПлатежа,
			СуммаКонтракта,
			СуммаКонтрактаБезНДС,
			СуммаПлатежа,
			НДСКонтракта,
			НДСПлатежа,
			terminationDetails,
			IDSupplierOrig,
			IDOrganizatorOrig,
			[Причина розірвання договору], 
		    [Причина разрыва договора], 
		    [Cause of contract termination],
		    [Ініціатор розірвання договору],
		    Initiator
		FROM $(TRN_QVD_PATH)Contract_C_$(vPeriod).qvd (qvd)
		WHERE NOT EXISTS(IDContractOrig);
		
		ELSE
		
		Left Join (Contract_C_)
		LOAD
			 Null() as [Причина розірвання договору], 
		     Null() as [Причина разрыва договора], 
		     Null() as [Cause of contract termination],
		     Null() as [Ініціатор розірвання договору],
		     Null() as Initiator
		AutoGenerate 1;	 
	ENDIF
	
	Contract_C:
	LOAD IDAwardOrig, 
		 IDTenderOrig,
		 AutoNumber(IDTenderOrig, 'IDTender')+$(vPeriod)*$(MulKey) as IDTenderKey,
		 AutoNumber(IDTenderOrig&IDAwardOrig, 'IDAward')+$(vPeriod)*$(MulKey) as IDAwardKey,
	     IDContractOrig,
	     AutoNumber(IDContractOrig, 'IDContract')+$(vPeriod)*$(MulKey) as IDContractKey,
	     AutoNumber(IDContractOrig, 'IDContract')+$(vPeriod)*$(MulKey) as IDContract,
	     ИдентификаторКонтракта, 
		 НомерКонтракта, 
	     СтатусКонтракта, 
//	     TestFlag,
	     ОписаниеКонтракта, 
	     Контракт, 
	     ПлощадкаКонтракта,
	 	 НачДатаКонтракта,
		 КонДатаКонтракта,
		 ВалютаКонтракта,
		 ВалютаПлатежа,
		 СуммаКонтракта,
		 СуммаКонтрактаБезНДС,
		 СуммаПлатежа,
		 НДСКонтракта,
		 НДСПлатежа,
	     ДатаВремяПодписания,
	     ДатаПодписания,
		 ДатаИзмененияКонтракта,
		 terminationDetails,
		 IDSupplierOrig,
		 IDOrganizatorOrig,
		 [Причина розірвання договору], 
	     [Причина разрыва договора], 
	     [Cause of contract termination],
	     [Ініціатор розірвання договору],
		 Initiator,
		 1 as isFromContracting
	Resident Contract_C_
	WHERE TestFlag <> 1;
	
	DROP Table Contract_C_;     
	
	STORE  Contract_C into $(TRN_QVD_PATH)Contract_C_$(vPeriod).qvd (qvd);
	
	//LiveContracts:
	//LOAD
	//	 IDContractOrig as IDContractLive
	//Resident 	Contract_C; 
	
	DROP Table Contract_C;
	
NEXT	

DROP Table Contract_TMP; 

//Документы Контракта	

ContractDocuments_TMP:
LOAD	[format]  as [Формат файла контракта],
	[url] as [Ссылка на файл контракта],
	[title]  as [Файл контракта],
	[documentOf] as ContractDocumentOf,
	[description_u1999] as [Описание файла контракта], 
	$(vDateConvert([datePublished])) as [Дата публ. файла контракта],
	[documentType] as ContractDocumentType,
	$(vDateConvert([dateModified])) as [Дата изм. файла контракта],
	[id] as IDContractDocOrig,
	[language] as ContractDocLanguage,
	if(documentOf = 'item', [relatedItem]) as IDItemOrig_C,
	if(documentOf = 'lot', [relatedItem]) as IDLotOrig,
	if(documentOf = 'change', [relatedItem]) as IDContractChange,
	if(documentOf = 'contract', [relatedItem]) as IDContractOrig_DOC,
	[__FK_documents] AS [__KEY_data]
RESIDENT RestConnectorMasterTable_C
WHERE NOT IsNull([__FK_documents]);

Left Join(ContractDocuments_TMP)
Load id_u6 as IDContractOrig,
	 id_u6 as IDContract,
	 [tender_id] as IDTenderOrig,
	 [contractID] as ИдентификаторКонтракта,
	 if(Lower([mode])='test', 1, 0) as TestFlag,
	[__KEY_data]
RESIDENT RestConnectorMasterTable_C
WHERE NOT IsNull([__KEY_data]);

DROP Field __KEY_data  From ContractDocuments_TMP;

Left Join (ContractDocuments_TMP)
LOAD 
     IDTenderOrig, 
     Идентификатор
Resident Tender;

FOR Each vPeriod in FieldValueList('YearPeriod')

	ContractDocuments_C_:
	NoConcatenate
	LOAD
		*
	Resident ContractDocuments_TMP
	Where Alt(Num(Mid(Идентификатор, 4, 4)), Num(Mid(ИдентификаторКонтракта, 4, 4)), Year('$(vCurrentDate)')) = $(vPeriod);	 
	
	DROP Fields  Идентификатор, ИдентификаторКонтракта From ContractDocuments_C_;

	IF NOT IsNull(FileSize('$(TRN_QVD_PATH)ContractDocuments_C_$(vPeriod).qvd')) THEN
		Concatenate (ContractDocuments_C_)
		LOAD 
		 	 IDContractOrig,
		 	 IDTenderOrig,
			 [Дата изм. файла контракта], 
		     [Дата публ. файла контракта], 
		     IDContractDocOrig,
		     [Описание файла контракта],
		     [Файл контракта], 
		     //[Описание файла контракта],
		     [Формат файла контракта],      
		     [Ссылка на файл контракта],
		     ContractDocumentOf,
			 ContractDocumentType,
			 ContractDocLanguage,
			 IDItemOrig_C,
			 IDContractOrig_DOC,
		     IDLotOrig,
		     IDContractChange
		FROM $(TRN_QVD_PATH)ContractDocuments_C_$(vPeriod).qvd (qvd)
		Where NOT Exists(IDContract, IDContractOrig);  
	ENDIF
	
	ContractDocuments_C:
	LOAD 
	 	 IDContractOrig,
	 	 IDTenderOrig,
	 	 AutoNumber(IDContractOrig, 'IDContract')+$(vPeriod)*$(MulKey) as IDContractKey,
	 	 AutoNumber(IDContractOrig, 'IDContract')+$(vPeriod)*$(MulKey) as IDContract,
	 	 AutoNumber(IDTenderOrig, 'IDTender')+$(vPeriod)*$(MulKey) as IDTenderKey,
	 	 AutoNumber(IDTenderOrig&IDContractDocOrig, 'IDContractDoc')+$(vPeriod)*$(MulKey) as IDContractDoc,
		 [Дата изм. файла контракта], 
	     [Дата публ. файла контракта], 
	     IDContractDocOrig, 
	     [Файл контракта], 
	     [Описание файла контракта],
	     [Формат файла контракта],      
	     [Ссылка на файл контракта],
	     ContractDocumentOf,
		 ContractDocumentType,
		 ContractDocLanguage,
		 IDItemOrig_C,
	     if(NOT IsNull(IDItemOrig_C), AutoNumber(IDTenderOrig&IDItemOrig_C, 'IDItem')+$(vPeriod)*$(MulKey)) as IDItemKey,
	     IDLotOrig,
	     if(NOT IsNull(IDLotOrig), AutoNumber(IDTenderOrig&IDLotOrig, 'IDLot')+$(vPeriod)*$(MulKey)) as IDLotKey,
	     IDContractOrig_DOC,
	     IDContractChange,     
	     if(NOT IsNull(IDContractChange), AutoNumber(IDContractOrig&IDContractChange, 'IDContractChange')+$(vPeriod)*$(MulKey)) as IDContractChangeKey
	Resident ContractDocuments_C_
	WHERE TestFlag <> 1;  
	
	DROP Table ContractDocuments_C_;   
	
	STORE  ContractDocuments_C into $(TRN_QVD_PATH)ContractDocuments_C_$(vPeriod).qvd (qvd);
	DROP Table ContractDocuments_C;

NEXT

DROP Table ContractDocuments_TMP;

//Товары контракта

ContractItem_TMP:
LOAD	[description_u1] as Товар,
	[id_u2] as IDItemOrig,
	[quantity] as Количество,
	[relatedLot_u100] as IDLotOrig,
	[__KEY_items],
	[__FK_items] AS [__KEY_data]
RESIDENT RestConnectorMasterTable_C
WHERE NOT IsNull([__FK_items]);

left join (ContractItem_TMP)
LOAD
	[id_u0TXT] as IDClassCPV,
	[__FK_classification] AS [__KEY_items]
RESIDENT RestConnectorMasterTable_C
WHERE NOT IsNull([__FK_classification]);

left join (ContractItem_TMP)
load 
	[id_u1TXT] AS ItemAddClasId,
	[__FK_additionalClassifications] as [__KEY_items]
RESIDENT RestConnectorMasterTable_C
WHERE NOT IsNull([__FK_additionalClassifications]);

left join (ContractItem_TMP)
LOAD	$(vDateConvert([startDate])) as НачДатаПоставки,
	$(vDateConvert([endDate])) as КонДатаПоставки,
	[__FK_deliveryDate] AS [__KEY_items]
RESIDENT RestConnectorMasterTable_C
WHERE NOT IsNull([__FK_deliveryDate]);

left join (ContractItem_TMP)
LOAD	[code] as ItemUnitCode,
	[name] as ЕдИзмерения,
	[__FK_unit] AS [__KEY_items]
RESIDENT RestConnectorMasterTable_C
WHERE NOT IsNull([__FK_unit]);

left join (ContractItem_TMP)
LOAD	[postalCode] as [Индекс поставки],
	[countryName] as [Страна поставки],
	[streetAddress] as [Адрес поставки],
	[region] as [Регион поставки],
	[locality] as [Город поставки],
	[__FK_deliveryAddress] AS [__KEY_items]
RESIDENT RestConnectorMasterTable_C
WHERE NOT IsNull([__FK_deliveryAddress]);

left join (ContractItem_TMP)
load [latitude_u77] as Широта,
	 [longitude_u77] as Долгота,
	 [__FK_deliveryLocation] as [__KEY_items]
RESIDENT RestConnectorMasterTable_C
WHERE NOT IsNull([__FK_deliveryLocation]);
	 
Left Join (ContractItem_TMP)
load [id_u6] as IDContractOrig,
	 [id_u6] as IDContract,
	 [tender_id] as IDTenderOrig,
	 [contractID] as ИдентификаторКонтракта,
	 if(Lower([mode])='test', 1, 0) as TestFlag,
	 [__KEY_data]
RESIDENT RestConnectorMasterTable_C
WHERE NOT IsNull([__KEY_data]);

Left Join (ContractItem_TMP)
LOAD 
     IDTenderOrig, 
     Идентификатор
Resident Tender;

FOR Each vPeriod in FieldValueList('YearPeriod')

	ContractItem_C_:
	NoConcatenate
	LOAD
		*
	Resident ContractItem_TMP
	Where Alt(Num(Mid(Идентификатор, 4, 4)), Num(Mid(ИдентификаторКонтракта, 4, 4)), Year('$(vCurrentDate)')) = $(vPeriod);	 
	
	DROP Fields  Идентификатор, ИдентификаторКонтракта From ContractItem_C_;

	IF NOT IsNull(FileSize('$(TRN_QVD_PATH)ContractItem_C_$(vPeriod).qvd')) THEN
		Concatenate (ContractItem_C_)
		LOAD IDContractOrig, 
			 IDTenderOrig,
		     КонДатаПоставки, 
		     НачДатаПоставки, 
		     Товар, 
		     Количество, 
		     IDItemOrig, 
		     IDClassCPV, 
		     ItemAddClasId,
		     ItemUnitCode, 
		     ЕдИзмерения,
		     [Страна поставки],
		     [Город поставки],
		     [Индекс поставки],
		     [Регион поставки],
		     [Адрес поставки],
		     IDLotOrig,
			 Широта,
			 Долгота
		FROM $(TRN_QVD_PATH)ContractItem_C_$(vPeriod).qvd (qvd)
		Where NOT Exists(IDContract, IDContractOrig);
	ENDIF
	
	ContractItem_C:
	LOAD
		 IDContractOrig,
		 IDTenderOrig,
		 AutoNumber(IDTenderOrig, 'IDTender')+$(vPeriod)*$(MulKey) as IDTenderKey,
		 Autonumber(IDContractOrig, 'IDContract')+$(vPeriod)*$(MulKey) as IDContractKey,
	     КонДатаПоставки, 
	     НачДатаПоставки, 
	     Товар, 
	     Количество, 
	     IDItemOrig,
	     AutoNumber(IDTenderOrig&IDItemOrig, 'IDItem')+$(vPeriod)*$(MulKey) as IDItem,
	     if(NOT IsNull(IDLotOrig), AutoNumber(IDTenderOrig&IDLotOrig, 'IDLot')+$(vPeriod)*$(MulKey)) as IDLotKey,
	     IDClassCPV, 
	     ItemAddClasId,
	     AutoNumber(IDTenderOrig&IDLotOrig&IDClassCPV&IDItemOrig, 'IDClassItemDKPPKey')+$(vPeriod)*$(MulKey) as IDClassItemDKPPKey,
	     ItemUnitCode, 
	     ЕдИзмерения,
	     if(Peek(IDTenderOrig)&Peek(IDLotOrig)=IDTenderOrig&IDLotOrig, Rangesum(Peek('LineNo'), 1), 1) as LineNo,
	     [Страна поставки],
	     [Город поставки],
	     [Индекс поставки],
	     [Регион поставки],
	     [Адрес поставки],
		 IDLotOrig,
		 Широта,
		 Долгота
	Resident ContractItem_C_
	WHERE TestFlag <> 1
	Order by IDTenderOrig, IDLotOrig;
	
	DROP Table ContractItem_C_;
	
	STORE  ContractItem_C into $(TRN_QVD_PATH)ContractItem_C_$(vPeriod).qvd (qvd);
	DROP Table ContractItem_C;

NEXT

DROP Table 	ContractItem_TMP;

//Изменения контракта

ContractChanges_TMP:
LOAD	[status] as СтатусИзмененияКонтракта,
	[contractNumber] as ДопНомерКонтракта,
	[rationale] as Обоснование,
	$(vDateConvert([date])) as ДатаВремяВнесенияИзмененияКонтракта,
	$(vDateConvert([dateSigned_u0])) as [Дата внесення змін до договору],
	Date(Floor($(vDateConvert([date])))) as ДатаВнесенияИзмененияКонтракта,
	[id_u5] as IDContractChange,
	[__KEY_changes],
	[__FK_changes] AS [__KEY_data]
RESIDENT RestConnectorMasterTable_C
WHERE NOT IsNull([__FK_changes]);

Left Join (ContractChanges_TMP)
Load [id_u6] as IDContractOrig,
	 [id_u6] as IDContract,
	 [contractID] as ИдентификаторКонтракта,
	 if(Lower([mode])='test', 1, 0) as TestFlag,
	 [tender_id] as IDTenderOrig,
	 [__KEY_data]
RESIDENT RestConnectorMasterTable_C
WHERE NOT IsNull([__KEY_data]);

Drop fields __KEY_data, __KEY_changes from ContractChanges_TMP;

Left Join (ContractChanges_TMP)
LOAD 
     IDTenderOrig, 
     Идентификатор
Resident Tender;

FOR Each vPeriod in FieldValueList('YearPeriod')

	ContractChanges_C_:
	NoConcatenate
	LOAD
		*
	Resident ContractChanges_TMP
	Where Alt(Num(Mid(Идентификатор, 4, 4)), Num(Mid(ИдентификаторКонтракта, 4, 4)), Year('$(vCurrentDate)')) = $(vPeriod);	
	
	DROP Fields  Идентификатор, ИдентификаторКонтракта From ContractChanges_C_;

	IF NOT IsNull(FileSize('$(TRN_QVD_PATH)ContractChange_C_$(vPeriod).qvd')) THEN
		Concatenate (ContractChanges_C_)
		LOAD IDContractOrig, 
			 IDTenderOrig,
			 СтатусИзмененияКонтракта,
			 ДопНомерКонтракта,
			 Обоснование,
			 ДатаВнесенияИзмененияКонтракта,
			 ДатаВремяВнесенияИзмененияКонтракта,
			 [Дата внесення змін до договору],
			 IDContractChange
		FROM $(TRN_QVD_PATH)ContractChange_C_$(vPeriod).qvd (qvd)
		Where NOT Exists(IDContract, IDContractOrig);
	ENDIF
	
	ContractChanges:
	Load IDContractOrig, 
		 AutoNumber(IDContractOrig, 'IDContract')+$(vPeriod)*$(MulKey) as IDContractKey,
		 IDTenderOrig,
		 Autonumber(IDTenderOrig, 'IDTender')+$(vPeriod)*$(MulKey) as IDTenderKey,
		 СтатусИзмененияКонтракта,
		 ДопНомерКонтракта,
		 Обоснование,
		 ДатаВнесенияИзмененияКонтракта,
		 ДатаВремяВнесенияИзмененияКонтракта,
		 [Дата внесення змін до договору],
		 IDContractChange,
		 AutoNumber(IDContractOrig&IDContractChange, 'IDContractChange')+$(vPeriod)*$(MulKey) as IDContractChangeKey
	Resident ContractChanges_C_
	WHERE TestFlag <> 1;
	
	Drop Table ContractChanges_C_;
	STORE  ContractChanges into $(TRN_QVD_PATH)ContractChange_C_$(vPeriod).qvd (qvd);
	Drop Table ContractChanges;
	
NEXT	

Drop Table ContractChanges_TMP;

// Изменения контракта RationaleType

ContractChangeRationaleType_TMP:
load [id_u5] as IDContractChange, 
	 [id_u5] as IDContractChangeOrig,
	 [__KEY_changes],
	 [__FK_changes] AS [__KEY_data]
RESIDENT RestConnectorMasterTable_C
WHERE NOT IsNull([__FK_changes]);

left join (ContractChangeRationaleType_TMP)
LOAD	[@Value] as rationaleType,
	[__FK_rationaleTypes] AS [__KEY_changes]
RESIDENT RestConnectorMasterTable_C
WHERE NOT IsNull([__FK_rationaleTypes]);

Left Join(ContractChangeRationaleType_TMP)
Load 
	 [id_u6] as IDContractOrig,
	 [id_u6] as IDContract,
	 [contractID] as ИдентификаторКонтракта,
	 if(Lower([mode])='test', 1, 0) as TestFlag,
	 [tender_id] as IDTenderOrig,
	 [__KEY_data]
RESIDENT RestConnectorMasterTable_C
WHERE NOT IsNull([__KEY_data]);

Drop Field __KEY_changes;

Left Join (ContractChangeRationaleType_TMP)
LOAD 
     IDTenderOrig, 
     Идентификатор
Resident Tender;

FOR Each vPeriod in FieldValueList('YearPeriod')

	ContractChangeRationaleType_C_:
	NoConcatenate
	LOAD
		*
	Resident ContractChangeRationaleType_TMP
	Where Alt(Num(Mid(Идентификатор, 4, 4)), Num(Mid(ИдентификаторКонтракта, 4, 4)), Year('$(vCurrentDate)')) = $(vPeriod);	 
	
	DROP Fields  Идентификатор, ИдентификаторКонтракта, IDTenderOrig From ContractChangeRationaleType_C_;

	IF NOT IsNull(FileSize('$(TRN_QVD_PATH)ContractChangeRationaleType_C_$(vPeriod).qvd')) THEN
		Concatenate(ContractChangeRationaleType_C_)
		Load IDContractChangeOrig,
			 rationaleType,
			 IDContractOrig
		FROM $(TRN_QVD_PATH)ContractChangeRationaleType_C_$(vPeriod).qvd (qvd)
		Where NOT Exists(IDContract, IDContractOrig); 
	ENDIF
	//
	ContractChangeRationaleType:
	Load IDContractChangeOrig,
		 AutoNumber(IDContractOrig&IDContractChangeOrig, 'IDContractChange')+$(vPeriod)*$(MulKey) as IDContractChangeKey,
		 rationaleType,
		 IDContractOrig,
		 AutoNumber(IDContractOrig, 'IDContract')+$(vPeriod)*$(MulKey) as IDContractKey
	Resident ContractChangeRationaleType_C_
	WHERE TestFlag <> 1;
	
	DROP Table ContractChangeRationaleType_C_;
	
	Store ContractChangeRationaleType into $(TRN_QVD_PATH)ContractChangeRationaleType_C_$(vPeriod).qvd (qvd);
	DROP Table ContractChangeRationaleType;

NEXT

DROP Table ContractChangeRationaleType_TMP;

//Поставщики - Suppliers

Suppliers_TMP:
LOAD	[name_u1] as ОрганизацияПоставщика,
	[__KEY_suppliers],
	[__FK_suppliers] AS [__KEY_data]
RESIDENT RestConnectorMasterTable_C
WHERE NOT IsNull([__FK_suppliers]);

left join (Suppliers_TMP)
LOAD Distinct
	[name_u0] as ИмяПоставщика,
	[email_u200] as EmailПоставщика,
	[telephone_u200] as ТелефонПоставщика,
	[url_u200] as СайтПоставщика,
	[faxNumber_u200] as ФаксПоставщика,
	[__FK_contactPoint] AS [__KEY_suppliers]
RESIDENT RestConnectorMasterTable_C
WHERE NOT IsNull([__FK_contactPoint]);

left join (Suppliers_TMP)
LOAD Distinct
	[scheme_u1] as СхемаПоставщика,
	[id_u3TXT] as IDSupplierOrig,
	[legalName] as ЮрНазваниеПоставщика,
	[__FK_identifier] AS [__KEY_suppliers]
RESIDENT RestConnectorMasterTable_C
WHERE NOT IsNull([__FK_identifier]);

left join (Suppliers_TMP)
LOAD Distinct
	[postalCode_u0] as ИндексПоставщика,
	[countryName_u0] as СтранаПоставщика,
	[streetAddress_u0] as АдресПоставщика,
	[region_u0] as РегионПоставщика,
	[locality_u0] as ГородПоставщика,
	[__FK_address] AS [__KEY_suppliers]
RESIDENT RestConnectorMasterTable_C
WHERE NOT IsNull([__FK_address]);

Left Join (Suppliers_TMP)
LOAD	
	$(vDateConvert([dateSigned])) as DateTimeSupplier,
	if(Lower([mode])='test', 1, 0) as TestFlag,
	[__KEY_data]
RESIDENT RestConnectorMasterTable_C
WHERE NOT IsNull([__KEY_data]);

Supplier_TMP1:
LOAD
	 Alt(DateTimeSupplier, Now(1)) as DateTimeSupplier, 
     СтранаПоставщика, 
     ГородПоставщика, 
     ИндексПоставщика, 
     РегионПоставщика, 
     АдресПоставщика, 
     EmailПоставщика, 
     ИмяПоставщика, 
     ТелефонПоставщика,
     СайтПоставщика, 
     ФаксПоставщика, 
     IDSupplierOrig, 
     ЮрНазваниеПоставщика, 
     СхемаПоставщика,
     if(IsNull(ОрганизацияПоставщика), ИмяПоставщика, ОрганизацияПоставщика) as Поставщик 
Resident Suppliers_TMP
WHERE TestFlag <> 1;

DROP Table Suppliers_TMP;

IF NOT IsNull(FileSize('$(DIC_QVD_PATH)Supplier_C.qvd')) THEN
	Concatenate (Supplier_TMP1)
	LOAD DateTimeSupplier, 
	     СтранаПоставщика, 
	     ГородПоставщика, 
	     ИндексПоставщика, 
	     РегионПоставщика, 
	     АдресПоставщика, 
	     EmailПоставщика, 
	     ИмяПоставщика, 
	     ТелефонПоставщика,
	     СайтПоставщика, 
	     ФаксПоставщика, 
	     IDSupplierOrig, 
	     ЮрНазваниеПоставщика, 
	     СхемаПоставщика,
	     Поставщик
	FROM $(DIC_QVD_PATH)Supplier_C.qvd (qvd);
ENDIF

Supplier_C:
NoConcatenate
LOAD 
	 LastValue(DateTimeSupplier) as DateTimeSupplier, 
     LastValue(СтранаПоставщика) as СтранаПоставщика, 
     LastValue(ГородПоставщика) as ГородПоставщика, 
     LastValue(ИндексПоставщика) as ИндексПоставщика, 
     LastValue(РегионПоставщика) as РегионПоставщика, 
     LastValue(АдресПоставщика) as АдресПоставщика, 
     LastValue(EmailПоставщика) as EmailПоставщика, 
     LastValue(ИмяПоставщика) as ИмяПоставщика, 
     LastValue(ТелефонПоставщика) as ТелефонПоставщика,
     LastValue(СайтПоставщика) as СайтПоставщика, 
     LastValue(ФаксПоставщика) as ФаксПоставщика, 
     IDSupplierOrig, 
     LastValue(ЮрНазваниеПоставщика) as ЮрНазваниеПоставщика, 
     LastValue(СхемаПоставщика) as СхемаПоставщика,
     LastValue(Поставщик) as Поставщик
Resident  Supplier_TMP1
Group By IDSupplierOrig
Order By DateTimeSupplier;

DROP Table Supplier_TMP1;  

//Supplier_C:
//NoConcatenate
//LOAD DateTimeSupplier, 
//     СтранаПоставщика, 
//     ГородПоставщика, 
//     ИндексПоставщика, 
//     РегионПоставщика, 
//     АдресПоставщика, 
//     EmailПоставщика, 
//     ИмяПоставщика, 
//     ТелефонПоставщика,
//     СайтПоставщика, 
//     ФаксПоставщика, 
//     IDSupplierOrig, 
//     AutoNumber(IDSupplierOrig, 'IDSupplier') as IDSupplier,
//     ЮрНазваниеПоставщика, 
//     СхемаПоставщика,
//     Поставщик
//Resident Supplier_TMP2;
//
//DROP Table Supplier_TMP2;     

STORE  Supplier_C into $(DIC_QVD_PATH)Supplier_C.qvd (qvd);

DROP Table Supplier_C; 

// Справочник Организатор

Organizer_TMP:
LOAD	[name_u3] as Организатор,
	[kind],
	[__KEY_procuringEntity],
	[__FK_procuringEntity] AS [__KEY_data]
RESIDENT RestConnectorMasterTable_C
WHERE NOT IsNull([__FK_procuringEntity]);

left join (Organizer_TMP)
LOAD Distinct	[scheme_u2] as СхемаОрганизатора,
	[id_u4TXT] as IDOrganizatorOrig,
	[legalName_u0] as ЮрНазваниеОрганизатора,
	[__FK_identifier_u0] AS [__KEY_procuringEntity]
RESIDENT RestConnectorMasterTable_C
WHERE NOT IsNull([__FK_identifier_u0]);

left join (Organizer_TMP)
LOAD Distinct	[postalCode_u1] as ИндексОрганизатора,
	[countryName_u1] as СтранаОрганизатора,
	[streetAddress_u1] as АдресОрганизатора,
	[region_u1] as РегионОрганизатора,
	[locality_u1] as ГородОрганизатора,
	[__FK_address_u0] AS [__KEY_procuringEntity]
RESIDENT RestConnectorMasterTable_C
WHERE NOT IsNull([__FK_address_u0]);

left join (Organizer_TMP)
LOAD	[telephone] as ТелефонОрганизатора,
	[name_u2] as ПредставительОрганизатора,
	[email_u0] as EmailОрганизатора,
	[url_3000] as СайтОрганизатора,
	[availableLanguage_3000] as availableLanguage,
	[faxNumber_3000] as ФаксОрганизатора,
	[__FK_contactPoint_u0] AS [__KEY_procuringEntity]
RESIDENT RestConnectorMasterTable_C
WHERE NOT IsNull([__FK_contactPoint_u0]);

left join (Organizer_TMP)
LOAD	
	$(vDateConvert([dateSigned])) as DateTimeOrganizator,
	[id_u6] as IDContractOrig,
	if(Lower([mode])='test', 1, 0) as TestFlag,
	[__KEY_data]
RESIDENT RestConnectorMasterTable_C
WHERE NOT IsNull([__KEY_data]);

OrganizerTMP:
LOAD Alt(DateTimeOrganizator, now(1)) as DateTimeOrganizator,
	 availableLanguage,
	 ИндексОрганизатора, 
     СтранаОрганизатора, 
     ГородОрганизатора, 
     РегионОрганизатора, 
     АдресОрганизатора, 
     EmailОрганизатора, 
     ПредставительОрганизатора, 
     ТелефонОрганизатора, 
     IDOrganizatorOrig, 
     ЮрНазваниеОрганизатора,  
     kind,
     СхемаОрганизатора, 
     Организатор,
     СайтОрганизатора,
     ФаксОрганизатора
Resident   Organizer_TMP
WHERE TestFlag <> 1;

DROP Table Organizer_TMP;   

IF NOT IsNull(FileSize('$(DIC_QVD_PATH)Organizator_C.qvd')) THEN
	Concatenate (OrganizerTMP)
	LOAD DateTimeOrganizator,
		 availableLanguage,
		 ИндексОрганизатора, 
	     СтранаОрганизатора, 
	     ГородОрганизатора, 
	     РегионОрганизатора, 
	     АдресОрганизатора, 
	     EmailОрганизатора, 
	     ПредставительОрганизатора, 
	     ТелефонОрганизатора, 
	     IDOrganizatorOrig, 
	     ЮрНазваниеОрганизатора,  
	     kind,
	     СхемаОрганизатора, 
	     Организатор,
	     СайтОрганизатора,
	     ФаксОрганизатора
	FROM $(DIC_QVD_PATH)Organizator_C.qvd (qvd);
ENDIF

Organizator_C:
NoConcatenate
LOAD 
	 LastValue(DateTimeOrganizator) as DateTimeOrganizator,
	 LastValue(availableLanguage) as availableLanguage,
	 LastValue(СтранаОрганизатора) as СтранаОрганизатора, 
	 LastValue(ИндексОрганизатора) as ИндексОрганизатора,
	 LastValue(ГородОрганизатора) as ГородОрганизатора, 
	 LastValue(РегионОрганизатора) as РегионОрганизатора, 
	 LastValue(АдресОрганизатора) as АдресОрганизатора, 
     LastValue(EmailОрганизатора) as EmailОрганизатора, 
     LastValue(ПредставительОрганизатора) as ПредставительОрганизатора,
     LastValue(ТелефонОрганизатора) as ТелефонОрганизатора, 
     IDOrganizatorOrig, 
     LastValue(ЮрНазваниеОрганизатора) as ЮрНазваниеОрганизатора, 
     LastValue(kind) as kind,
     LastValue(СхемаОрганизатора) as СхемаОрганизатора, 
     LastValue(Организатор) as Организатор,
     LastValue(СайтОрганизатора) as СайтОрганизатора,
     LastValue(ФаксОрганизатора) as ФаксОрганизатора
Resident OrganizerTMP
Group By IDOrganizatorOrig
Order By DateTimeOrganizator;

DROP Table OrganizerTMP; 

STORE  Organizator_C into $(DIC_QVD_PATH)Organizator_C.qvd (qvd);

DROP Table Organizator_C;
///$tab 11 Offset Clean Contracts
DROP Table RestConnectorMasterTable_C;

// Если обновление данных без ошибок - сохранить новый Offset,
// иначе при следующей перезагрузке обновлять данные со старого Offseta

OffsetTableContracts:
LOAD Distinct
	 LastValue(THUri_C) as uri
Resident ContractHeaders;	 

STORE OffsetTableContracts INTO  $(DIC_QVD_PATH)OffsetTableContracts.txt (txt); 
DROP Table OffsetTableContracts;

DROP Table ContractHeaders;

IF NOT IsNull(FileSize('$(FILES_PATH)YearList_C.txt')) THEN
	Concatenate (YearList_C)
	LOAD YearPeriod
	FROM $(FILES_PATH)YearList_C.txt
	(txt, utf8, embedded labels, delimiter is '\t', msq)
	Where NOT Exists(YearPeriod);
ENDIF

STORE YearList_C into $(FILES_PATH)YearList_C.txt (txt);

DROP Table YearList_C;

//
NEXT vBatchNo_C;
//

DROP Table Tender;

DROP Table BatchTable_C;

// Перегенерация ключевых полей в периодах в которых изменились договора, но не было изменений в тендерах
//=
YearPeriodTender:
LOAD YearPeriod
FROM $(FILES_PATH)YearList.txt
(txt, utf8, embedded labels, delimiter is '\t', msq);

YearPeriod:
NoConcatenate
LOAD YearPeriod
FROM $(FILES_PATH)YearList_C.txt
(txt, utf8, embedded labels, delimiter is '\t', msq)
Where NOT Exists(YearPeriod);

DROP Table YearPeriodTender;
// Файлы перезаписываюся, если есть отличающиеся периоды
FOR Each vPeriod in FieldValueList('YearPeriod')

	CALL QVDIDCreator('Tender', 'IDTender', 'AutoNumber(IDTenderOrig, ''IDTender'')+$(vPeriod)*$(MulKey) as IDTender');
	CALL QVDIDCreator('AdditionalClassification', 'IDClassItemDKPPKey, IDTenderKey', 'AutoNumber(IDTenderOrig&IDLotOrig&IDClassCPV&IDItemOrig, ''IDClassItemDKPPKey'')+$(vPeriod)*$(MulKey) as IDClassItemDKPPKey, AutoNumber(IDTenderOrig, ''IDTender'')+$(vPeriod)*$(MulKey) as IDTenderKey');
	CALL QVDIDCreator('Lot', 'IDTenderKey, IDLot', 'AutoNumber(IDTenderOrig, ''IDTender'')+$(vPeriod)*$(MulKey) as IDTenderKey, AutoNumber(IDTenderOrig&IDLotOrig, ''IDLot'')+$(vPeriod)*$(MulKey) as IDLot');
	CALL QVDIDCreator('Award', 'KeyLotBid, IDTenderKey, IDLotKey, IDAward', 'if(IsLimitedAward=1, AutoNumber(IDTenderOrig&IDLotOrig&IDAwardOrig, ''KeyLotBid'')+$(vPeriod)*$(MulKey), AutoNumber(IDTenderOrig&IDLotOrig&IDBidOrig, ''KeyLotBid'')+$(vPeriod)*$(MulKey)) as KeyLotBid, AutoNumber(IDTenderOrig, ''IDTender'')+$(vPeriod)*$(MulKey) as IDTenderKey, AutoNumber(IDTenderOrig&IDLotOrig, ''IDLot'')+$(vPeriod)*$(MulKey) as IDLotKey, AutoNumber(IDTenderOrig&IDAwardOrig, ''IDAward'')+$(vPeriod)*$(MulKey) as IDAward');
	CALL QVDIDCreator('Qualification', 'KeyLotBid, IDTenderKey, IDLotKey, IDQualification', 'AutoNumber(IDTenderOrig&IDLotOrig&IDBidOrig, ''KeyLotBid'')+$(vPeriod)*$(MulKey) as KeyLotBid, AutoNumber(IDTenderOrig, ''IDTender'')+$(vPeriod)*$(MulKey) as IDTenderKey, AutoNumber(IDTenderOrig&IDLotOrig, ''IDLot'')+$(vPeriod)*$(MulKey) as IDLotKey, AutoNumber(IDTenderOrig&IDQualificationOrig, ''IDQualification'')+$(vPeriod)*$(MulKey) as IDQualification');
	CALL QVDIDCreator('Contract', 'IDTenderKey, IDAwardKey, IDContract', 'AutoNumber(IDTenderOrig, ''IDTender'')+$(vPeriod)*$(MulKey) as IDTenderKey, AutoNumber(IDTenderOrig&IDAwardOrig, ''IDAward'')+$(vPeriod)*$(MulKey) as IDAwardKey, AutoNumber(IDContractOrig, ''IDContract'')+$(vPeriod)*$(MulKey) as IDContract');	
	CALL QVDIDCreator('ComplaintTender', 'IDComplaintTender, IDLotKey, IDTenderKey', 'AutoNumber(IDTenderOrig&IDComplaintTenderOrig, ''IDComplaintTender'')+$(vPeriod)*$(MulKey) as IDComplaintTender, if(NOT IsNull(IDLotOrig), AutoNumber(IDTenderOrig&IDLotOrig, ''IDLot'')+$(vPeriod)*$(MulKey)) as IDLotKey, AutoNumber(IDTenderOrig, ''IDTender'')+$(vPeriod)*$(MulKey) as IDTenderKey');	
	CALL QVDIDCreator('Bid', 'IDBid, IDLotKey, IDTenderKey, IDTendererKey, KeyLotBid', 'AutoNumber(IDTenderOrig&IDBidOrig, ''IDBid'')+$(vPeriod)*$(MulKey) as IDBid, AutoNumber(IDTenderOrig&IDLotOrig, ''IDLot'')+$(vPeriod)*$(MulKey) as IDLotKey, AutoNumber(IDTenderOrig, ''IDTender'')+$(vPeriod)*$(MulKey) as IDTenderKey, AutoNumber(IDTendererOrig, ''IDTenderer'')+$(vPeriod)*$(MulKey) as IDTendererKey, AutoNumber(IDTenderOrig&IDLotOrig&IDBidOrig, ''KeyLotBid'')+$(vPeriod)*$(MulKey) as KeyLotBid');
	CALL QVDIDCreator('Question', 'IDTenderKey, IDQuestion, IDItemKey, IDLotKey', 'AutoNumber(IDTenderOrig, ''IDTender'')+$(vPeriod)*$(MulKey) as IDTenderKey, AutoNumber(IDTenderOrig&IDQuestionOrig, ''IDQuestion'')+$(vPeriod)*$(MulKey) as IDQuestion, if(NOT IsNull(IDItemOrig), AutoNumber(IDTenderOrig&IDItemOrig, ''IDItem'')+$(vPeriod)*$(MulKey)) as IDItemKey, if(NOT IsNull(IDLotOrig), AutoNumber(IDTenderOrig&IDLotOrig, ''IDLot'')+$(vPeriod)*$(MulKey)) as IDLotKey');
	CALL QVDIDCreator('Features', 'IDTenderKey, IDItemKey, IDLotKey, IDBidKey, KeyFeature', 'AutoNumber(IDTenderOrig, ''IDTender'')+$(vPeriod)*$(MulKey) as IDTenderKey, if(NOT IsNull(IDItemOrig), AutoNumber(IDTenderOrig&IDItemOrig, ''IDItem'')+$(vPeriod)*$(MulKey)) as IDItemKey, if(NOT IsNull(IDLotOrig), AutoNumber(IDTenderOrig&IDLotOrig, ''IDLot'')+$(vPeriod)*$(MulKey)) as IDLotKey, if(NOT IsNull(IDBidOrig), AutoNumber(IDTenderOrig&IDBidOrig, ''IDBid'')+$(vPeriod)*$(MulKey)) as IDBidKey, AutoNumber(IDTenderOrig&IDFeatureOrig, ''KeyFeature'')+$(vPeriod)*$(MulKey) as KeyFeature');	
	CALL QVDIDCreator('TenderItem', 'IDTenderKey, IDItem, IDLotKey, IDClassItemDKPPKey', 'AutoNumber(IDTenderOrig, ''IDTender'')+$(vPeriod)*$(MulKey) as IDTenderKey, AutoNumber(IDTenderOrig&IDItemOrig, ''IDItem'')+$(vPeriod)*$(MulKey) as IDItem, if(NOT IsNull(IDLotOrig), AutoNumber(IDTenderOrig&IDLotOrig, ''IDLot'')+$(vPeriod)*$(MulKey)) as IDLotKey, AutoNumber(IDTenderOrig&IDLotOrig&IDClassCPV&IDItemOrig, ''IDClassItemDKPPKey'')+$(vPeriod)*$(MulKey) as IDClassItemDKPPKey');
	CALL QVDIDCreator('Cancellation', 'IDTenderKey, IDCancellation, IDLotKey', 'AutoNumber(IDTenderOrig, ''IDTender'')+$(vPeriod)*$(MulKey) as IDTenderKey, AutoNumber(IDTenderOrig&IDCancellationOrig, ''IDCancellation'')+$(vPeriod)*$(MulKey) as IDCancellation, if(NOT IsNull(IDLotOrig), AutoNumber(IDTenderOrig&IDLotOrig, ''IDLot'')+$(vPeriod)*$(MulKey)) as IDLotKey');
	CALL QVDIDCreator('ComplaintAward', 'IDComplaintTender, IDLotKey, IDTenderKey, IDAwardKey', 'AutoNumber(IDTenderOrig&IDComplaintAwardOrig&''A'', ''IDComplaintTender'')+$(vPeriod)*$(MulKey) as IDComplaintTender, if(NOT IsNull(IDLotOrig), AutoNumber(IDTenderOrig&IDLotOrig, ''IDLot'')+$(vPeriod)*$(MulKey)) as IDLotKey, AutoNumber(IDTenderOrig, ''IDTender'')+$(vPeriod)*$(MulKey) as IDTenderKey, AutoNumber(IDTenderOrig&IDAwardOrig, ''IDAward'')+$(vPeriod)*$(MulKey) as IDAwardKey');
	CALL QVDIDCreator('ComplaintQualification', 'IDComplaintTender, IDLotKey, IDTenderKey, KeyLotBid', 'AutoNumber(IDTenderOrig&IDComplaintQualifOrig&''Q'', ''IDComplaintTender'')+$(vPeriod)*$(MulKey) as IDComplaintTender, if(NOT IsNull(IDLotOrig), AutoNumber(IDTenderOrig&IDLotOrig, ''IDLot'')+$(vPeriod)*$(MulKey)) as IDLotKey, AutoNumber(IDTenderOrig, ''IDTender'')+$(vPeriod)*$(MulKey) as IDTenderKey, AutoNumber(IDTenderOrig&if(IsNull(IDLotQualifOrig), ''Lot''&IDTenderOrig, IDLotQualifOrig)&IDBidOrig, ''KeyLotBid'')+$(vPeriod)*$(MulKey) as KeyLotBid');
	CALL QVDIDCreator('TenderDocuments', 'IDTenderKey, IDTenderDoc, IDItemKey, IDLotKey', 'AutoNumber(IDTenderOrig, ''IDTender'')+$(vPeriod)*$(MulKey) as IDTenderKey, AutoNumber(IDTenderOrig&IDTenderDocOrig, ''IDTenderDoc'')+$(vPeriod)*$(MulKey) as IDTenderDoc, if(NOT IsNull(IDItemOrig), AutoNumber(IDTenderOrig&IDItemOrig, ''IDItem'')+$(vPeriod)*$(MulKey)) as IDItemKey, if(NOT IsNull(IDLotOrig), AutoNumber(IDTenderOrig&IDLotOrig, ''IDLot'')+$(vPeriod)*$(MulKey)) as IDLotKey');	
	CALL QVDIDCreator('AwardDocuments', 'IDTenderKey, IDAwardKey, IDAwardDoc, IDItemKey, IDLotKey', 'AutoNumber(IDTenderOrig, ''IDTender'')+$(vPeriod)*$(MulKey) as IDTenderKey, AutoNumber(IDTenderOrig&IDAwardOrig, ''IDAward'')+$(vPeriod)*$(MulKey) as IDAwardKey, AutoNumber(IDTenderOrig&IDAwardDocOrig, ''IDAwardDoc'')+$(vPeriod)*$(MulKey) as IDAwardDoc, if(NOT IsNull(IDItemOrig), AutoNumber(IDTenderOrig&IDItemOrig, ''IDItem'')+$(vPeriod)*$(MulKey)) as IDItemKey, if(NOT IsNull(IDLotOrig), AutoNumber(IDTenderOrig&IDLotOrig, ''IDLot'')+$(vPeriod)*$(MulKey)) as IDLotKey');	
	CALL QVDIDCreator('QualificationDocuments', 'IDTenderKey, IDQualificationKey, IDQualificationDoc, IDItemKey, IDLotKey', 'AutoNumber(IDTenderOrig, ''IDTender'')+$(vPeriod)*$(MulKey) as IDTenderKey, AutoNumber(IDTenderOrig&IDQualificationOrig, ''IDQualification'')+$(vPeriod)*$(MulKey) as IDQualificationKey, AutoNumber(IDTenderOrig&IDQualificationDocOrig, ''IDQualificationDoc'')+$(vPeriod)*$(MulKey) as IDQualificationDoc, if(NOT IsNull(IDItemOrig), AutoNumber(IDTenderOrig&IDItemOrig, ''IDItem'')+$(vPeriod)*$(MulKey)) as IDItemKey, if(NOT IsNull(IDLotOrig), AutoNumber(IDTenderOrig&IDLotOrig, ''IDLot'')+$(vPeriod)*$(MulKey)) as IDLotKey');
	CALL QVDIDCreator('BidDocuments', 'IDTenderKey, IDBidKey, IDBidDoc, IDItemKey, IDLotKey', 'AutoNumber(IDTenderOrig, ''IDTender'')+$(vPeriod)*$(MulKey) as IDTenderKey, AutoNumber(IDTenderOrig&IDBidOrig, ''IDBid'')+$(vPeriod)*$(MulKey) as IDBidKey,  AutoNumber(IDTenderOrig&IDBidDocOrig, ''IDBidDoc'')+$(vPeriod)*$(MulKey) as IDBidDoc, if(NOT IsNull(IDItemOrig), AutoNumber(IDTenderOrig&IDItemOrig, ''IDItem'')+$(vPeriod)*$(MulKey)) as IDItemKey, if(NOT IsNull(IDLotOrig), AutoNumber(IDTenderOrig&IDLotOrig, ''IDLot'')+$(vPeriod)*$(MulKey)) as IDLotKey');	
	CALL QVDIDCreator('ContractDocuments', 'IDTenderKey, IDContractKey, IDContractDoc, IDItemKey, IDLotKey', 'AutoNumber(IDTenderOrig, ''DTender'')+$(vPeriod)*$(MulKey) as IDTenderKey, AutoNumber(IDContractOrig, ''IDContract'')+$(vPeriod)*$(MulKey) as IDContractKey, AutoNumber(IDTenderOrig&IDContractDocOrig, ''IDContractDoc'')+$(vPeriod)*$(MulKey) as IDContractDoc, if(NOT IsNull(IDItemOrig), AutoNumber(IDTenderOrig&IDItemOrig, ''IDItem'')+$(vPeriod)*$(MulKey)) as IDItemKey, if(NOT IsNull(IDLotOrig), AutoNumber(IDTenderOrig&IDLotOrig, ''IDLot'')+$(vPeriod)*$(MulKey)) as IDLotKey');
	CALL QVDIDCreator('ComplaintTenderDocuments', 'IDTenderKey, IDComplaintTenderKey, IDComplaintTenderDoc, IDItemKeyComplaintTender, IDLotKeyComplaintTender', 'AutoNumber(IDTenderOrig, ''IDTender'')+$(vPeriod)*$(MulKey) as IDTenderKey, AutoNumber(IDTenderOrig&IDComplaintTenderOrig, ''IDComplaintTender'')+$(vPeriod)*$(MulKey) as IDComplaintTenderKey, AutoNumber(IDTenderOrig&IDComplaintTenderDocOrig, ''IDComplaintTenderDoc'')+$(vPeriod)*$(MulKey) as IDComplaintTenderDoc, if(NOT IsNull(IDItemOrigComplaintTender), AutoNumber(IDTenderOrig&IDItemOrigComplaintTender, ''IDItem'')+$(vPeriod)*$(MulKey)) as IDItemKeyComplaintTender, if(NOT IsNull(IDLotOrigComplaintTender), AutoNumber(IDTenderOrig&IDLotOrigComplaintTender, ''IDLot'')+$(vPeriod)*$(MulKey)) as IDLotKeyComplaintTender');	
	CALL QVDIDCreator('ComplaintAwardDocuments', 'IDTenderKey, IDComplaintTenderKey, IDComplaintAwardDoc, IDItemKeyComplaintAward, IDLotKeyComplaintAward', 'AutoNumber(IDTenderOrig, ''IDTender'')+$(vPeriod)*$(MulKey) as IDTenderKey, AutoNumber(IDTenderOrig&IDComplaintAwardOrig&''A'', ''IDComplaintTender'')+$(vPeriod)*$(MulKey) as IDComplaintTenderKey, AutoNumber(IDTenderOrig&IDComplaintAwardDocOrig, ''IDComplaintAwardDoc'')+$(vPeriod)*$(MulKey) as IDComplaintAwardDoc, if(NOT IsNull(IDItemOrigComplaintAward), AutoNumber(IDTenderOrig&IDItemOrigComplaintAward, ''IDItem'')+$(vPeriod)*$(MulKey)) as IDItemKeyComplaintAward, if(NOT IsNull(IDLotOrigComplaintAward), AutoNumber(IDTenderOrig&IDLotOrigComplaintAward, ''IDLot'')+$(vPeriod)*$(MulKey)) as IDLotKeyComplaintAward');
	CALL QVDIDCreator('ComplaintQualificationDocuments', 'IDTenderKey, IDComplaintTenderKey, IDComplaintQualifDoc, IDItemKeyComplaintQualif, IDLotKeyComplaintQualif', 'AutoNumber(IDTenderOrig, ''IDTender'')+$(vPeriod)*$(MulKey) as IDTenderKey, AutoNumber(IDTenderOrig&IDComplaintQualifOrig&''Q'', ''IDComplaintTender'')+$(vPeriod)*$(MulKey) as IDComplaintTenderKey, if(NOT IsNull(IDItemOrigComplaintQualif), AutoNumber(IDTenderOrig&IDItemOrigComplaintQualif, ''IDItem'')+$(vPeriod)*$(MulKey)) as IDItemKeyComplaintQualif, if(NOT IsNull(IDLotOrigComplaintQualif), AutoNumber(IDTenderOrig&IDLotOrigComplaintQualif, ''IDLot'')+$(vPeriod)*$(MulKey)) as IDLotKeyComplaintQualif, AutoNumber(IDTenderOrig&IDComplaintQualifDocOrig, ''IDComplaintQualifDoc'')+$(vPeriod)*$(MulKey) as IDComplaintQualifDoc');
	CALL QVDIDCreator('CancellationDocuments', 'IDTenderKey, IDCancellationKey, IDCancellationDoc, IDItemKey, IDLotKey', 'AutoNumber(IDTenderOrig, ''IDTender'')+$(vPeriod)*$(MulKey) as IDTenderKey, AutoNumber(IDTenderOrig&IDCancellationOrig, ''IDCancellation'')+$(vPeriod)*$(MulKey) as IDCancellationKey, AutoNumber(IDTenderOrig&IDCancellationDocOrig, ''IDCancellationDoc'')+$(vPeriod)*$(MulKey) as IDCancellationDoc, if(NOT IsNull(IDItemOrig), AutoNumber(IDTenderOrig&IDItemOrig, ''IDItem'')+$(vPeriod)*$(MulKey)) as IDItemKey, if(NOT IsNull(IDLotOrig), AutoNumber(IDTenderOrig&IDLotOrig, ''IDLot'')+$(vPeriod)*$(MulKey)) as IDLotKey');	
	CALL QVDIDCreator('Auction', 'IDTender, IDLotKey, IDBidKey, KeyLotBid', 'AutoNumber(IDTenderOrig, ''IDTender'')+$(vPeriod)*$(MulKey) as IDTender, AutoNumber(IDTenderOrig&IDLotOrig, ''IDLot'')+$(vPeriod)*$(MulKey) as IDLotKey, AutoNumber(IDTenderOrig&IDBidOrig, ''IDBid'')+$(vPeriod)*$(MulKey) as IDBidKey, AutoNumber(IDTenderOrig&IDLotOrig&IDBidOrig, ''KeyLotBid'')+$(vPeriod)*$(MulKey) as KeyLotBid');	
	
	CALL QVDIDCreator('Milestones', 'IDTenderKey, IDLotKey, IDMilestone', 'AutoNumber(IDTenderOrig, ''IDTender'')+$(vPeriod)*$(MulKey) as IDTenderKey, AutoNumber(IDTenderOrig&IDLotOrig, ''IDLot'')+$(vPeriod)*$(MulKey) as IDLotKey, AutoNumber(IDTenderOrig&[ID умови], ''IDMilestone'')+$(vPeriod)*$(MulKey) as IDMilestone');

NEXT 
DROP Table YearPeriod;
//=

ENDIF
//Если не было новых идентификаторов 

// Настройка дополнительной повторной перезагрузки данных за прошедшие сутки с 05:00
CALL ADD_CONTRACT_RELOAD;
///$tab 12 Tender Data Translate
TRACE DATA Translate;

//SET vDayLimit = 300000; //для Яндекс ключей

// Перевод Организатор

Organizator:
LOAD 
	 *,
     Organiser as _Organiser,
     Replace(Replace(Replace(Организатор, Chr(39), 'ꞌ'), Chr(10), ' '), Chr(13), ' ') as _Организатор     
FROM
$(DIC_QVD_PATH)Organizator.qvd (qvd);

RENAME Field [Organiser city] to [_Organiser city];

Organizator_Tmp:
LOAD Distinct
	 _Организатор
Resident Organizator
Where IsNull(_Organiser);	 

LET vCountOrgs = NoOfRows('Organizator_Tmp');

IF $(vCountOrgs) > 0 THEN

	CALL  TRANSLATE('_Организатор', 'Organizator_Tmp', 'Organiser_');
	
	Left Join (Organizator)
	LOAD 
		 _Организатор,
		 Organiser_
	Resident Organizator_Tmp;
	
	Left Join (Organizator)
	LOAD 
		 IDOrganizatorOrig,
		 if(IsNull(_Organiser), Organiser_, _Organiser) as Organiser
	Resident Organizator;
	
	DROP Fields _Organiser, Organiser_;
	
	// Город организатора
	OrganizatorCity_Tmp:
	LOAD Distinct
		 ГородОрганизатора
	Resident Organizator
	Where IsNull([_Organiser city]) AND ГородОрганизатора<>'' AND NOT IsNull(ГородОрганизатора);
	
	IF NoOfRows('OrganizatorCity_Tmp') > 0 THEN
	
		CALL  TRANSLATE('ГородОрганизатора', 'OrganizatorCity_Tmp', 'OrganiserСity');
		
		Left Join (Organizator)
		LOAD 
			 ГородОрганизатора,
			 OrganiserСity
		Resident OrganizatorCity_Tmp;
		
		Left Join (Organizator)
		LOAD 
			 IDOrganizatorOrig,
			 if(IsNull([_Organiser city]), OrganiserСity, [_Organiser city]) as [Organiser city]
		Resident Organizator;
		
		DROP Fields [_Organiser city], OrganiserСity;
	
		ELSE
	
		RENAME Field [_Organiser city] to [Organiser city];

	ENDIF

	DROP Table OrganizatorCity_Tmp;

ENDIF

DROP Table Organizator_Tmp;

IF $(vCountOrgs) > 0 THEN
	STORE Organizator into $(DIC_QVD_PATH)Organizator.qvd (qvd);
	
	IF vPlanSave THEN
		STORE IDOrganizatorOrig, ГородОрганизатора, РегионОрганизатора, Организатор, Organiser, ТелефонОрганизатора, ИндексОрганизатора, EmailОрганизатора, ПредставительОрганизатора, АдресОрганизатора FROM Organizator into $(DIC_QVD_PATH)Organizator_P.qvd (qvd);
	ENDIF
ENDIF

DROP Table Organizator;

// Перевод Участник

Tenderer:
LOAD 
	 *,
     Replace(ГородУчастника, Chr(28), '') as _ГородУчастника,
     Replace(Replace(Replace(Участник, Chr(39), 'ꞌ'), Chr(10), ' '), Chr(13), ' ') as _Участник
FROM $(DIC_QVD_PATH)Tenderer.qvd (qvd);

RENAME Fields TendererEN to _TendererEN, [Tenderer city] to [_Tenderer city], [Tenderer region] to [_Tenderer region], [Tenderer country] to [_Tenderer country];

Tenderer_Tmp:
LOAD Distinct
	 _Участник
Resident Tenderer
Where IsNull(_TendererEN);	 

LET vCountTends = NoOfRows('Tenderer_Tmp');

IF $(vCountTends) > 0 THEN

	CALL  TRANSLATE('_Участник', 'Tenderer_Tmp', 'Tenderer_');
	
	Left Join (Tenderer)
	LOAD 
		 _Участник,
		 Tenderer_
	Resident Tenderer_Tmp;
	
	Left Join (Tenderer)
	LOAD 
		 IDTendererOrig,
		 if(IsNull(_TendererEN), Tenderer_, _TendererEN) as TendererEN
	Resident Tenderer;
	
	DROP Fields _TendererEN, Tenderer_;
	
	// Город участника
	TendererCity_Tmp:
	LOAD Distinct
		 _ГородУчастника
	Resident Tenderer
	Where IsNull([_Tenderer city]) AND _ГородУчастника<>'' AND NOT IsNull(_ГородУчастника);
	
	IF NoOfRows('TendererCity_Tmp') > 0 THEN
	
		CALL  TRANSLATE('_ГородУчастника', 'TendererCity_Tmp', 'TendererСity');
		
		Left Join (Tenderer)
		LOAD 
			 _ГородУчастника,
			 TendererСity
		Resident TendererCity_Tmp;
		
		Left Join (Tenderer)
		LOAD 
			 IDTendererOrig,
			 if(IsNull([_Tenderer city]), TendererСity, [_Tenderer city]) as [Tenderer city]
		Resident Tenderer;
		
		DROP Fields [_Tenderer city], TendererСity;
	
	ELSE
	
		RENAME Field [_Tenderer city] to [Tenderer city];

	ENDIF

	DROP Table TendererCity_Tmp;
	
	// Регион участника
	TendererRegion_Tmp:
	LOAD Distinct
		 РегионУчастника
	Resident Tenderer
	Where IsNull([_Tenderer region]) AND РегионУчастника<>'' AND NOT IsNull(РегионУчастника);
	
	IF NoOfRows('TendererRegion_Tmp') > 0 THEN
	
		CALL  TRANSLATE('РегионУчастника', 'TendererRegion_Tmp', 'TendererRegion');
		
		Left Join (Tenderer)
		LOAD 
			 РегионУчастника,
			 TendererRegion
		Resident TendererRegion_Tmp;
		
		Left Join (Tenderer)
		LOAD 
			 IDTendererOrig,
			 if(IsNull([_Tenderer region]), TendererRegion, [_Tenderer region]) as [Tenderer region]
		Resident Tenderer;
		
		DROP Fields [_Tenderer region], TendererRegion;
		
		ELSE
		
		RENAME Field [_Tenderer region] to [Tenderer region];
	
	ENDIF
	
	DROP Tables TendererRegion_Tmp;
	
	// Страна участника
	TendererCountry_Tmp:
	LOAD Distinct
		 СтранаУчастника
	Resident Tenderer
	Where IsNull([_Tenderer country]) AND СтранаУчастника<>'' AND NOT IsNull(СтранаУчастника);
	
	IF NoOfRows('TendererCountry_Tmp') > 0 THEN
	
		CALL  TRANSLATE('СтранаУчастника', 'TendererCountry_Tmp', 'TendererCountry');
		
		Left Join (Tenderer)
		LOAD 
			 СтранаУчастника,
			 TendererCountry
		Resident TendererCountry_Tmp;
		
		Left Join (Tenderer)
		LOAD 
			 IDTendererOrig,
			 if(IsNull([_Tenderer country]), TendererCountry, [_Tenderer country]) as [Tenderer country]
		Resident Tenderer;
		
		DROP Fields [_Tenderer country], TendererCountry;
		
		ELSE
		
		RENAME Field [_Tenderer country] to [Tenderer country];
	
	ENDIF
	
	DROP Tables TendererCountry_Tmp;

ENDIF

DROP Table Tenderer_Tmp;
DROP Fields _Участник, _ГородУчастника;

IF $(vCountTends) > 0 THEN
	
	STORE Tenderer into $(DIC_QVD_PATH)Tenderer.qvd (qvd);
	
	ELSE
	
	RENAME Fields [_Tenderer city] to [Tenderer city], [_Tenderer region] to [Tenderer region], [_Tenderer country] to [Tenderer country], _TendererEN to TendererEN;	

ENDIF

// Получение ссылки YouControl
//ТЗ https://docs.google.com/document/d/***

Left Join (Tenderer)
Load 
	 IDTendererOrig,
	 Text(Trim(IDTendererOrig)) as TendererID          
Resident Tenderer;

RENAME Fields TendererYCResponseCode to _TendererYCResponseCode, [Посилання на профіль в YouControl] to [_Посилання на профіль в YouControl];

Tenderer_temp:
LOAD  Distinct
	  TendererID as _TendererID
Resident Tenderer
Where ((Len(KeepChar(IDTendererOrig, '0123456789')) = 8 AND Len(Trim(IDTendererOrig)) = 8) OR (Len(KeepChar(IDTendererOrig, '0123456789')) = 10 AND Len(Trim(IDTendererOrig)) = 10))
AND IsNull(_TendererYCResponseCode);

SET ErrorMode =  0;

IF NoOfRows('Tenderer_temp') > 0 THEN 

	CALL GETYCLINK('_TendererID', 'Tenderer_temp', 'Посилання на профіль в YouControl_', 'TendererYCResponseCode_');
	
	IF ScriptError = 0 THEN
	
		Left Join (Tenderer)
		LOAD 
			 _TendererID as TendererID,
			 [Посилання на профіль в YouControl_],
			 TendererYCResponseCode_
		Resident Tenderer_temp;	 
	
		Left Join (Tenderer)
		LOAD 
		 	 IDTendererOrig,
		 	 if(IsNull([_Посилання на профіль в YouControl]), [Посилання на профіль в YouControl_], [_Посилання на профіль в YouControl]) as [Посилання на профіль в YouControl],
		 	 if(IsNull(_TendererYCResponseCode), TendererYCResponseCode_, _TendererYCResponseCode) as TendererYCResponseCode
		Resident Tenderer;
	
		DROP Fields TendererID, [_Посилання на профіль в YouControl], [Посилання на профіль в YouControl_], _TendererYCResponseCode, TendererYCResponseCode_;
		
		STORE Tenderer into $(DIC_QVD_PATH)Tenderer.qvd (qvd);
	
	ENDIF
	
ENDIF

SET ErrorMode =  1;

DROP Table Tenderer_temp;

// Дата регистрации юр. лица
// ТЗ https://docs.google.com/document/d/***
IF NOT IsNull(FileSize('$(DIC_QVD_PATH)EDR_UO.qvd')) THEN
	Left Join (Tenderer)
	LOAD Distinct
		 EDRPOU as IDTendererOrig, 
	     StatusUOID
	FROM $(DIC_QVD_PATH)EDR_UO.qvd (qvd);
	
	Rename Fields [Дата реєстрації юридичної особи] to [_Дата реєстрації юридичної особи], RegDateStatus to _RegDateStatus;
	
	ToDefineDateTenderer:
	LOAD
		IDTendererOrig as TendererCode
	Resident Tenderer
	Where IsNull([_RegDateStatus]) AND NOT IsNull(StatusUOID);	
	
	DROP Field StatusUOID;
	
	IF NoOfRows('ToDefineDateTenderer') > 0 THEN
	
		SET ErrorMode = 0;
		
		CUSTOM CONNECT TO "Provider=QvRestConnector.exe;url=https://opendatabot.com/api/v2/companyrecord/33422484?apiKey%2***;sendExpect100Continue=True;checkResponseTypeOnTestConnection=true;authSchema=anonymous;skipServerCertificateValidation=1;timeout=300;method=GET;autoDetectResponseType=true;keyGenerationStrategy=3;useWindowsAuthentication=false;useCertificate=No;certificateStoreLocation=CurrentUser;certificateStoreName=My;PaginationType=None;XUserId=***;XPassword=***;";

		FOR Each vTendererCode in FieldValueList('TendererCode')
			
			RestConnectorMasterTable:
			SQL SELECT 
				"__KEY_root",
				(SELECT 
					"date" AS "date_u0",
					"__FK_registration"
				FROM "registration" FK "__FK_registration")
			FROM JSON (wrap on) "root" PK "__KEY_root"
			WITH CONNECTION (
			URL "https://opendatabot.com/api/v2/companyrecord/$(vTendererCode)?apiKey=xZXj4SJHQkuv"
			);
			
			[registration]:
			LOAD	
				 Date([date_u0]) as [Дата реєстрації юридичної особи_],
				 Text('$(vTendererCode)') as IDTendererOrig
			RESIDENT RestConnectorMasterTable
			WHERE NOT IsNull([__FK_registration]);
			
			Outer Join (registration)// для получения статуса всех кодов
			LOAD
				 Text('$(vTendererCode)') as IDTendererOrig
			AutoGenerate 1;	
			
//			IF Match(Second(Now()),0,1,2,3,4,5) AND Match(Minute(Now()),30, 59) THEN
//				STORE registration into registration.qvd (qvd); // !!! For Debug	 
//			ENDIF
				
			DROP TABLE RestConnectorMasterTable;
		
		NEXT
		
		//STORE registration into registration.qvd (qvd); // !!! For Debug
		
//		DROP Table ToDefineDateTenderer;
		
		SET ErrorMode = 1;
		
		Left Join (Tenderer)
		LOAD
			 Text(IDTendererOrig) as IDTendererOrig,
			 [Дата реєстрації юридичної особи_],
			 if(Not Isnull([Дата реєстрації юридичної особи_]), 1, 0) as RegDateStatus_
		Resident registration;	 
		
		DROP Table registration;
		
		Left Join (Tenderer)
		LOAD
			 IDTendererOrig,
			 Alt([_Дата реєстрації юридичної особи], [Дата реєстрації юридичної особи_]) as [Дата реєстрації юридичної особи],
			 Alt(_RegDateStatus, RegDateStatus_) as RegDateStatus
		Resident Tenderer;
		
		DROP Fields [_Дата реєстрації юридичної особи], [Дата реєстрації юридичної особи_], _RegDateStatus, RegDateStatus_;
		
		STORE Tenderer into $(DIC_QVD_PATH)Tenderer.qvd (qvd);
	
	ENDIF
	
	DROP Table ToDefineDateTenderer;
	
ENDIF

DROP Table Tenderer;

// Список периодов измененных тендеров
YearList:
LOAD YearPeriod
FROM $(FILES_PATH)YearList.txt
(txt, utf8, embedded labels, delimiter is '\t', msq);

// Безусловный период лет от начала до текущего года
//YearList:
//LOAD
//	 Year($(#vStartPeriod)) + RowNo() - 1 as YearPeriod
//AutoGenerate Year($(#vCurrentDate)) - Year($(#vStartPeriod)) + 1;

FOR Each vPeriod in FieldValueList('YearPeriod')

	// Перевод Тендер
	Tender:
	LOAD 
		 *
	FROM $(TRN_QVD_PATH)Tender_$(vPeriod).qvd (qvd);
	
	RENAME Field Tender to _Tender;
	
	Left Join (Tender)
	LOAD
		 IDTender,
		 Replace(Replace(Replace(Left(Тендер, 250), Chr(10), ' '), Chr(13), ' '), Chr(39), 'ꞌ') as Тендер250
	Resident Tender;	 
	
	Tender_Tmp:
	LOAD Distinct
		 Тендер250
	Resident Tender
	Where IsNull(_Tender);	 
	
	LET vCountTenders = NoOfRows('Tender_Tmp');
	
	IF $(vCountTenders) > 0 THEN
		CALL  TRANSLATE('Тендер250', 'Tender_Tmp', 'Tender_');
		
		Left Join (Tender)
		LOAD 
			 Тендер250,
			 Tender_
		Resident Tender_Tmp;
		
		Left Join (Tender)
		LOAD 
			 IDTender,
			 if(IsNull(_Tender), Tender_, _Tender) as Tender
		Resident Tender;
		
		DROP Fields _Tender, Tender_, Тендер250 From Tender;
	ENDIF
	
	DROP Table Tender_Tmp;
	
	IF $(vCountTenders) > 0 THEN
		STORE Tender into $(TRN_QVD_PATH)Tender_$(vPeriod).qvd (qvd);
	ENDIF
	
	DROP Table Tender; 

	// Перевод Лот
	LotTmp:
	LOAD 
		 *
	FROM
	$(TRN_QVD_PATH)Lot_$(vPeriod).qvd (qvd);
	
	RENAME Field Lot to _Lot;	
	
	Left Join (LotTmp)
	LOAD
		 IDLot,
		 Replace(Replace(Replace(Left(Лот, 250), Chr(10), ' '), Chr(13), ' '), Chr(39), 'ꞌ') as Лот250
	Resident LotTmp;
	
	Lot_Tmp:
	LOAD Distinct
		 Лот250
	Resident LotTmp
	Where IsNull(_Lot);	 
	
	LET vCountLots = NoOfRows('Lot_Tmp');
	
	IF $(vCountLots) > 0 THEN
		CALL  TRANSLATE('Лот250', 'Lot_Tmp', 'Lot_');
		
		Left Join (LotTmp)
		LOAD 
			 Лот250,
			 Lot_
		Resident Lot_Tmp;
		
		Lot:
		NoConcatenate
		LOAD 
			 *,
		     if(IsNull(_Lot), Lot_, _Lot) as Lot
		Resident LotTmp; 
		
		DROP Fields  _Lot, Lot_, Лот250 From Lot;  
	ENDIF
	
	DROP Tables LotTmp, Lot_Tmp;
	
	IF $(vCountLots) > 0 THEN
		STORE Lot into $(TRN_QVD_PATH)Lot_$(vPeriod).qvd (qvd);
		
		DROP Table Lot;
	ENDIF
	
	// Перевод ПодавшийЖалобу Award
	
	ComplaintAward:
	LOAD 
		 *
	FROM $(TRN_QVD_PATH)ComplaintAward_$(vPeriod).qvd (qvd);
	
	RENAME Field Complainant to _Complainant;
	
	Left Join (ComplaintAward)
	LOAD
		IDComplaintTender,
		Replace(Replace(Replace(ПодавшийЖалобу, Chr(10), ' '), Chr(13), ' '), Chr(39), 'ꞌ') as _ПодавшийЖалобу
	Resident ComplaintAward;	
	
	ComplaintAward_Tmp:
	LOAD Distinct
		 _ПодавшийЖалобу
	Resident ComplaintAward
	Where IsNull(_Complainant) AND ПодавшийЖалобу<>'' AND NOT IsNull(ПодавшийЖалобу);	 
	
	LET vCountComplaintAward = NoOfRows('ComplaintAward_Tmp');
	
	IF $(vCountComplaintAward) > 0 THEN
		CALL  TRANSLATE('_ПодавшийЖалобу', 'ComplaintAward_Tmp', 'Complainant_');
		
		Left Join (ComplaintAward)
		LOAD 
			 _ПодавшийЖалобу,
			 Complainant_
		Resident ComplaintAward_Tmp;
		
		Left Join (ComplaintAward)
		LOAD 
			 IDComplaintTender,
			 if(IsNull(_Complainant), Complainant_, _Complainant) as Complainant
		Resident ComplaintAward;
		
		DROP Fields _Complainant, Complainant_;
	ENDIF
	
	DROP Table ComplaintAward_Tmp;
	
	IF $(vCountComplaintAward) > 0 THEN
		DROP Field _ПодавшийЖалобу;
		STORE ComplaintAward into $(TRN_QVD_PATH)ComplaintAward_$(vPeriod).qvd (qvd);
	ENDIF
	
	DROP Table ComplaintAward;
	
	// Перевод ПодавшийЖалобу Qualification
	ComplaintQualification:
	LOAD 
		 *
	FROM $(TRN_QVD_PATH)ComplaintQualification_$(vPeriod).qvd (qvd);
	
	RENAME Field Complainant to _Complainant;
	
	Left Join (ComplaintQualification)
	LOAD
		 IDComplaintTender,
		 Replace(Replace(Replace(ПодавшийЖалобу, Chr(10), ' '), Chr(13), ' '), Chr(39), 'ꞌ') as _ПодавшийЖалобу
	Resident ComplaintQualification;	 
	
	ComplaintQualif_Tmp:
	LOAD Distinct
		 _ПодавшийЖалобу
	Resident ComplaintQualification
	Where IsNull(_Complainant) AND ПодавшийЖалобу<>'' AND NOT IsNull(ПодавшийЖалобу);	 
	
	LET vCountComplaintQualif = NoOfRows('ComplaintQualif_Tmp');
	
	IF $(vCountComplaintQualif) > 0 THEN
		CALL  TRANSLATE('_ПодавшийЖалобу', 'ComplaintQualif_Tmp', 'Complainant_');
		
		Left Join (ComplaintQualification)
		LOAD 
			 _ПодавшийЖалобу,
			 Complainant_
		Resident ComplaintQualif_Tmp;
		
		Left Join (ComplaintQualification)
		LOAD 
			 IDComplaintTender,
			 if(IsNull(_Complainant), Complainant_, _Complainant) as Complainant
		Resident ComplaintQualification;
		
		DROP Fields _Complainant, Complainant_;
	ENDIF
	
	DROP Table ComplaintQualif_Tmp;
	
	IF $(vCountComplaintQualif) > 0 THEN
		DROP Field _ПодавшийЖалобу;
		STORE ComplaintQualification into $(TRN_QVD_PATH)ComplaintQualification_$(vPeriod).qvd (qvd);
	ENDIF
	
	DROP Table ComplaintQualification;
	
	// Перевод ПодавшийЖалобу Tender
	ComplaintTender:
	LOAD 
		 *
	FROM $(TRN_QVD_PATH)ComplaintTender_$(vPeriod).qvd (qvd);
	
	RENAME Field Complainant to _Complainant;
	
	Left Join (ComplaintTender)
	LOAD
		 IDComplaintTender,
		 Replace(Replace(Replace(ПодавшийЖалобу, Chr(10), ' '), Chr(13), ' '), Chr(39), 'ꞌ') as _ПодавшийЖалобу
	Resident ComplaintTender;	 
	
	ComplaintTender_Tmp:
	LOAD Distinct
		 _ПодавшийЖалобу
	Resident ComplaintTender
	Where IsNull(_Complainant) AND ПодавшийЖалобу<>'' AND NOT IsNull(ПодавшийЖалобу);	 
	
	LET vCountComplaintTender = NoOfRows('ComplaintTender_Tmp');
	
	IF $(vCountComplaintTender) > 0 THEN
		CALL  TRANSLATE('_ПодавшийЖалобу', 'ComplaintTender_Tmp', 'Complainant_');
		
		Left Join (ComplaintTender)
		LOAD 
			 _ПодавшийЖалобу,
			 Complainant_
		Resident ComplaintTender_Tmp;
		
		Left Join (ComplaintTender)
		LOAD 
			 IDComplaintTender,
			 if(IsNull(_Complainant), Complainant_, _Complainant) as Complainant
		Resident ComplaintTender;
		
		DROP Fields _Complainant, Complainant_;
	ENDIF
	
	DROP Table ComplaintTender_Tmp;
	
	IF $(vCountComplaintTender) > 0 THEN
		DROP Field _ПодавшийЖалобу;
		STORE ComplaintTender into $(TRN_QVD_PATH)ComplaintTender_$(vPeriod).qvd (qvd);
	ENDIF
	
	DROP Table ComplaintTender;

NEXT

DROP Table YearList;

///$tab 13 Reload Model Flag
// Флаг перегружать модель
ReloadModel:
LOAD * Inline [
ReloadModelFlag
1
];

STORE ReloadModel INTO  $(DIC_QVD_PATH)ReloadModel.txt (txt);

///$tab Exit Script

//DROP TABLE RestConnectorMasterTable; 
Exit Script;

